<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PostgreSQL数据库迁移clickhouse数据库</title>
      <link href="/2023/10/25/database/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BBclickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/10/25/database/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BBclickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-建表语句"><a href="#1-建表语句" class="headerlink" title="1. 建表语句"></a>1. 建表语句</h2><h3 id="1-1-导出表结构"><a href="#1-1-导出表结构" class="headerlink" title="1.1  导出表结构"></a>1.1  导出表结构</h3><p>通过数据库工具导出历史年份所有的表结构</p><h3 id="1-2-提取目标表"><a href="#1-2-提取目标表" class="headerlink" title="1.2 提取目标表"></a>1.2 提取目标表</h3><p>导出所有的表结构中，一些表并不是我们需要的，需要提取出我们需要的表（明细表和代码表）</p><p>可通过正则将对应语句提取出来，不同文本工具可能有不同的换行符</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 明细表CREATE.+mx&quot;.+(\n)(.+(\n))+;CREATE.+mx&quot;.+(\r\n)(.+(\r\n))+;# 代码表CREATE.+&quot;d_.+(\n)(.+(\n))+;CREATE.+&quot;d_.+(\r\n)(.+(\r\n))+;</code></pre><p>如何建表语句没有drop语句，需给每张表添加上去</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">[</span><span class="token keyword">database</span><span class="token punctuation">.</span><span class="token punctuation">]</span>tablename<span class="token punctuation">;</span></code></pre><h3 id="1-3-转换字段类型"><a href="#1-3-转换字段类型" class="headerlink" title="1.3 转换字段类型"></a>1.3 转换字段类型</h3><p>CK数据库和postgreSQL数据库的字段类型不一致，需做转化</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">varchar</span> <span class="token operator">-</span><span class="token operator">></span> Nullable<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token operator">-</span><span class="token operator">></span> Nullable<span class="token punctuation">(</span>Int8<span class="token punctuation">)</span>、 Nullable<span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token keyword">timestamp</span> <span class="token operator">-</span><span class="token operator">></span> Nullable<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Nullable<span class="token punctuation">(</span><span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>……</code></pre><h3 id="1-4-添加数据库引擎"><a href="#1-4-添加数据库引擎" class="headerlink" title="1.4 添加数据库引擎"></a>1.4 添加数据库引擎</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 如：</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> tjqSETTINGS index_granularity <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span></code></pre><h3 id="1-5-order字段处理"><a href="#1-5-order字段处理" class="headerlink" title="1.5 order字段处理"></a>1.5 order字段处理</h3><p>去掉order字段的Nullable。</p><h3 id="1-6-验证建表语句"><a href="#1-6-验证建表语句" class="headerlink" title="1.6 验证建表语句"></a>1.6 验证建表语句</h3><h3 id="1-7-去掉不需要的表"><a href="#1-7-去掉不需要的表" class="headerlink" title="1.7 去掉不需要的表"></a>1.7 去掉不需要的表</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> system<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token keyword">where</span> <span class="token keyword">database</span> <span class="token operator">=</span> <span class="token string">'db_sftj_ods2017'</span> <span class="token operator">and</span> name <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> name <span class="token keyword">from</span> system<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token keyword">where</span> <span class="token keyword">database</span> <span class="token operator">=</span> <span class="token string">'db_sftj_ods'</span> <span class="token operator">and</span> name <span class="token operator">like</span> <span class="token string">'%mx'</span><span class="token punctuation">)</span><span class="token comment">--查找出需要的表名后，生成drop语句</span></code></pre><h2 id="2-查询语句"><a href="#2-查询语句" class="headerlink" title="2. 查询语句"></a>2. 查询语句</h2><h3 id="2-1-生成查询语句"><a href="#2-1-生成查询语句" class="headerlink" title="2.1 生成查询语句"></a>2.1 生成查询语句</h3><p>在clickhouse执行以下脚本</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token keyword">database</span> <span class="token operator">||</span><span class="token string">'.'</span> <span class="token operator">||</span><span class="token keyword">table</span> <span class="token operator">||</span> <span class="token string">'.sql'</span> <span class="token keyword">as</span> name_<span class="token punctuation">,</span><span class="token string">'SELECT\n'</span> <span class="token operator">||</span> arrayStringConcat<span class="token punctuation">(</span>groupArray<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">',\n'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'\nFROM '</span> <span class="token operator">||</span> <span class="token keyword">database</span> <span class="token operator">||</span> <span class="token string">'.'</span> <span class="token operator">||</span><span class="token keyword">table</span>  <span class="token keyword">AS</span> query  <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">,</span> <span class="token keyword">table</span><span class="token punctuation">,</span> <span class="token keyword">case</span> <span class="token keyword">when</span> name <span class="token operator">=</span> <span class="token string">'ay'</span> <span class="token keyword">then</span> <span class="token string">'trim(ay) as ay'</span> <span class="token keyword">else</span> name <span class="token keyword">end</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> system<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token keyword">where</span> <span class="token keyword">database</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'db_sftj_ods2016'</span><span class="token punctuation">,</span><span class="token string">'db_sftj_ods2017'</span><span class="token punctuation">,</span><span class="token string">'db_sftj_ods2018'</span><span class="token punctuation">)</span><span class="token operator">and</span> <span class="token keyword">table</span> <span class="token operator">like</span> <span class="token string">'%_mx'</span><span class="token punctuation">)</span> t<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">database</span><span class="token punctuation">,</span><span class="token keyword">table</span></code></pre><h3 id="2-2-导出到Excel中"><a href="#2-2-导出到Excel中" class="headerlink" title="2.2 导出到Excel中"></a>2.2 导出到Excel中</h3><h3 id="2-3-将Excel每行的数据导出到SQL文件中"><a href="#2-3-将Excel每行的数据导出到SQL文件中" class="headerlink" title="2.3 将Excel每行的数据导出到SQL文件中"></a>2.3 将Excel每行的数据导出到SQL文件中</h3><p>编写java程序，将Excel的第一列作为SQL文件名，第二列作为文本内容。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>hssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">HSSFDateUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>hssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">HSSFWorkbook</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">Cell</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">CellType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">DateUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">Row</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">Sheet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">Workbook</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span></span><span class="token class-name">XSSFWorkbook</span></span><span class="token punctuation">;</span><span class="token comment">/** * Test * * @author zhaohuan * @description * @date 2023/10/25 10:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCEL2003 <span class="token operator">=</span> <span class="token string">"xls"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> EXCEL2007 <span class="token operator">=</span> <span class="token string">"xlsx"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readExcel</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^.+\\.(?i)(xls)$"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^.+\\.(?i)(xlsx)$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Workbook</span> workbook <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> EXCEL2007<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span> <span class="token operator">:</span>                    <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> EXCEL2003<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workbook <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 默认读取第一个sheet</span>                <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> total <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> sheet<span class="token punctuation">.</span><span class="token function">getFirstRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 处理从第二行开始</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getFirstRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 目标文件</span>                    <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\business\\zg\\old\\"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span><span class="token class-name">Cell</span> cell<span class="token punctuation">,</span> <span class="token class-name">CellType</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cell <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果读到的单元格类型和期望不一致，需要改为期望的类型</span>            cell<span class="token punctuation">.</span><span class="token function">setCellType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> NUMERIC<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">isCellDateFormatted</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">HSSFDateUtil</span><span class="token punctuation">.</span><span class="token function">getJavaDate</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">:</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> STRING<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FORMULA<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BLANK<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">;</span>            <span class="token keyword">case</span> BOOLEAN<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ERROR<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">trimToEmpty</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">readExcel</span><span class="token punctuation">(</span><span class="token string">"test.xlsx"</span><span class="token punctuation">,</span> <span class="token string">"C:\\Users\\hu\\Desktop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-4-整理抽数任务"><a href="#2-4-整理抽数任务" class="headerlink" title="2.4 整理抽数任务"></a>2.4 整理抽数任务</h3><p>以代码表为例，执行SQL生成，将返回的结果放到solution的xml文件中。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'&lt;table>&lt;source_table>db_data2017.'</span><span class="token operator">||</span>name <span class="token operator">||</span><span class="token string">'&lt;/source_table>&lt;truncate>1&lt;/truncate>&lt;compute>1&lt;/compute>&lt;target_table>'</span><span class="token operator">||</span><span class="token keyword">database</span> <span class="token operator">||</span> <span class="token string">'.'</span> <span class="token operator">||</span> name <span class="token operator">||</span> <span class="token string">'&lt;/target_table>&lt;/table>'</span> <span class="token keyword">from</span> system<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> <span class="token keyword">database</span> <span class="token operator">=</span> <span class="token string">'db_sftj_ods2017'</span><span class="token operator">and</span> name <span class="token operator">like</span> <span class="token string">'d_%'</span><span class="token keyword">order</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据迁移 </tag>
            
            <tag> clickhouse </tag>
            
            <tag> postgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explain的使用</title>
      <link href="/2023/09/20/database/explain/"/>
      <url>/2023/09/20/database/explain/</url>
      
        <content type="html"><![CDATA[<p>对于互联网公司来说，随着用户量和数据量的不断增加，慢查询是无法避免的问题。</p><p>一般情况下如果出现慢查询，意味着接口响应慢、接口超时等问题，如果是高并发的场景，可能会出现数据库连接被占满的情况，直接导致服务不可用。</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>慢查询的确会导致很多问题，我们要如何优化慢查询呢？</p><p>主要解决办法有：</p><ul><li>监控sql执行情况，发邮件、短信报警，便于快速识别慢查询sql</li><li>打开数据库慢查询日志功能</li><li>简化业务逻辑</li><li>代码重构、优化</li><li>异步处理</li><li>sql优化</li><li>索引优化</li></ul><p>其他的办法先不说，后面有机会再单独介绍。今天我重点说说索引优化，因为它是解决慢查询sql问题最有效的手段。</p><p>如何查看某条sql的索引执行情况呢？</p><p>没错，在sql前面加上<code>explain</code>关键字，就能够看到它的执行计划，通过执行计划，我们可以清楚的看到表和索引执行的情况，索引有没有执行、索引执行顺序和索引的类型等。</p><p>索引优化的步骤是：</p><ol><li>使用<code>explain</code>查看sql执行计划</li><li>判断哪些索引使用不当</li><li>优化sql，sql可能需要多次优化才能达到索引使用的最优值</li></ol><p>既然索引优化的第一步是使用<code>explain</code>，我们先全面的了解一下它。</p><h1 id="2-explain介绍"><a href="#2-explain介绍" class="headerlink" title="2. explain介绍"></a>2. explain介绍</h1><p>先看看mysql的官方文档是怎么描述explain的：</p><p><img src="explain%E4%BB%8B%E7%BB%8D.jpg" alt="图片"></p><ul><li>EXPLAIN可以使用于 SELECT， DELETE， INSERT， REPLACE，和 UPDATE语句。</li><li>当EXPLAIN与可解释的语句一起使用时，MySQL将显示来自优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理该语句，包括有关如何连接表以及以何种顺序连接表的信息。</li><li>当EXPLAIN与非可解释的语句一起使用时，它将显示在命名连接中执行的语句的执行计划。</li><li>对于SELECT语句， EXPLAIN可以显示的其他执行计划的警告信息。</li></ul><h1 id="3-explain详解"><a href="#3-explain详解" class="headerlink" title="3. explain详解"></a>3. explain详解</h1><p>explain的语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql">&#123;<span class="token keyword">EXPLAIN</span> <span class="token operator">|</span> <span class="token keyword">DESCRIBE</span> <span class="token operator">|</span> <span class="token keyword">DESC</span>&#125;    tbl_name <span class="token punctuation">[</span>col_name <span class="token operator">|</span> wild<span class="token punctuation">]</span>&#123;<span class="token keyword">EXPLAIN</span> <span class="token operator">|</span> <span class="token keyword">DESCRIBE</span> <span class="token operator">|</span> <span class="token keyword">DESC</span>&#125;    <span class="token punctuation">[</span>explain_type<span class="token punctuation">]</span>    &#123;explainable_stmt <span class="token operator">|</span> <span class="token keyword">FOR</span> CONNECTION connection_id&#125;explain_type: &#123;    <span class="token keyword">EXTENDED</span>  <span class="token operator">|</span> PARTITIONS  <span class="token operator">|</span> FORMAT <span class="token operator">=</span> format_name&#125;format_name: &#123;    TRADITIONAL  <span class="token operator">|</span> JSON&#125;explainable_stmt: &#123;    <span class="token keyword">SELECT</span> statement  <span class="token operator">|</span> <span class="token keyword">DELETE</span> statement  <span class="token operator">|</span> <span class="token keyword">INSERT</span> statement  <span class="token operator">|</span> <span class="token keyword">REPLACE</span> statement  <span class="token operator">|</span> <span class="token keyword">UPDATE</span> statement&#125;</code></pre><p>用一条简单的sql看看使用<code>explain</code>关键字的效果：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1<span class="token punctuation">;</span></code></pre><p>执行结果：</p><p><img src="image-20230407162014837.png" alt="image-20230407162014837"></p><p>从上图中看到执行结果中会显示12列信息，每列具体信息如下：</p><p><img src="explain%E8%AF%A6%E6%83%85.png" alt="image-20230407162102727"></p><p>说白了，我们要搞懂这些列的具体含义才能正常判断索引的使用情况。</p><p>话不多说，直接开始介绍吧。</p><h2 id="3-1-id-列"><a href="#3-1-id-列" class="headerlink" title="3.1 id 列"></a>3.1 id 列</h2><p>该列的值是select查询中的序号，比如：1、2、3、4等，它决定了表的执行顺序。</p><p>某条sql的执行计划中一般会出现三种情况：</p><ol><li>id相同</li><li>id不同</li><li>id相同和不同都有</li></ol><p>那么这三种情况表的执行顺序是怎么样的呢？</p><h3 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain  select * from test1 t1 inner  join test1 t2 on t1.id&#x3D;t2.id</code></pre><p>结果：</p><p><img src="explain-id%E7%9B%B8%E5%90%8C.png" alt="image-20230407170623298"></p><p>我们看到执行结果中的两条数据id都是1，是相同的。</p><p>这种情况表的执行顺序是怎么样的呢？</p><p>答案：从上到下执行，先执行表t1，再执行表t2。</p><p>执行的表要怎么看呢？</p><p>答案：看table字段，这个字段后面会详细解释。</p><h3 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain  select * from test1 t1 where t1.id &#x3D; (select  id  from  test1 t2 where  t2.id&#x3D;2);</code></pre><p>结果：</p><p><img src="explain-id%E4%B8%8D%E5%90%8C.png" alt="image-20230407170657862"></p><p>我们看到执行结果中两条数据的id不同，第一条数据是1，第二条数据是2。</p><p>这种情况表的执行顺序是怎么样的呢？</p><p>答案：序号大的先执行，这里会从下到上执行，先执行表t2，再执行表t1。</p><h3 id="id相同和不同都有"><a href="#id相同和不同都有" class="headerlink" title="id相同和不同都有"></a>id相同和不同都有</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select t1.* from test1 t1inner  join (select  max(id) mid  from test1 group  by  id) t2on t1.id&#x3D;t2.mid</code></pre><p>结果：</p><p><img src="explain-id.png" alt="image-20230407170747249"></p><p>我们看到执行结果中三条数据，前面两条数据的的id相同，第三条数据的id跟前面的不同。</p><p>这种情况表的执行顺序又是怎么样的呢？</p><p>答案：先执行序号大的，先从下而上执行。遇到序号相同时，再从上而下执行。所以这个列子中表的顺序顺序是：test1、t1、</p><p><strong>也许你会在这里心生疑问：<code>&lt;</code> <code>derived2&gt;</code> 是什么鬼？</strong></p><p>它表示派生表，别急后面会讲的。</p><p><strong>还有一个问题：id列的值允许为空吗？</strong></p><p>答案在后面揭晓。</p><h2 id="3-2-select-type列"><a href="#3-2-select-type列" class="headerlink" title="3.2 select_type列"></a>3.2 select_type列</h2><p>该列表示select的类型。具体包含了如下11种类型：</p><p><img src="explain-select-type.png" alt="image-20230407170928503"></p><p>但是常用的其实就是下面几个：</p><table><thead><tr><th align="left">类型</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">SIMPLE</td><td align="left">简单SELECT查询，不包含子查询和UNION</td></tr><tr><td align="left">PRIMARY</td><td align="left">复杂查询中的最外层查询，表示主要的查询</td></tr><tr><td align="left">SUBQUERY</td><td align="left">SELECT或WHERE列表中包含了子查询</td></tr><tr><td align="left">DERIVED</td><td align="left">FROM列表中包含的子查询，即衍生</td></tr><tr><td align="left">UNION</td><td align="left">UNION关键字之后的查询</td></tr><tr><td align="left">UNION RESULT</td><td align="left">从UNION后的表获取结果集</td></tr></tbody></table><p>下面看看这些SELECT类型具体是怎么出现的：</p><h3 id="SIMPLE"><a href="#SIMPLE" class="headerlink" title="SIMPLE"></a>SIMPLE</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test1;  </code></pre><p>结果：</p><p><img src="explain-select-simple.png" alt="image-20230407170958964"></p><p>它只在简单SELECT查询中出现，不包含子查询和UNION，这种类型比较直观就不多说了。</p><h3 id="PRIMARY-和-SUBQUERY"><a href="#PRIMARY-和-SUBQUERY" class="headerlink" title="PRIMARY 和 SUBQUERY"></a>PRIMARY 和 SUBQUERY</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test1 t1 where t1.id &#x3D; (select id from  test1 t2 where  t2.id&#x3D;2);  </code></pre><p>结果：</p><p><img src="explain-select-PRIMARY.png" alt="image-20230407171213740"></p><p>我们看到这条嵌套查询的sql中，最外层的t1表是PRIMARY类型，而最里面的子查询t2表是SUBQUERY类型。</p><h3 id="DERIVED"><a href="#DERIVED" class="headerlink" title="DERIVED"></a>DERIVED</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain  select t1.* from test1 t1  inner join (select max(id) mid from test1 group by id) t2  on t1.id&#x3D;t2.mid  </code></pre><p>结果：</p><p><img src="explain-select-DERIVED.png" alt="image-20230407171250731"></p><p>最后一条记录就是衍生表，它一般是FROM列表中包含的子查询，这里是sql中的分组子查询。</p><h3 id="UNION-和-UNION-RESULT"><a href="#UNION-和-UNION-RESULT" class="headerlink" title="UNION 和 UNION RESULT"></a>UNION 和 UNION RESULT</h3><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain  select * from test1  union  select* from test2  </code></pre><p>结果：</p><p><img src="explain-select-UNION.png" alt="image-20230407171327857"></p><p>test2表是UNION关键字之后的查询，所以被标记为UNION，test1是最主要的表，被标记为PRIMARY。而&lt;union1,2&gt;表示id=1和id=2的表union，其结果被标记为UNION RESULT。</p><p>UNION 和 UNION RESULT一般会成对出现。</p><p><strong>此外，回答上面的问题：</strong> <strong>id列的值允许为空吗？</strong></p><p>如果仔细看上面那张图，会发现id列是可以允许为空的，并且是在SELECT类型为：UNION RESULT的时候。</p><h2 id="3-3-table列"><a href="#3-3-table列" class="headerlink" title="3.3 table列"></a>3.3 table列</h2><p>该列的值表示输出行所引用的表的名称，比如前面的：test1、test2等。</p><p>但也可以是以下值之一：</p><ul><li><code>&lt;unionM,N&gt;</code>：具有和id值的行的M并集N。</li><li><code>&lt;derivedN&gt;</code>：用于与该行的派生表结果id的值N。派生表可能来自（例如）FROM子句中的子查询 。</li><li><code>&lt;subqueryN&gt;</code>：子查询的结果，其id值为N</li></ul><h2 id="3-4-partitions列"><a href="#3-4-partitions列" class="headerlink" title="3.4 partitions列"></a>3.4 partitions列</h2><p>该列的值表示查询将从中匹配记录的分区</p><h2 id="3-5-type列"><a href="#3-5-type列" class="headerlink" title="3.5 type列"></a>3.5 type列</h2><p>该列的值表示连接类型，是查看索引执行情况的一个重要指标。包含如下类型：</p><p><img src="explain-type.png" alt="image-20230407171511712"></p><p>执行结果从最好到最坏的的顺序是从上到下。</p><p>我们需要重点掌握的是下面几种类型：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</p><p>在演示之前，先说明一下test2表中只有一条数据：</p><p><img src="explain-type-data1.png" alt="image-20230407171605051"></p><p>并且code字段上面建了一个普通索引：</p><p><img src="explain-type-data2.png" alt="image-20230407171638167"></p><p>下面逐一看看常见的几个连接类型是怎么出现的：</p><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>这种类型要求数据库表中只有一条数据，是const类型的一个特例，一般情况下是不会出现的。</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>通过一次索引就能找到数据，一般用于主键或唯一索引作为条件的查询sql中，执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test2 where id&#x3D;1;  </code></pre><p>结果：</p><p><img src="explain-type-const.png" alt="image-20230407172107552"></p><h3 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h3><p>常用于主键或唯一索引扫描。执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test2 t1 inner join test2 t2 on t1.id&#x3D;t2.id;  </code></pre><p>结果：</p><p><img src="explain-type-eq_ref.png" alt="image-20230407172150041"></p><p>此时，有人可能感到不解，const和eq_ref都是对主键或唯一索引的扫描，有什么区别？</p><p>答：const只索引一次，而eq_ref主键和主键匹配，由于表中有多条数据，一般情况下要索引多次，才能全部匹配上。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>常用于非主键和唯一索引扫描。执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test2 where code &#x3D; &#39;001&#39;;  </code></pre><p>结果：</p><p><img src="explain-type-ref.png" alt="image-20230407172217914"></p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>常用于范围查询，比如：between … and 或 In 等操作，执行sql如下：</p><pre class="language-none"><code class="language-none">explain select * from test2 where id between 1 and 2;  </code></pre><p>结果：</p><p><img src="explain-type-range.png" alt="image-20230407172245746"></p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>全索引扫描。执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code from test2;  </code></pre><p>结果：</p><p><img src="explain-type-index.png" alt="image-20230407172400964"></p><h3 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h3><p>全表扫描。执行sql如下：</p><pre class="language-none"><code class="language-none">explain select *  from test2;  </code></pre><p>结果：</p><p><img src="explain-type-all.png" alt="image-20230407172509704"></p><h2 id="3-6-possible-keys列"><a href="#3-6-possible-keys列" class="headerlink" title="3.6 possible_keys列"></a>3.6 possible_keys列</h2><p>该列表示可能的索引选择。</p><p>请注意，此列完全独立于表的顺序，这就意味着possible_keys在实践中，某些键可能无法与生成的表顺序一起使用。</p><p>如果此列是NULL，则没有相关的索引。在这种情况下，您可以通过检查该WHERE 子句以检查它是否引用了某些适合索引的列，从而提高查询性能。</p><h2 id="3-7-key列"><a href="#3-7-key列" class="headerlink" title="3.7 key列"></a>3.7 key列</h2><p>该列表示实际用到的索引。</p><p>可能会出现possible_keys列为NULL，但是key不为NULL的情况。</p><p>演示之前，先看看test1表结构：</p><p><img src="explain-keys-table.png" alt="image-20230407172616848"></p><p>test1表中数据：</p><p><img src="explain-keys-table-data.png" alt="image-20230407172632169"></p><p>使用的索引：</p><p><img src="explain-keys-table-index.png" alt="image-20230407172645184"></p><p>code和name字段使用了联合索引。</p><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code  from test1;</code></pre><p>结果：</p><p><img src="explain-keys-table-result.png" alt="image-20230407172709167"></p><p>这条sql预计没有使用索引，但是实际上使用了全索引扫描方式的索引。</p><h2 id="3-8-key-len列"><a href="#3-8-key-len列" class="headerlink" title="3.8 key_len列"></a>3.8 key_len列</h2><p>该列表示使用索引的长度。上面的key列可以看出有没有使用索引，key_len列则可以更进一步看出索引使用是否充分。不出意外的话，它是最重要的列。</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p><strong>有个关键的问题浮出水面：key_len是如何计算的？</strong></p><p>决定key_len值的三个因素：</p><p>1.字符集</p><p>2.长度</p><p>3.是否为空</p><p>常用的字符编码占用字节数量如下：</p><p><img src="explain-key_len_charset.png" alt="image-20230407172914932"></p><p>目前我的数据库字符编码格式用的：UTF8占3个字节。</p><p>mysql常用字段占用字节数：</p><table><thead><tr><th align="left">字段类型</th><th align="left">占用字节数</th></tr></thead><tbody><tr><td align="left">char(n)</td><td align="left">n</td></tr><tr><td align="left">varchar(n)</td><td align="left">n + 2</td></tr><tr><td align="left">tinyint</td><td align="left">1</td></tr><tr><td align="left">smallint</td><td align="left">2</td></tr><tr><td align="left">int</td><td align="left">4</td></tr><tr><td align="left">bigint</td><td align="left">8</td></tr><tr><td align="left">date</td><td align="left">3</td></tr><tr><td align="left">timestamp</td><td align="left">4</td></tr><tr><td align="left">datetime</td><td align="left">8</td></tr></tbody></table><p>此外，如果字段类型允许为空则加1个字节。</p><p>上图中的 184是怎么算的？</p><p>184 = 30 * 3 + 2 + 30 * 3 + 2</p><p>再把test1表的code字段类型改成char，并且改成允许为空：</p><p><img src="explain-key_len_table.png" alt="image-20230407173030501"></p><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code  from test1;</code></pre><p>结果：</p><p><img src="explain-key_len_table-index-usage1.png" alt="image-20230407174726815"></p><p>怎么算的？</p><p>183 = 30 * 3 + 1 + 30 * 3 + 2</p><p><strong>还有一个问题：为什么这列表示索引使用是否充分呢，还有使用不充分的情况？</strong></p><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code  from test1 where code&#x3D;&#39;001&#39;;</code></pre><p>结果：</p><p><img src="explain-key_len_table-index-usage2.png" alt="image-20230407174715998"></p><p>上图中使用了联合索引：idx_code_name，如果索引全匹配key_len应该是183，但实际上却是92，这就说明没有使用所有的索引，索引使用不充分。</p><h2 id="3-9-ref列"><a href="#3-9-ref列" class="headerlink" title="3.9 ref列"></a>3.9 ref列</h2><p>该列表示索引命中的列或者常量。</p><p>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select *  from test1 t1 inner join test1 t2 on t1.id&#x3D;t2.id where t1.code&#x3D;&#39;001&#39;;</code></pre><p>结果：</p><p><img src="explain-ref-result.png" alt="image-20230407175639364"></p><p>我们看到表t1命中的索引是const(常量)，而t2命中的索引是列sue库的t1表的id字段。</p><h2 id="3-10-rows列"><a href="#3-10-rows列" class="headerlink" title="3.10 rows列"></a>3.10 rows列</h2><p>该列表示MySQL认为执行查询必须检查的行数。</p><p>对于InnoDB表，此数字是估计值，可能并不总是准确的。</p><h2 id="3-11-filtered列"><a href="#3-11-filtered列" class="headerlink" title="3.11 filtered列"></a>3.11 filtered列</h2><p>该列表示按表条件过滤的表行的估计百分比。最大值为100，这表示未过滤行。值从100减小表示过滤量增加。</p><p><img src="explain-filtered-result.png" alt="image-20230407175753457"></p><p>rows显示了检查的估计行数，rows× filtered显示了与下表连接的行数。例如，如果 rows为1000且 filtered为50.00（50％），则与下表连接的行数为1000×50％= 500。</p><h2 id="3-12-Extra列"><a href="#3-12-Extra列" class="headerlink" title="3.12 Extra列"></a>3.12 Extra列</h2><p>该字段包含有关MySQL如何解析查询的其他信息，这列还是挺重要的，但是里面包含的值太多，就不一一介绍了，只列举几个常见的。</p><h3 id="Impossible-WHERE"><a href="#Impossible-WHERE" class="headerlink" title="Impossible WHERE"></a>Impossible WHERE</h3><p>表示WHERE后面的条件一直都是false，<br>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code  from test1 where &#39;a&#39; &#x3D; &#39;b&#39;;  </code></pre><p>结果：</p><p><img src="explain-Impossible-result.png" alt="image-20230407180018747"></p><h3 id="Using-filesort"><a href="#Using-filesort" class="headerlink" title="Using filesort"></a>Using filesort</h3><p>表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现。<br>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select code  from test1 order by name desc;  </code></pre><p>这里建立的是code和name的联合索引，顺序是code在前，name在后，这里直接按name降序，跟之前联合索引的顺序不一样。</p><h3 id="Using-index"><a href="#Using-index" class="headerlink" title="Using index"></a>Using index</h3><p>表示是否用了覆盖索引，说白了它表示是否所有获取的列都走了索引。</p><p><img src="explain-index-result.png" alt="image-20230407180115952"></p><p>上面那个例子中其实就用到了：Using index，因为只返回一列code，它字段走了索引。</p><h3 id="Using-temporary"><a href="#Using-temporary" class="headerlink" title="Using temporary"></a>Using temporary</h3><p>表示是否使用了临时表，一般多见于order by 和 group by语句。<br>执行sql如下：</p><pre class="language-none"><code class="language-none">explain select name  from test1 group by name;  </code></pre><h3 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h3><p>表示使用了where条件过滤。</p><h3 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h3><p>表示是否使用连接缓冲。来自较早联接的表被部分读取到联接缓冲区中，然后从缓冲区中使用它们的行来与当前表执行联接。</p><h1 id="4-索引优化的过程"><a href="#4-索引优化的过程" class="headerlink" title="4. 索引优化的过程"></a>4. 索引优化的过程</h1><p>1.先用慢查询日志定位具体需要优化的sql</p><p>2.使用explain执行计划查看索引使用情况</p><p>3.重点关注：</p><p>key（查看有没有使用索引）</p><p>key_len（查看索引使用是否充分）</p><p>type（查看索引类型）</p><p>Extra（查看附加信息：排序、临时表、where条件为false等）</p><p>一般情况下根据这4列就能找到索引问题。</p><p>4.根据上1步找出的索引问题优化sql</p><p>5.再回到第2步</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> explain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx总结</title>
      <link href="/2023/08/14/nginx/nginx%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/14/nginx/nginx%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h2><p>梳理部分常用的命令</p><pre class="language-sh" data-language="sh"><code class="language-sh">&#x2F;sbin&#x2F;nginx -t                   # 检查配置文件nginx.conf是否正确&#x2F;sbin&#x2F;nginx                      # 启动nginx&#x2F;sbin&#x2F;nginx -s reload            # 重新载入配置文件&#x2F;sbin&#x2F;nginx -s reopen            # 重启 Nginx&#x2F;sbin&#x2F;nginx -s stop              # 停止 Nginx&#x2F;sbin&#x2F;nginx -c conf_file         # 指定配置文件</code></pre><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><ol><li><p>远端下载</p><pre class="language-sh" data-language="sh"><code class="language-sh">yum install -y nginx</code></pre></li><li><p>启动nginx</p><pre class="language-sh" data-language="sh"><code class="language-sh">systemctl enable nginx.service #启动systemctl enable nginx.service #开机启动</code></pre></li><li><p>在浏览器验证nginx是否启动成功</p></li></ol><h4 id="卸载nginx"><a href="#卸载nginx" class="headerlink" title="卸载nginx"></a>卸载nginx</h4><pre class="language-sh" data-language="sh"><code class="language-sh"># 方式一yum remove nginx#方式二1. 查找nginx文件 whereis nginx 或者 find &#x2F; -name nginx2. 依次删除 rm -rf &#x2F;usr&#x2F;local&#x2F;nginx</code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>到 nginx 官网下载软件: <a href="http://nginx.org/">http://nginx.org/</a></p><h4 id="1-安装-pcre"><a href="#1-安装-pcre" class="headerlink" title="1. 安装 pcre"></a>1. 安装 pcre</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><ol><li>获取pcre压缩文件</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">wget https:&#x2F;&#x2F;jaist.dl.sourceforge.net&#x2F;project&#x2F;pcre&#x2F;pcre&#x2F;8.37&#x2F;pcre-8.37.tar.gztar –xvf pcre-8.37.tar.gz</code></pre><ol start="2"><li><p>进入 pcre-8.37.tar.gz解压后的目录，执行 <code>./configure </code></p></li><li><p>执行完成后，再执行 <code>make &amp;&amp; make install</code> 命令，完成pcre的安装</p></li></ol><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>通过yum安装</p><pre class="language-sh" data-language="sh"><code class="language-sh">yum -y install pcrepcre-config --version</code></pre><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h4><p>安装 openssl 、 zlib 、 gcc 依赖</p><pre class="language-sh" data-language="sh"><code class="language-sh">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</code></pre><h4 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3. 安装nginx"></a>3. 安装nginx</h4><ol><li><p>去官网下载nginx <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><pre class="language-sh" data-language="sh"><code class="language-sh">或者 wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.18.0.tar.gz# 最新版 http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.22.1.tar.gz</code></pre></li><li><p>解压到指定目录</p><pre class="language-sh" data-language="sh"><code class="language-sh">tar –zxvf nginx-1.12.2.tar.gz</code></pre><p>进入 nginx.xx.tar.gz 解压后的目录，执行<code> ./configure</code>来进行检查</p></li><li><p>执行<code>make &amp;&amp; make install </code>命令，完成nginx的安装</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 完整命令示例：wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.18.0.tar.gztar -zxvf nginx-1.18.0.tar.gzcd nginx-1.18.0.&#x2F;configure --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx \--conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf \--pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid \--with-http_gzip_static_module \--with-http_stub_status_module \--with-file-aio \--with-http_realip_module \--with-http_ssl_module \--with-pcre&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;pcre-8.44 \--with-zlib&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;zlib-1.2.11 \--with-openssl&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g# configure配置简洁版.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module# config 报错 执行 yum -y install pcre-develmake &amp;&amp; make install#</code></pre></li><li><p>可查看安装完成后的文件</p><pre class="language-sh" data-language="sh"><code class="language-sh">rpm -ql nginx # -q 代表询问模式，-l 代表返回列表</code></pre><p>在安装目录的sbin目录下执行<code>./nginx</code>来启动nginx</p></li><li><p>浏览器访问nginx，查看效果。</p></li></ol><h4 id="4-目录结构"><a href="#4-目录结构" class="headerlink" title="4. 目录结构"></a>4. 目录结构</h4><ul><li> <strong>src</strong> 目录：存放 Nginx 的源代码。</li><li> <strong>man</strong> 目录：存放 Nginx 的帮助文档 。</li><li> <strong>html</strong> 目 录 ：存放默认网站文件 。</li><li> <strong>contrib</strong> 目录：存放其他机构或组织贡献的文档资料。</li><li> <strong>conf</strong> 目录：存放 Nginx 服务器的配置文件。</li><li> <strong>auto</strong> 目录：存放大量的脚本文件， 和 configure 脚本程序相关。</li><li> <strong>configure</strong> 文件： Nginx 自动安装脚本，用于检查环境，生成编译代码需要的 makefile 文件。</li></ul><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>整体结构为嵌套结构：</p><p><img src="nginx.conf%E9%85%8D%E7%BD%AE.jpg" alt="nginx.conf结构"></p><ul><li><strong>全局块：</strong>配置影响全局，包括运行 nginx 的用户组，进程存放，日志，配置文件等</li><li><strong>events：</strong>配置影响 nginx 服务器与客户端的网络连接，包括进程最大连接数，数据驱动模型，序列化等</li><li><strong>http：</strong>配置代理，缓存，日志，第三方模块等，可嵌套多个 server<ul><li><strong>server：</strong>配置虚拟主机的参数<ul><li><strong>location：</strong>配置请求路由，页面处理</li></ul></li></ul></li></ul><p>如：</p><pre class="language-sh" data-language="sh"><code class="language-sh">#全局配置------------------------------------------------------------------------...              #events 配置--------------------------------------------------------------------events &#123;   ...&#125;#http 配置----------------------------------------------------------------------http&#123;#http 全局配置    ...    #server 全局配置    server    &#123;     #server全局配置        ...               #location配置        location [PATTERN]           &#123;            ...        &#125;    &#125;&#125;</code></pre><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><pre class="language-sh" data-language="sh"><code class="language-sh">#全局配置-------------------------------------------------------------#指定nginx运行的用户及用户组,默认为nobody#user  nobody nobody;#开启线程数，最大值可设逻辑CPU核数#worker_processes  1; #定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#指定进程id的存储文件位置#pid        logs&#x2F;nginx.pid;#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制#worker_rlimit_nofile 65535#envents 配置----------------------------------------------------------events &#123;    ...&#125;#http 配置-------------------------------------------------------------http &#123;    ...&#125;</code></pre><h3 id="events-配置"><a href="#events-配置" class="headerlink" title="events 配置"></a>events 配置</h3><pre class="language-sh" data-language="sh"><code class="language-sh">events &#123;    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和&#x2F;dev&#x2F;poll模式    use epoll;    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制    worker_connections  1024;&#125;</code></pre><h3 id="http-配置"><a href="#http-配置" class="headerlink" title="http 配置"></a>http 配置</h3><pre class="language-sh" data-language="sh"><code class="language-sh">http &#123;    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度    include       mime.types;        #核心模块指令，默认设置为二进制流，也就是当文件类型未定义时使用这种方式    default_type  application&#x2F;octet-stream;        #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;#引用日志main格式access_log  logs&#x2F;access.log  main;    #设置允许客户端请求的最大的单个文件字节数    client_max_body_size 20M;    #指定来自客户端请求头的headebuffer大小    client_header_buffer_size  32k;    #指定连接请求试图写入缓存文件的目录路径    client_body_temp_path &#x2F;dev&#x2F;shm&#x2F;client_body_temp;    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB    large client_header_buffers 4 32k;    #开启高效文件传输模式    sendfile        on;    #开启防止网络阻塞    tcp_nopush     on;    #开启防止网络阻塞    tcp_nodelay    on;    #设置客户端连接保存活动的超时时间    #keepalive_timeout  0; # 无限时间    keepalive_timeout  65;    #设置客户端请求读取header超时时间    client_header_timeout 10;    #设置客户端请求body读取超时时间    client_body_timeout 10;    #HttpGZip模块配置    #开启gzip压缩    gzip  on;    #设置允许压缩的页面最小字节数    gzip_min_length 1k;    #申请4个单位为16K的内存作为压缩结果流缓存    gzip_buffers 4 16k;    #设置识别http协议的版本，默认为1.1    gzip_http_version 1.1;    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快    gzip_comp_level 2;    #指定压缩的类型    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;    #让前端的缓存服务器进过gzip压缩的页面    gzip_vary on;         # server配置    server &#123;            &#125;    &#125;</code></pre><h3 id="server-配置"><a href="#server-配置" class="headerlink" title="server 配置"></a>server 配置</h3><pre class="language-sh" data-language="sh"><code class="language-sh">server &#123;    #单连接请求上限次数    keepalive_requests 120;     #监听端口    listen       88;    #监听地址，可以是ip，最好是域名    server_name  111.222.333.123;    #server_name  www.123.com;    #设置访问的语言编码    charset utf-8;    #设置虚拟主机访问日志的存放路径及日志的格式为main    access_log  &#x2F;www&#x2F;wwwlogs&#x2F;111.222.333.123.log main; #响应日志    error_log  &#x2F;www&#x2F;wwwlogs&#x2F;111.222.333.123.log main; #错误日志        #PHP-INFO-START  PHP引用配置，可以注释或修改    include enable-php-74.conf;    #PHP-INFO-END        #REWRITE-START URL重写规则引用    include &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;rewrite&#x2F;111.222.333.123.conf;    #REWRITE-END        #设置主机基本信息    #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。    location  ~*^.+$ &#123;    #根目录        root html;          #设置默认页        index  index.html index.htm;        #拒绝的ip,黑名单        deny 127.0.0.1;          #允许的ip，白名单        allow 172.18.5.54;     &#125;         #禁止访问的文件或目录    location ~ ^&#x2F;(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)    &#123;        return 404;    &#125;        #SSL证书验证目录相关设置    location ~ \.well-known&#123;        allow all;    &#125;    #图片资源配置    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$    &#123;        expires      30d;        error_log &#x2F;dev&#x2F;null;        access_log off;    &#125;        #网站js与css资源配置    location ~ .*\.(js|css)?$    &#123;        expires      12h;        error_log &#x2F;dev&#x2F;null;        access_log off;     &#125;        #访问异常页面配置    error_page  404              &#x2F;404.html;    error_page  500 502 503 504  &#x2F;50x.html;    location &#x3D; &#x2F;50x.html &#123;root   html;&#125;&#125;</code></pre><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理，任何可以连接到该代理服务器的软件，就可以通过代理访问任何的其他服务器，然后把数据返回给客户端，这里代理服务器只对<strong>客户端</strong>负责。</p><p>正向代理时，由客户端发送对某一个目标服务器的请求，代理服务器在中间将请求转发给该目标服务器，目标服务器将结果返回给代理服务器，代理服务器再将结果返回给客户端。</p><p>使用正向代理时，客户端是需要配置代理服务的地址、端口、账号密码（如有）等才可使用的。</p><p><img src="%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="正向代理流程"></p><p>通过上图可以看到，客户端并没有直接与服务器相连。正向代理隐藏了真实的客户端地址。可以很好地保护客户端的安全性。</p><h4 id="正向代理的适用场景"><a href="#正向代理的适用场景" class="headerlink" title="正向代理的适用场景"></a>正向代理的适用场景</h4><ul><li><p><strong>访问被禁止的资源</strong>（让客户端访问原本不能访问的服务器。可能是由于路由的原因，或者策略配置的原因，客户端不能直接访问某些服务器。为了访问这些服务器，可通过代理服务器来访问）</p></li><li><ul><li>突破网络审查（比如谷歌、youtube…）</li></ul></li></ul><p><img src="%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%BA%94%E7%94%A8.png" alt="正向代理"></p><ul><li><ul><li>再比如客户端IP被服务器封禁，可以绕过IP封禁</li><li>也可以突破网站的区域限制</li></ul></li><li><p><strong>隐藏客户端的地址</strong>（对于被请求的服务器而言，代理服务器代表了客户端，所以在服务器或者网络拓扑上，看不到原始客户端）</p></li><li><p><strong>进行客户访问控制</strong></p></li><li><ul><li>可以集中部署策略，控制客户端的访问行为（访问认证等）</li><li>记录用户访问记录（上网行为管理）</li><li>内部资源的控制（公司、教育网等）</li></ul></li><li><p><strong>加速访问资源</strong></p></li><li><ul><li>使用缓冲特性减少网络使用率（代理服务器设置一个较大的缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。）</li></ul></li><li><p><strong>过滤内容</strong>（可以通过代理服务器统一过滤一些危险的指令/统一加密一些内容、防御代理服务器两端的一些攻击性行为）</p></li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知代理服务器的IP地址，而不知道在代理服务器后面的服务器集群的存在。</p><p><img src="%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="img"></p><p>反向代理整个流程：由客户端发起对代理服务器的请求，代理服务器在中间将请求转发给某一个服务器，服务器将结果返回给代理服务器，代理服务器再将结果返回给客户端。</p><h4 id="反向代理的适用场景"><a href="#反向代理的适用场景" class="headerlink" title="反向代理的适用场景"></a><strong>反向代理的适用场景</strong></h4><ul><li><p><strong>负载均衡</strong></p></li><li><ul><li>如果服务器集群中有负荷较高者，反向代理通过URL重写，根据连线请求从负荷较低者获取与所需相同的资源或备援。可以有效降低服务器压力，增加服务器稳定性</li></ul></li><li><p><strong>提升服务器安全性</strong></p></li><li><ul><li>可以对客户端隐藏服务器的IP地址</li><li>也可以作为应用层防火墙，为网站提供对基于Web的攻击行为（例如DoS/DDoS）的防护，更容易排查恶意软件等</li></ul></li><li><p><strong>加密/SSL加速：</strong>将SSL加密工作交由配备了SSL硬件加速器的反向代理来完成</p></li><li><p><strong>提供缓存服务</strong>，加速客户端访问</p></li><li><ul><li>对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务</li></ul></li><li><p><strong>数据统一压缩</strong></p></li><li><ul><li>节约带宽</li><li>为网络带宽不好的网络提供服务</li></ul></li><li><p><strong>统一的访问权限控制</strong></p></li><li><p><strong>统一的访问控制</strong></p></li><li><p><strong>突破互联网的封锁</strong></p></li><li><ul><li>突破谷歌访问封锁</li></ul></li></ul><p><img src="%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%BA%94%E7%94%A8.png" alt="img"></p><ul><li><ul><li><ul><li>也就是说，不需要客户端进行代理，我们通过谷歌代理网站（该代理服务器可以访问谷歌，而我们可以访问该公开的代理服务器），也可以突破封锁。</li></ul></li></ul></li><li><p><strong>为在私有网络下</strong>（如局域网）的服务器集群提供NAT穿透及外网发布服务</p></li><li><p><strong>上传下载减速控制</strong></p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>正向代理为客户端服务。</li><li>反向代理为服务器端服务。</li></ul><h2 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h2><h3 id="地址重写，地址转发，重定向"><a href="#地址重写，地址转发，重定向" class="headerlink" title="地址重写，地址转发，重定向"></a>地址重写，地址转发，重定向</h3><p><strong>地址重写：</strong>为了标准化网址，比如输入baidu.com和<a href="http://www.baidu.com,都会被重写到www.baidu.com,而且我们在浏览器看到的也会是/">www.baidu.com，都会被重写到www.baidu.com，而且我们在浏览器看到的也会是</a> <a href="http://www.baidu.com/">www.baidu.com</a></p><p><strong>地址转发：</strong>指在网络数据传输过程中数据分组到达路由器或桥接器后，该设备通过检查分组地址并将数据转发到最近的局域网的过程。</p><p>不同点：</p><ul><li>地址重写会改变浏览器中的地址，使之变成重写成浏览器最新的地址。而地址转发他是不会改变浏览器的地址的。</li><li>地址重写会产生两次请求，而地址转发只会有一次请求。</li><li>地址转发一般发生在同一站点项目内部，而地址重写且不受限制。</li><li>地址转发的速度比地址重定向快。</li></ul><h3 id="URL-重写"><a href="#URL-重写" class="headerlink" title="URL 重写"></a>URL 重写</h3><p>在 Nginx 中通过在 server 或 location 中配置 rewrite 指令实现</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="language-sh" data-language="sh"><code class="language-sh">rewrite regex replacement [flag];</code></pre><ul><li><strong>rewrite</strong>：该指令是实现URL重写的指令</li><li><strong>regex</strong>：用于匹配URI的正则表达式</li><li><strong>replacement</strong>：将regex正则匹配到的内容替换成 replacement。</li><li><strong>flag</strong>:标记<ul><li><strong>last:</strong> 本条规则匹配完成后，继续向下匹配新的location URI 规则。(不常用)</li><li><strong>break:</strong> 本条规则匹配完成即终止，不再匹配后面的任何规则(不常用)。</li><li><strong>redirect:</strong> 返回302临时重定向，浏览器地址会显示跳转新的URL地址。</li><li><strong>permanent:</strong> 返回301永久重定向。浏览器地址会显示跳转新的URL地址。</li></ul></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="language-sh" data-language="sh"><code class="language-sh">rewrite ^&#x2F;(.*) http:&#x2F;&#x2F;www.baidu.com&#x2F;$1 permanent;</code></pre><ul><li><strong>rewrite</strong> ：指令。</li><li><strong>regex</strong>：正则表达式，匹配完整的域名和后面的路径地址。</li><li><strong>replacement</strong>：$1是取regex部分()里面的内容。如果匹配成功后跳转到的URL。</li><li><strong>flag；</strong>permanent，代表永久重定向的含义，即跳转到 <a href="http://www.baidu.com/$1">http://www.baidu.com/$1</a> 地址上。</li></ul><table><thead><tr><th><strong>字符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>\</td><td>转义字符标记，如 <code>\n</code>匹配一个换行符，而<code>\$</code>则匹配<code>$</code></td></tr><tr><td>^</td><td>匹配输入字符串的起始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的字符零次或多次。如<code>ol*</code>能匹配<code>o</code>及<code>ol</code>、<code>oll</code></td></tr><tr><td>+</td><td>匹配前面的字符一次或多次。如<code>ol+</code>能匹配<code>ol</code>及<code>oll</code>、<code>oll</code>，但不能匹配<code>o</code></td></tr><tr><td>?</td><td>匹配前面的字符零次或一次，例如<code>do(es)?</code>能匹配<code>do</code>或者<code>does</code>，<code>?</code>等效于<code>&#123;0,1&#125;</code></td></tr><tr><td>.</td><td>匹配除“<code>\n</code>之外的任何单个字符，若要匹配包括“\n”在内的任意字符，请使用诸如<code>[.\n]</code>之类的模式。</td></tr><tr><td>(pattern)</td><td>匹配括号内pattern并可以在后面获取对应的匹配，常用<code>$0...$9</code>属性获取小括号中的匹配内容，要匹配圆括号字符需要<code>\(Content\)</code></td></tr></tbody></table><h3 id="if-指令使用"><a href="#if-指令使用" class="headerlink" title="if 指令使用"></a>if 指令使用</h3><p>语法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  // <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span></code></pre><p>Rewrite 可以使用的全局变量</p><ul><li><p><strong>$args</strong>: 该变量中存放了请求URL中的请求指令。比如 <code>http://127.0.0.1:3001?arg1=value1&amp;arg2=value2</code> 中的 <code>arg1=value1&amp;arg2=value2</code></p></li><li><p><strong>$content_length</strong>: 该变量中存放了请求头中的Content-length字段</p></li><li><p><strong>$content_type</strong>: 该变量中存放了请求头中的 Content-type字段</p></li><li><p><strong>$document_root</strong>: 该变量中存放了针对当前请求的根路径</p></li><li><p><strong>$document_uri</strong>: 该变量中存放了请求的当前URI, 但是不包括请求指令。比如 <code>http://xxx.abc.com/home/1?arg1=value1&amp; arg2=value2;</code> 中的 <code>/home/1</code></p></li><li><p><strong>$host:</strong> 变量中存放了请求的URL中的主机部分字段，比如<code>http://xxx.abc.com:8080/home</code>中的 <code>xxx.abc.com</code></p></li><li><p><strong>$httphost:</strong>  该变量与host唯一区别带有端口号：比如上面的是 <code>xxx.abc.com:8080</code></p></li><li><p><strong>$http_user_agent</strong>: 变量中存放客户端的代理信息</p></li><li><p><strong>$http_cookie</strong>, 该变量中存放客户端的cookie信息</p></li><li><p><strong>$remote_addr</strong> 该变量中存放客户端的地址</p></li><li><p><strong>$remote_port</strong> 该变量中存放了客户端与服务器建立连接的端口号</p></li><li><p><strong>$remote_user</strong> 变量中存放客户端的用户名</p></li><li><p><strong>$request_body_file</strong> 变量中存放了发给后端服务器的本地文件资源的名称</p></li><li><p><strong>$request_method</strong> 变量中存放了客户端的请求方式，比如 ‘GET’、’POST’等</p></li><li><p><strong>$request_filename</strong> 变量中存放了当前请求的资源文件的路径名</p></li><li><p><strong>$request_uri</strong> 变量中存放了当前请求的URI，并且带请求指令</p></li><li><p><strong>$querystring</strong>  和变量args一样</p></li><li><p><strong>$scheme</strong> 变量中存放了客户端请求使用的协议，比如 ‘http’, ‘https’等</p></li><li><p><strong>$server_protocol</strong> 变量中存放了客户端请求协议的版本, 比如 ‘HTTP/1.0’、‘HTTP/1.1’ 等</p></li></ul><h4 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h4><h5 id="1、变量匹配"><a href="#1、变量匹配" class="headerlink" title="1、变量匹配"></a>1、变量匹配</h5><ul><li><code>~</code>：表示匹配过程中对大小写敏感</li><li><code>~*</code>：表示匹配过程中对大小写不敏感</li><li><code>!~</code> ：如果<code>~</code>匹配失败时，那么该条件就为true</li><li><code>!~*&#39;</code>：如果 <code>~*</code> 匹配失败时，那么该条件就为true</li></ul><p>举个栗子：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$http_user_agent</span> ~ MSIE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span></code></pre><p>含义：$http_user_agent值中是否含有 MSIE 字符串，如果包含为true，否则为false</p><h5 id="2、判断请求的文件是否存在"><a href="#2、判断请求的文件是否存在" class="headerlink" title="2、判断请求的文件是否存在"></a>2、判断请求的文件是否存在</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 判断请求的文件是否存在</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 判断请求的文件是否不存在</span><span class="token punctuation">&#125;</span></code></pre><p>其他指令：</p><ul><li>-f和!-f用来判断请求文件是否存在</li><li>-d和!-d用来判断请求目录是否存在</li><li>-e和!-e用来判断是请求的文件或者目录否存在</li><li>-x和!-x用来判断请求的文件是否可执行</li></ul><h5 id="3、判断手机访问"><a href="#3、判断手机访问" class="headerlink" title="3、判断手机访问"></a>3、判断手机访问</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_user_agent</span> ~* <span class="token string">"(Android)|(iPhone)|(Mobile)|(WAP)|(UCWEB)"</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  rewrite ^/$  http://www.cnblogs.com  permanent；<span class="token punctuation">&#125;</span></code></pre><h5 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h5><p>现在我们使用if指令来对nginx加一些判断；比如说我们访问<a href="http://xxx.abc.com:8080/home%E6%97%B6%E5%80%99%EF%BC%8C%E5%A6%82%E6%9E%9C$host">http://xxx.abc.com:8080/home时候，如果$host</a> = ‘xxx.abc.com’ 的时候，就做重定向跳转，nginx配置代码如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>  listen <span class="token number">8088</span><span class="token punctuation">;</span>  server_name xxx.abc.com<span class="token punctuation">;</span>  location / <span class="token punctuation">&#123;</span>    proxy_pass http://127.0.0.1:3001<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token string">'xxx.abc.com'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> http://www.cnblogs.com redirect<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p><a href="https://www.cnblogs.com/tugenhua0707/p/10798762.html">https://www.cnblogs.com/tugenhua0707/p/10798762.html</a></p><p><strong>什么是防盗链？</strong></p><p>盗链可以理解盗图链接，也就是说把别人的图片偷过来用在自己的服务器上，那么防盗链可以理解为防止其他人把我的图片盗取过去。</p><p><strong>防盗链的实现原理：</strong></p><p>客户端向服务器端请求资源时，为了减少网络带宽，提高响应时间，服务器一般不会一次将所有资源完整地传回客户端。比如请求一个网页时，首先会传回该网页的文本内容，当客户端浏览器在解析文本的过程中发现有图片存在时，会再次向服务器发起对该图片资源的请求，服务器将存储的图片资源再发送给客户端。但是如果这个图片是链接到其他站点的服务器上去了呢，比如在我项目中，我引用了的是淘宝中的一张图片的话，那么当我们网站重新加载的时候，就会请求淘宝的服务器，那么这就很有可能造成淘宝服务器负担。因此这个就是盗链行为。因此我们要实现防盗链。</p><p><strong>实现防盗链：</strong></p><p>使用http协议中请求头部的Referer头域来判断当前访问的网页或文件的源地址。通过该头域的值，我们可以检测访问目标资源的源地址。如果目标源地址不是我们自己站内的URL的话，那么这种情况下，我们采取阻止措施，实现防盗链。但是注意的是：Referer头域中的值是可以被更改的。因此该方法也不能完全安全阻止防盗链。</p><p><strong>使用Nginx服务器的Rewrite功能实现防盗链。</strong></p><p>Nginx中有一个指令 valid_referers. 该指令可以用来获取 Referer 头域中的值，并且根据该值的情况给 Nginx全局变量 invalidreferer赋值。如果Referer头域中没有符合validreferers指令的值的话，invalidreferer赋值。如果Referer头域中没有符合validreferers指令的值的话，invalid_referer变量将会赋值为</p><p>valid_referers 指令基本语法如下：</p><pre class="language-none"><code class="language-none">valid_referers none | blocked | server_names | string</code></pre><p><strong>none:</strong> 检测Referer头域不存在的情况。</p><p><strong>blocked：</strong> 检测Referer头域的值被防火墙或者代理服务器删除或伪装的情况。那么在这种情况下，该头域的值不以”http://“ 或 “https://” 开头。</p><p><strong>server_names:</strong> 设置一个或多个URL，检测Referer头域的值是否是URL中的某个。</p><p>因此我们有了 valid_referers指令和$invalid_referer变量的话，我们就可以通过 Rewrite功能来实现防盗链。<br>下面我们介绍两种方案：</p><ol><li>根据请求资源的类型。</li><li>根据请求目录。</li></ol><h4 id="根据请求文件类型实现防盗链配置实列如下："><a href="#根据请求文件类型实现防盗链配置实列如下：" class="headerlink" title="根据请求文件类型实现防盗链配置实列如下："></a>根据请求文件类型实现防盗链配置实列如下：</h4><pre class="language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>  listen <span class="token number">8080</span><span class="token punctuation">;</span>  server_name xxx.abc.com  location ~* ^.+<span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>swf<span class="token operator">|</span>flv<span class="token operator">|</span><span class="token function">rar</span><span class="token operator">|</span><span class="token function">zip</span><span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    valid_referers none blocked www.xxx.com www.yyy.com *.baidu.com  *.tabobao.com<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalid_referer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rewrite ^/ http://www.xxx.com/images/forbidden.png<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如上基本配置，当有网络连接对以 gif、jpg、png为后缀的图片资源时候、当有以swf、flv为后缀的媒体资源时、或以 rar、zip为后缀的压缩资源发起请求时，如果检测到Referer头域中没有符合 valid_referers指令的话，那么说明不是本站的资源请求。</p><p>location ~* ^.+.(gif|jpg|png|swf|flv|rar|zip)$ 该配置的含义是 设置防盗链的文件类型。</p><p>valid_referers none blocked <a href="http://www.xxx.com/">www.xxx.com</a> <a href="http://www.yyy.com/">www.yyy.com</a> *.baidu.com *.tabobao.com; 可以理解为白名单，允许文件链出的域名白名单，如果请求的资源文件不是以这些域名开头的话，就说明请求的资源文件不是该域下的请求，因此可以判断它是盗链。因此如果不是该域下的请求，就会使用 Rewrite进行重定向到 <a href="http://www.xxx.com/images/forbidden.png">http://www.xxx.com/images/forbidden.png</a> 这个图片，比如这张图片是一个x或其他的标识，然后其他的网站就访问不了你这个图片哦。</p><h4 id="根据请求目录实现防盗链的配置实列如下"><a href="#根据请求目录实现防盗链的配置实列如下" class="headerlink" title="根据请求目录实现防盗链的配置实列如下"></a>根据请求目录实现防盗链的配置实列如下</h4><pre class="language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>  listen <span class="token number">8080</span><span class="token punctuation">;</span>  server_name xxx.abc.com  location /file/ <span class="token punctuation">&#123;</span>    root /server/file/<span class="token punctuation">;</span>    valid_referers none blocked www.xxx.com www.yyy.com *.baidu.com  *.tabobao.com<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalid_referer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rewrite ^/ http://www.xxx.com/images/forbidden.png<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>其他例子</p><pre class="language-bash" data-language="bash"><code class="language-bash">例子一（域名跳转）:    server <span class="token punctuation">&#123;</span>            listen <span class="token number">80</span><span class="token punctuation">;</span>            server_name   abc.com<span class="token punctuation">;</span>            rewrite   ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>     http://www.ab c.com/<span class="token variable">$1</span> permanent<span class="token punctuation">;</span>  <span class="token comment"># 跳转到www.abc.com网址上</span>        <span class="token punctuation">&#125;</span>例子二：  server <span class="token punctuation">&#123;</span>            listen <span class="token number">80</span><span class="token punctuation">;</span>            server_name   www.myweb.com www.web.info            if<span class="token punctuation">(</span><span class="token variable">$host</span> ~ myweb<span class="token punctuation">\</span>.info<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">#"."需要使用“\”转义，这里是匹配到www.web.info时</span>                     rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>  http://www.myweb.com/<span class="token file-descriptor important">&amp;1</span> permanent<span class="token punctuation">;</span>   <span class="token comment">#永久重定向到http://www.myweb.com网址上&amp;1是匹配的uri</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>例子三<span class="token punctuation">(</span>防盗链<span class="token punctuation">)</span>：location ~* <span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>swf<span class="token operator">|</span>flv<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    valid_referers none blocked www.vison.com www.wsvison.com<span class="token punctuation">;</span>  <span class="token comment">#这里表示Referer头域中的值是none或者blocked或者后面这些网址才会返回去正常的gif|jpg|png|swf|flv文件，否则执行下面if块代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalid_referer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">#上面没有匹配成功，$invalid_referer值为1，否则为0</span>        <span class="token builtin class-name">return</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> //防盗链<span class="token punctuation">&#125;</span>       其他例子：    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$http_user_agent</span> ~ MSIE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ /msie/<span class="token variable">$1</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> //如果UA包含<span class="token string">"MSIE"</span>，rewrite请求到/msid/目录下<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$http_cookie</span> ~* <span class="token string">"id=([^;]+)(?:;|$)"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">set</span> <span class="token variable">$id</span> <span class="token variable">$1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> //如果cookie匹配正则，设置变量<span class="token variable">$id</span>等于正则引用部分<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_method</span> <span class="token operator">=</span> POST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">return</span> <span class="token number">405</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$slow</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    limit_rate 10k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> //限速，<span class="token variable">$slow</span>可以通过 <span class="token builtin class-name">set</span> 指令设置<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>    proxy_pass  http://127.0.0.1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$args</span> ~ <span class="token assign-left variable">post</span><span class="token operator">=</span><span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rewrite ^ http://example.com/ permanent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> //如果query string中包含<span class="token string">"post=140"</span>，永久重定向到example.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop</title>
      <link href="/2023/07/10/java/SpringAOP/"/>
      <url>/2023/07/10/java/SpringAOP/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>其实, 接触了这么久的 AOP, 我感觉, AOP 给人难以理解的一个关键点是它的概念比较多, 而且坑爹的是, 这些概念经过了中文翻译后, 变得面目全非, 相同的一个术语, 在不同的翻译下, 含义总有着各种莫名其妙的差别. 鉴于此, 我在本章的开头, 着重为为大家介绍一个 Spring AOP 的各项术语的基本含义. 为了术语传达的准确性, 我在接下来的叙述中, 能使用英文术语的地方, 尽量使用英文.</p><h3 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h3><p>AOP(Aspect-Oriented Programming), 即 <strong>面向切面编程</strong>, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角.<br>在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 <strong>Aspect(切面)</strong></p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><h4 id="Aspect-切面"><a href="#Aspect-切面" class="headerlink" title="Aspect(切面)"></a>Aspect(切面)</h4><p><code>aspect</code> 由 <code>pointcut</code> 和 <code>advice</code> 组成, 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP就是负责实施切面的框架, 它将切面所定义的横切逻辑织入到切面所指定的连接点中.<br>AOP的工作重心在于如何将增强织入目标对象的连接点上, 这里包含两个工作:</p><ol><li>如何通过 pointcut 和 advice 定位到特定的 joinpoint 上</li><li>如何在 advice 中编写切面代码.</li></ol><p><strong>可以简单地认为, 使用 @Aspect 注解的类就是切面.</strong></p><h4 id="advice-增强"><a href="#advice-增强" class="headerlink" title="advice(增强)"></a>advice(增强)</h4><p>由 aspect 添加到特定的 join point(即满足 point cut 规则的 join point) 的一段代码.<br>许多 AOP框架, 包括 Spring AOP, 会将 advice 模拟为一个拦截器(interceptor), 并且在 join point 上维护多个 advice, 进行层层拦截.<br>例如 HTTP 鉴权的实现, 我们可以为每个使用 RequestMapping 标注的方法织入 advice, 当 HTTP 请求到来时, 首先进入到 advice 代码中, 在这里我们可以分析这个 HTTP 请求是否有相应的权限, 如果有, 则执行 Controller, 如果没有, 则抛出异常. 这里的 advice 就扮演着鉴权拦截器的角色了.</p><h4 id="连接点-join-point"><a href="#连接点-join-point" class="headerlink" title="连接点(join point)"></a>连接点(join point)</h4><blockquote><p>a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.</p></blockquote><p>程序运行中的一些时间点, 例如一个方法的执行, 或者是一个异常的处理.<br><code>在 Spring AOP 中, join point 总是方法的执行点, 即只有方法连接点.</code></p><h4 id="切点-point-cut"><a href="#切点-point-cut" class="headerlink" title="切点(point cut)"></a>切点(point cut)</h4><p>匹配 join point 的谓词(a predicate that matches join points).<br>Advice 是和特定的 point cut 关联的, 并且在 point cut 相匹配的 join point 中执行.<br><code>在 Spring 中, 所有的方法都可以认为是 joinpoint, 但是我们并不希望在所有的方法上都添加 Advice, 而 pointcut 的作用就是提供一组规则(使用 AspectJ pointcut expression language 来描述) 来匹配joinpoint, 给满足规则的 joinpoint 添加 Advice.</code></p><h4 id="关于join-point-和-point-cut-的区别"><a href="#关于join-point-和-point-cut-的区别" class="headerlink" title="关于join point 和 point cut 的区别"></a>关于join point 和 point cut 的区别</h4><p>在 Spring AOP 中, 所有的方法执行都是 join point. 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 因此 join point 和 point cut 本质上就是两个不同纬度上的东西.<br><code>advice 是在 join point 上执行的, 而 point cut 规定了哪些 join point 可以执行哪些 advice</code></p><h4 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h4><p>为一个类型添加额外的方法或字段. Spring AOP 允许我们为 <code>目标对象</code> 引入新的接口(和对应的实现). 例如我们可以使用 introduction 来为一个 bean 实现 IsModified 接口, 并以此来简化 caching 的实现.</p><h4 id="目标对象-Target"><a href="#目标对象-Target" class="headerlink" title="目标对象(Target)"></a>目标对象(Target)</h4><p>织入 advice 的目标对象. 目标对象也被称为 <code>advised object</code>.<br><code>因为 Spring AOP 使用运行时代理的方式来实现 aspect, 因此 adviced object 总是一个代理对象(proxied object)</code><br><code>注意, adviced object 指的不是原来的类, 而是织入 advice 后所产生的代理类.</code></p><h4 id="AOP-proxy"><a href="#AOP-proxy" class="headerlink" title="AOP proxy"></a>AOP proxy</h4><p>一个类被 AOP 织入 advice, 就会产生一个结果类, 它是融合了原类和增强逻辑的代理类.<br>在 Spring AOP 中, 一个 AOP 代理是一个 JDK 动态代理对象或 CGLIB 代理对象.</p><h4 id="织入-Weaving"><a href="#织入-Weaving" class="headerlink" title="织入(Weaving)"></a>织入(Weaving)</h4><p>将 aspect 和其他对象连接起来, 并创建 adviced object 的过程.<br>根据不同的实现技术, AOP织入有三种方式:</p><ul><li>编译器织入, 这要求有特殊的Java编译器.</li><li>类装载期织入, 这需要有特殊的类装载器.</li><li>动态代理织入, 在运行期为目标类添加增强(Advice)生成子类的方式.<br>Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期织入.</li></ul><h3 id="advice-的类型"><a href="#advice-的类型" class="headerlink" title="advice 的类型"></a>advice 的类型</h3><ul><li>before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li><li>after return advice, 在一个 join point 正常返回后执行的 advice</li><li>after throwing advice, 当一个 join point 抛出异常后执行的 advice</li><li>after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li><li>around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.</li></ul><h3 id="关于-AOP-Proxy"><a href="#关于-AOP-Proxy" class="headerlink" title="关于 AOP Proxy"></a>关于 AOP Proxy</h3><p>Spring AOP 默认使用标准的 JDK 动态代理(dynamic proxy)技术来实现 AOP 代理, 通过它, 我们可以为任意的接口实现代理.<br><code>如果需要为一个类实现代理, 那么可以使用 CGLIB 代理.</code> 当一个业务逻辑对象没有实现接口时, 那么Spring AOP 就默认使用 CGLIB 来作为 AOP 代理了. 即如果我们需要为一个方法织入 advice, 但是这个方法不是一个接口所提供的方法, 则此时 Spring AOP 会使用 CGLIB 来实现动态代理. 鉴于此, Spring AOP 建议基于接口编程, 对接口进行 AOP 而不是类.</p><h2 id="彻底理解-aspect-join-point-point-cut-advice"><a href="#彻底理解-aspect-join-point-point-cut-advice" class="headerlink" title="彻底理解 aspect, join point, point cut, advice"></a>彻底理解 aspect, join point, point cut, advice</h2><p>看完了上面的理论部分知识, 我相信还是会有不少朋友感觉到 AOP 的概念还是很模糊, 对 AOP 中的各种概念理解的还不是很透彻. 其实这很正常, 因为 AOP 中的概念是在是太多了, 我当时也是花了老大劲才梳理清楚的.<br>下面我以一个简单的例子来比喻一下 AOP 中 aspect, jointpoint, pointcut 与 advice 之间的关系.</p><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系.<br>首先我们知道, 在 Spring AOP 中 join point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, join point 就相当于 <strong>爪哇的小县城里的百姓</strong>, point cut 就相当于 <strong>老王所做的指控, 即凶手是个男性, 身高约七尺五寸</strong>, 而 advice 则是施加在符合老王所描述的嫌疑人的动作: <strong>抓过来审问</strong>.<br>为什么可以这样类比呢?</p><ul><li>join point –&gt; 爪哇的小县城里的百姓: 因为根据定义, join point 是所有可能被织入 advice 的候选的点, 在 Spring AOP中, 则可以认为所有方法执行点都是 join point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.</li><li>point cut –&gt; 男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 advice, 但是我们并不希望在所有方法上都织入 advice, 而 pointcut 的作用就是提供一组规则来匹配joinpoint, 给满足规则的 joinpoint 添加 advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据<code>凶手是个男性, 身高约七尺五寸</code>, 把符合条件的人抓起来. 在这里 <code>凶手是个男性, 身高约七尺五寸</code> 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.</li><li>advice –&gt; 抓过来审问, advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 join point 上的. 同理, 对比到我们的例子中, <code>抓过来审问</code> 这个动作就是对作用于那些满足 <code>男性, 身高约七尺五寸</code> 的<code>爪哇的小县城里的百姓</code>.</li><li>aspect: aspect 是 point cut 与 advice 的组合, 因此在这里我们就可以类比: <strong>“根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问”</strong> 这一整个动作可以被认为是一个 aspect.</li></ul><hr><p>或则我们也可以从语法的角度来简单类比一下. 我们在学英语时, 经常会接触什么 <code>定语</code>, <code>被动句</code> 之类的概念, 那么可以做一个不严谨的类比, 即 <code>joinpoint</code> 可以认为是一个 <code>宾语</code>, 而 <code>pointcut</code> 则可以类比为修饰 <code>joinpoint</code> 的定语, 那么整个 <code>aspect</code> 就可以描述为: <code>满足 pointcut 规则的 joinpoint 会被添加相应的 advice 操作.</code></p><h2 id="AspectJ-支持"><a href="#AspectJ-支持" class="headerlink" title="@AspectJ 支持"></a>@AspectJ 支持</h2><p><strong>@AspectJ</strong> 是一种使用 Java 注解来实现 AOP 的编码风格.<br>@AspectJ 风格的 AOP 是 AspectJ Project 在 AspectJ 5 中引入的, 并且 Spring 也支持@AspectJ 的 AOP 风格.</p><h3 id="使能-AspectJ-支持"><a href="#使能-AspectJ-支持" class="headerlink" title="使能 @AspectJ 支持"></a>使能 @AspectJ 支持</h3><p>@AspectJ 可以以 XML 的方式或以注解的方式来使能, 并且不论以哪种方式使能@ASpectJ, 我们都必须保证 aspectjweaver.jar 在 classpath 中.</p><h4 id="使用-Java-Configuration-方式使能-AspectJ"><a href="#使用-Java-Configuration-方式使能-AspectJ" class="headerlink" title="使用 Java Configuration 方式使能@AspectJ"></a>使用 Java Configuration 方式使能@AspectJ</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="使用-XML-方式使能-AspectJ"><a href="#使用-XML-方式使能-AspectJ" class="headerlink" title="使用 XML 方式使能@AspectJ"></a>使用 XML 方式使能@AspectJ</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre><h3 id="定义-aspect-切面"><a href="#定义-aspect-切面" class="headerlink" title="定义 aspect(切面)"></a>定义 aspect(切面)</h3><p>当使用注解 <strong>@Aspect</strong> 标注一个 Bean 后, 那么 Spring 框架会自动收集这些 Bean, 并添加到 Spring AOP 中, 例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>注意<span class="token punctuation">,</span> 仅仅使用<span class="token annotation punctuation">@Aspect</span> 注解<span class="token punctuation">,</span> 并不能将一个 <span class="token class-name">Java</span> 对象转换为 <span class="token class-name">Bean</span><span class="token punctuation">,</span> 因此我们还需要使用类似 <span class="token annotation punctuation">@Component</span> 之类的注解<span class="token punctuation">.</span>``注意<span class="token punctuation">,</span> 如果一个 类被<span class="token annotation punctuation">@Aspect</span> 标注<span class="token punctuation">,</span> 则这个类就不能是其他 aspect 的 <span class="token operator">*</span><span class="token operator">*</span>advised object<span class="token operator">*</span><span class="token operator">*</span> 了<span class="token punctuation">,</span> 因为使用 <span class="token annotation punctuation">@Aspect</span> 后<span class="token punctuation">,</span> 这个类就会被排除在 auto<span class="token operator">-</span>proxying 机制之外<span class="token punctuation">.</span></code></pre><h3 id="声明-pointcut"><a href="#声明-pointcut" class="headerlink" title="声明 pointcut"></a>声明 pointcut</h3><p>一个 pointcut 的声明由两部分组成:</p><ul><li>一个方法签名, 包括方法名和相关参数</li><li>一个 pointcut 表达式, 用来指定哪些方法执行是我们感兴趣的(即因此可以织入 advice).</li></ul><p>在@AspectJ 风格的 AOP 中, 我们使用一个方法来描述 pointcut, 即:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xys.service.UserService.*(..))"</span><span class="token punctuation">)</span> <span class="token comment">// 切点表达式</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dataAccessOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 切点前面</span></code></pre><p><code>这个方法必须无返回值.</code><br><code>这个方法本身就是 pointcut signature, pointcut 表达式使用@Pointcut 注解指定.</code><br>上面我们简单地定义了一个 pointcut, 这个 pointcut 所描述的是: 匹配所有在包 <strong>com.xys.service.UserService</strong> 下的所有方法的执行.</p><h4 id="切点标志符-designator"><a href="#切点标志符-designator" class="headerlink" title="切点标志符(designator)"></a>切点标志符(designator)</h4><p>AspectJ5 的切点表达式由标志符(designator)和操作参数组成. 如 “execution( <em>greetTo(..))” 的切点表达式, <strong>execution</strong> 就是 标志符, 而圆括号里的</em> greetTo(..) 就是操作参数</p><h5 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h5><p>匹配 join point 的执行, 例如 “execution(* hello(..))” 表示匹配所有目标类中的 hello() 方法. 这个是最基本的 pointcut 标志符.</p><h5 id="within"><a href="#within" class="headerlink" title="within"></a>within</h5><p>匹配特定包下的所有 join point, 例如 <code>within(com.xys.*)</code> 表示 com.xys 包中的所有连接点, 即包中的所有类的所有方法. 而 <code>within(com.xys.service.*Service)</code> 表示在 com.xys.service 包中所有以 Service 结尾的类的所有的连接点.</p><h5 id="this-与-target"><a href="#this-与-target" class="headerlink" title="this 与 target"></a>this 与 target</h5><p>this 的作用是匹配一个 bean, 这个 bean(Spring AOP proxy) 是一个给定类型的实例(instance of). 而 target 匹配的是一个目标对象(target object, 即需要织入 advice 的原始的类), 此对象是一个给定类型的实例(instance of).</p><h5 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h5><p>匹配 bean 名字为指定值的 bean 下的所有方法, 例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">bean</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">Service</span><span class="token punctuation">)</span> <span class="token comment">// 匹配名字后缀为 Service 的 bean 下的所有方法</span><span class="token function">bean</span><span class="token punctuation">(</span>myService<span class="token punctuation">)</span> <span class="token comment">// 匹配名字为 myService 的 bean 下的所有方法</span></code></pre><h5 id="args"><a href="#args" class="headerlink" title="args"></a>args</h5><p>匹配参数满足要求的的方法.<br>例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.xys.demo2.*)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointcut2()  &amp;&amp;  args(name)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---page: &#123;&#125;---"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NormalService: someMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NormalService: test invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"服务一切正常"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当 NormalService.test 执行时, 则 advice <code>doSomething</code> 就会执行, test 方法的参数 name 就会传递到 <code>doSomething</code> 中.</p><p>常用例子:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配只有一个参数 name 的方法</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"aspectMethod()  &amp;&amp;  args(name)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匹配第一个参数为 name 的方法</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"aspectMethod()  &amp;&amp;  args(name, ..)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匹配第二个参数为 name 的方法</span><span class="token class-name">Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"aspectMethod()  &amp;&amp;  args(*, name, ..)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h5><p>匹配由指定注解所标注的方法, 例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo1.AuthChecker)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>则匹配由注解 <code>AuthChecker</code> 所标注的方法.</p><h4 id="常见的切点表达式"><a href="#常见的切点表达式" class="headerlink" title="常见的切点表达式"></a>常见的切点表达式</h4><h5 id="匹配方法签名"><a href="#匹配方法签名" class="headerlink" title="匹配方法签名"></a>匹配方法签名</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配指定包中的所有的方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 匹配当前包中的指定类的所有方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 匹配指定包中的所有 public 方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 匹配指定包中的所有 public 方法, 并且返回值是 int 类型的方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">int</span> com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 匹配指定包中的所有 public 方法, 并且第一个参数是 String, 返回值是 int 类型的方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">int</span> com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="匹配类型签名"><a href="#匹配类型签名" class="headerlink" title="匹配类型签名"></a>匹配类型签名</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配指定包中的所有的方法, 但不包括子包</span><span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">)</span><span class="token comment">// 匹配指定包中的所有的方法, 包括子包</span><span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">)</span><span class="token comment">// 匹配当前包中的指定类中的方法</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span><span class="token comment">// 匹配一个接口的所有实现类中的实现的方法</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token operator">+</span><span class="token punctuation">)</span></code></pre><h5 id="匹配-Bean-名字"><a href="#匹配-Bean-名字" class="headerlink" title="匹配 Bean 名字"></a>匹配 Bean 名字</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配以指定名字结尾的 Bean 中的所有方法</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">Service</span><span class="token punctuation">)</span></code></pre><h5 id="切点表达式组合"><a href="#切点表达式组合" class="headerlink" title="切点表达式组合"></a>切点表达式组合</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匹配以 Service 或 ServiceImpl 结尾的 bean</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">Service</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token class-name">ServiceImpl</span><span class="token punctuation">)</span><span class="token comment">// 匹配名字以 Service 结尾, 并且在包 com.xys.service 中的 bean</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">Service</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xys<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">)</span></code></pre><h3 id="声明-advice"><a href="#声明-advice" class="headerlink" title="声明 advice"></a>声明 advice</h3><p>advice 是和一个 pointcut 表达式关联在一起的, 并且会在匹配的 join point 的方法执行的前/后/周围 运行. <code>pointcut 表达式可以是简单的一个 pointcut 名字的引用, 或者是完整的 pointcut 表达式</code>.<br>下面我们以几个简单的 advice 为例子, 来看一下一个 advice 是如何声明的.</p><h4 id="Before-advice"><a href="#Before-advice" class="headerlink" title="Before advice"></a>Before advice</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xiongyongshun * @version 1.0 * @created 16/9/9 13:13 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeAspectTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xys.service.UserService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataAccessOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"com.xys.aspect.PointcutDefine.dataAccessOperation()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBeforeAccessCheck</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****Before advise, method: "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" *****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里, <strong>@Before</strong> 引用了一个 pointcut, 即 “com.xys.aspect.PointcutDefine.dataAccessOperation()” 是一个 pointcut 的名字.<br>如果我们在 advice 在内置 pointcut, 则可以:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将 pointcut 和 advice 同时定义</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"within(com.xys.service..*)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****doAccessCheck, Before advise, method: "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" *****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="around-advice"><a href="#around-advice" class="headerlink" title="around advice"></a>around advice</h4><p>around advice 比较特别, 它可以在一个方法的之前之前和之后添加不同的操作, 并且甚至可以决定何时, 如何, 是否调用匹配到的方法.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"com.xys.aspect.PointcutDefine.dataAccessOperation()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAroundAccessCheck</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始</span>        <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 结束</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke method: "</span> <span class="token operator">+</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", elapsed time: "</span> <span class="token operator">+</span> stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>around advice 和前面的 before advice 差不多, 只是我们把注解 <strong>@Before</strong> 改为了 <strong>@Around</strong> 了.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux总结</title>
      <link href="/2023/05/10/linux/Linux%E6%80%BB%E7%BB%93/"/>
      <url>/2023/05/10/linux/Linux%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux总结"><a href="#Linux总结" class="headerlink" title="Linux总结"></a>Linux总结</h1><p>对linux知识点的一些总结。</p><h1 id="CENTOS7重装python和yum"><a href="#CENTOS7重装python和yum" class="headerlink" title="CENTOS7重装python和yum"></a>CENTOS7重装python和yum</h1><p>​        编译安装python高版本时，覆盖了系统自带的python，导致很多应用不可用。从网上找了一个修复方法，替换了里面的rpm包的下载地址。另外最后需要重启才能生效。</p><p>1、卸载现有的python，强制删除已安装程序及其关联</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> python<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rpm</span> -ev --allmatches --nodeps</code></pre><p>2、强制删除所有残余文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> python <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> -frv</code></pre><p>3、卸载现有的yum</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> yum<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rpm</span> -ev --allmatches --nodeps</code></pre><p>4、强制删除所有残余文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">whereis yum <span class="token punctuation">|</span>xargs <span class="token function">rm</span> <span class="token operator">-</span>frv</code></pre><p>5、下载版本对应的rpm包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/libxml2-python-2.9.1-6.el7.5.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-build-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-build-libs-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-libs-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-sign-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/rpm-python-4.11.3-45.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-2.7.5-89.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-devel-2.7.5-89.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-libs-2.7.5-89.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-pycurl-7.19.0-19.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-setuptools-0.9.8-7.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-urlgrabber-3.10-10.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-backports-1.0-8.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-backports-ssl_match_hostname-3.5.0.1-1.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-chardet-2.2.1-3.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-ipaddress-1.0.16-2.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-kitchen-1.1.1-5.el7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/python-virtualenv-15.1.0-4.el7_7.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-3.4.3-168.el7.centos.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-utils-1.1.31-54.el7_8.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-54.el7_8.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-plugin-protectbase-1.1.31-54.el7_8.noarch.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/yum-plugin-aliases-1.1.31-54.el7_8.noarch.rpm</code></pre><p>下载完成后安装这些包(–force强制安装)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -Uvh --force --nodeps --replacepkgs *.rpm</code></pre><p>安装完这些rpm包后，重启服务器</p><pre class="language-sh" data-language="sh"><code class="language-sh">poweroff          # 立即关机shutdown -h now   # 停止服务器并关机shutdown -h 10:00 # 10点关机shutdown -h +10   # 10分钟后关机shutdown -r now   # 重启reboot            # 重启，和 shutdown -r now 一样</code></pre><h1 id="Linux防火墙"><a href="#Linux防火墙" class="headerlink" title="Linux防火墙"></a>Linux防火墙</h1><p>主要有<strong>iptables</strong>和<strong>firewalld</strong>。</p><h2 id="一、iptables"><a href="#一、iptables" class="headerlink" title="一、iptables"></a>一、iptables</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Linux系统的防火墙：IP信息包过滤系统，它实际上由两个组件<strong>netfilter</strong>和<strong>iptables</strong>组成。<br>主要工作在<strong>网络层</strong>，针对<strong>IP数据包</strong>。体现在对包内的<strong>IP地址、端口</strong>等信息的处理上。</p><h3 id="2-netfilter和iptables"><a href="#2-netfilter和iptables" class="headerlink" title="2. netfilter和iptables"></a>2. netfilter和iptables</h3><h4 id="（1）netfilter"><a href="#（1）netfilter" class="headerlink" title="（1）netfilter"></a>（1）netfilter</h4><p>netfilter属于“内核态”（Kernel Space，又称为内核空间）的防火墙功能体系；<br>是内核的一部分，由一些数据包过滤表组成，这些表包含内核用来控制数据包过滤处理的规则集。</p><h4 id="（2）iptables"><a href="#（2）iptables" class="headerlink" title="（2）iptables"></a>（2）iptables</h4><p>iptables属于“用户态”（User Space，又称为用户空间）的防火墙管理体系；<br>是一种用来管理Linux防火墙的命令程序，它使插入、修改和删除数据包过滤表中的规则变得容易，通常位于/sbin/iptables目录下。</p><h4 id="（3）netfile-iptables"><a href="#（3）netfile-iptables" class="headerlink" title="（3）netfile/iptables"></a>（3）netfile/iptables</h4><p>netfilter/iptables下文中统一简称为iptables。<br>iptables是基于内核的防火墙，其中内置了raw、mangle、nat和 filter四个规则表。<br>表中所有规则配置后，立即生效，不需要重启服务。</p><h3 id="3-四表五链"><a href="#3-四表五链" class="headerlink" title="3. 四表五链"></a>3. 四表五链</h3><h4 id="（1）四表"><a href="#（1）四表" class="headerlink" title="（1）四表"></a>（1）四表</h4><p>规则表的作用：容纳各种规则链，即表中有链。</p><table><thead><tr><th>规则表</th><th>说明</th></tr></thead><tbody><tr><td>raw表</td><td>确定是否对该数据包进行状态跟踪。包含两个规则链，OUTPUT、PREROUTING</td></tr><tr><td>mangle表</td><td>修改数据包内容，用来做流量整形的，给数据包设置标记。包含五个规则链，INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING</td></tr><tr><td>nat表</td><td>负责网络地址转换，用来修改数据包中的源、目标IP地址或端口。包含三个规则链，OUTPUT、PREROUTING、POSTROUTING。</td></tr><tr><td>filter表</td><td>负责过滤数据包，确定是否放行该数据包（过滤）。包含三个规则链，INPUT、FORWARD、OUTPUT</td></tr></tbody></table><p>注：在iptables的四个规则表中，mangle表和raw表的应用相对较少</p><h4 id="（2）五链"><a href="#（2）五链" class="headerlink" title="（2）五链"></a>（2）五链</h4><p>规则链的作用：容纳各种防火墙规则，即链中有规则。</p><table><thead><tr><th>规则链</th><th>说明</th></tr></thead><tbody><tr><td>INPUT</td><td>处理入站数据包，匹配目标IP为本机的数据包</td></tr><tr><td>OUTPUT</td><td>处理出站数据包，一般不在此链上做配置</td></tr><tr><td>FORWARD</td><td>处理转发数据包，匹配流经本机的数据包</td></tr><tr><td>PREROUTING</td><td>在进行路由选择前处理数据包，用来修改目的地址，用来做DNAT。相当于把内网中的80端口映射到路由器外网端口上</td></tr><tr><td>POSTROUTING链</td><td>在进行路由选择后处理数据包，用来修改源地址，用来做SNAT。相当于内网通过路由器NAT转换功能实现内网主机通过一个公网IP地址上网</td></tr></tbody></table><h4 id="（3）规则表的匹配顺序"><a href="#（3）规则表的匹配顺序" class="headerlink" title="（3）规则表的匹配顺序"></a>（3）规则表的匹配顺序</h4><p>raw&gt;&gt;mangle&gt;&gt;nat&gt;&gt;filter</p><h4 id="（4）规则链之间的匹配顺序"><a href="#（4）规则链之间的匹配顺序" class="headerlink" title="（4）规则链之间的匹配顺序"></a>（4）规则链之间的匹配顺序</h4><p><img src="%E8%A7%84%E5%88%99%E9%93%BE%E5%8C%B9%E9%85%8D.png" alt="img"></p><ol><li>主机型防火墙<br>1）入站数据（来自外界的数据包，且目标地址是防火墙本机）<br>PREROUTING –&gt; INPUT –&gt; 本机的应用程序<br>2）出站数据（从防火墙本机向外部地址发送的数据包）<br>本机的应用程序 –&gt; OUTPUT –&gt; POSTROUTING</li><li>网络型防火墙<br>转发数据（需要经过防火墙转发的数据包）<br>PREROUTING –&gt; FORWARD –&gt; POSTROUTING</li><li>规则链内的匹配顺序<br>1）自上向下按顺序依次进行检查，找到相匹配的规则即停止（LOG策略例外，表示记录相关日志）<br>2）若在该链内找不到相匹配的规则，则按该链的默认策略处理（未修改的状况下，默认策略为允许）</li></ol><h3 id="4-iptables的安装"><a href="#4-iptables的安装" class="headerlink" title="4. iptables的安装"></a>4. iptables的安装</h3><p>CentOS 7默认使用firewalld防火墙，没有安装iptables，若想使用iptables防火墙。必须先关闭firewalld防火墙，再安装iptables</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙</span>systemctl stop firewalld.servicesystemctl disable firewalld.service<span class="token comment">#安装并开启iptables服务</span>yum -y <span class="token function">install</span> iptables iptables-servicessystemctl start iptables.service</code></pre><h3 id="5-iptables防火墙的配置"><a href="#5-iptables防火墙的配置" class="headerlink" title="5. iptables防火墙的配置"></a>5. iptables防火墙的配置</h3><h4 id="（1）命令行配置格式"><a href="#（1）命令行配置格式" class="headerlink" title="（1）命令行配置格式"></a>（1）命令行配置格式</h4><p><img src="iptables%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E6%A0%BC%E5%BC%8F.png" alt="img"></p><h4 id="（2）注意事项"><a href="#（2）注意事项" class="headerlink" title="（2）注意事项"></a>（2）注意事项</h4><ol><li>不指定表名时，默认指filter表</li><li>不指定链名时，默认指表内的所有链</li><li>除非设置链的默认策略，否则必须指定匹配条件</li><li>选项、链名、控制类型使用大写字母，其余均为小写</li></ol><h4 id="（3）常用的控制类型"><a href="#（3）常用的控制类型" class="headerlink" title="（3）常用的控制类型"></a>（3）常用的控制类型</h4><table><thead><tr><th>控制类型</th><th>作用</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过。DROP直接丢弃数据包，不给出任何回应信息</td></tr><tr><td>REJECT</td><td>拒绝数据包通过，会给数据发送端一个响应信息</td></tr><tr><td>SNAT</td><td>修改数据包的源地址</td></tr><tr><td>DNAT</td><td>修改数据包的目的地址</td></tr><tr><td>MASQUERADE</td><td>伪装成一个非固定公网IP地址</td></tr><tr><td>LOG</td><td>在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则。LOG只是一种辅助动作，并没有真正处理数据包</td></tr></tbody></table><h4 id="（4）常用的管理选项"><a href="#（4）常用的管理选项" class="headerlink" title="（4）常用的管理选项"></a>（4）常用的管理选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-A</td><td>在指定链的末尾追加（–append）一条新的规则</td></tr><tr><td>-I</td><td>在指定链的开头插入（–insert）一条新的规则，未指定序号时默认作为第一条规则</td></tr><tr><td>-R</td><td>修改、替换（–replace）指定链中的某一条规则，可指定规则序号或具体内容</td></tr><tr><td>-P</td><td>设置指定链的默认策略（–policy）</td></tr><tr><td>-D</td><td>删除（–delete）指定链中的某一条规则，可指定规则序号或具体内容</td></tr><tr><td>-F</td><td>清空（–flush）指定链中的所有规则，若未指定链名，则清空表中的所有链</td></tr><tr><td>-L</td><td>列出（–list）指定链中所有的规则，若未指定链名，则列出表中的所有链</td></tr><tr><td>-n</td><td>使用数字形式（–numeric）显示输出结果，如显示IP地址而不是主机名</td></tr><tr><td>-v</td><td>显示详细信息，包括每条规则的匹配包数量和匹配字节数</td></tr><tr><td>–line-numbers</td><td>查看规则时，显示规则的序号</td></tr></tbody></table><h4 id="（5）匹配条件"><a href="#（5）匹配条件" class="headerlink" title="（5）匹配条件"></a>（5）匹配条件</h4><table><thead><tr><th>匹配条件</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>指定要匹配的数据包的协议类型</td></tr><tr><td>-s</td><td>指定要匹配的数据包的源IP地址</td></tr><tr><td>-d</td><td>指定要匹配的数据包的目的IP地址</td></tr><tr><td>-i</td><td>指定数据包进入本机的网络接口</td></tr><tr><td>-o</td><td>指定数据包离开本机做使用的网络接口</td></tr><tr><td>–sport</td><td>指定源端口号</td></tr><tr><td>–dport</td><td>指定目的端口号</td></tr></tbody></table><h3 id="6-匹配类型"><a href="#6-匹配类型" class="headerlink" title="6. 匹配类型"></a>6. 匹配类型</h3><p><img src="%E5%8C%B9%E9%85%8D%E7%B1%BB%E5%9E%8B.png" alt="img"></p><h5 id="①通用匹配"><a href="#①通用匹配" class="headerlink" title="①通用匹配"></a>①通用匹配</h5><p>直接使用，不依赖于其他条件或扩展，包括网络协议、IP地址、网络接口等条件</p><pre class="language-bash" data-language="bash"><code class="language-bash">协议匹配：-p 协议名地址匹配：-s 源地址、-d 目的地址<span class="token comment">#可以是IP、网段、域名、空（任何地址）</span>接口匹配：-i 入站网卡、-o 出站网卡例：iptables -A FORWARD <span class="token operator">!</span> -p icmp -j ACCEPT iptables -A INPUT -s <span class="token number">192.168</span>.80.11 -j DROPiptables -I INPUT -i ens33 -s <span class="token number">192.168</span>.80.0/24 -j DROP</code></pre><h5 id="②隐含匹配"><a href="#②隐含匹配" class="headerlink" title="②隐含匹配"></a>②隐含匹配</h5><p>以特定的协议匹配作为前提，包括端口、TCP标记、ICMP类型等条件</p><ol><li>端口匹配</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">--sport 源端口 --dport 目的端口     <span class="token comment">#可以是个别端口、端口范围</span>--sport <span class="token number">1000</span>匹配源端口是1000的数据包--sport <span class="token number">1000</span>:3000匹配源端口是1000-3000的数据包--sport :3000匹配源端口是3000及以下的数据包--sport <span class="token number">1000</span>:匹配源端口是1000及以上的数据包注意：--sport 和 --dport 必须配合 -p <span class="token operator">&lt;</span>协议类型<span class="token operator">></span> 使用例：iptables -A INPUT -p tcp --dport <span class="token number">20</span>:21 -j ACCEPTiptables -I FORWARD -d <span class="token number">192.168</span>.80.0/24 -p tcp --dport <span class="token number">24500</span>:24600 -j DROP</code></pre><ol><li>TCP标记匹配</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">--tcp-flags TCP标记iptables -I INPUT -i ens33 -p tcp --tcp-flags SYN,RST,ACK SYN -j ACCEPT      <span class="token comment">#丢弃SYN请求包，放行其他包</span></code></pre><ol><li>ICMP类型匹配</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">--icmp-type ICMP类型<span class="token comment">#可以是字符串、数字代码、、目标不可达</span>“Echo-Request”（代码为 <span class="token number">8</span>）表示 请求“Echo-Reply”（代码为 <span class="token number">0</span>）表示 回显“Destination-Unreachable”（代码为 <span class="token number">3</span>）表示 目标不可达关于其它可用的 ICMP 协议类型，可以执行“iptables -p icmp -h”命令，查看帮助信息例：iptables -A INPUT -p icmp --icmp-type <span class="token number">8</span> -j DROP<span class="token comment">#禁止其它主机ping 本机</span>iptables -A INPUT -p icmp --icmp-type <span class="token number">0</span> -j ACCEPT<span class="token comment">#允许本机ping其它主机</span>iptables -A INPUT -p icmp --icmp-type <span class="token number">3</span> -j ACCEPT<span class="token comment">#当本机ping不通其它主机时提示目标不可达</span>iptables -A INPUT -p icmp -j REJECT                <span class="token comment">#此时其它主机需要配置关于icmp协议的控制类型为 REJECT</span></code></pre><h5 id="③显示匹配"><a href="#③显示匹配" class="headerlink" title="③显示匹配"></a>③显示匹配</h5><p>要求以“-m 扩展模块”的形式明确指出类型，包括多端口、MAC地址、IP范围、数据包状态等条件</p><ol><li>多端口匹配</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">-m multiport --sports 源端口列表-m multiport --dports 目的端口列表例：iptables -A INPUT -p tcp -m multiport --dport <span class="token number">80,22</span>,21,20,53 -j ACCEPTiptables -A INPUT -p udp -m multiport --dport <span class="token number">53</span> -j ACCEPT</code></pre><ol><li>IP范围匹配</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">-m iprange --src-range IP范围iptables -A FORWARD -p udp -m iprange --src-range 192.168.80.100-192.168.80.200 -j DROP</code></pre><ol><li>状态匹配</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">-m state --state 连接状态常见的连接状态：NEW ：与任何连接无关的，还没开始连接ESTABLISHED ：响应请求或者已建立连接的，连接态RELATED ：与已有连接有相关性的（如FTP 主被动模式的数据连接），衍生态，一般与ESTABLISHED 配合使用INVALID ：不能被识别属于哪个连接或没有任何状态iptables -A FORWARD -m state --state NEW -p tcp ! --syn -j DROP    #禁止转发与正常 TCP 连接无关的非--syn 请求数据包（如伪造的网络攻击数据包）</code></pre><h3 id="7-SNAT原理与应用"><a href="#7-SNAT原理与应用" class="headerlink" title="7. SNAT原理与应用"></a>7. SNAT原理与应用</h3><h4 id="（1）应用环境"><a href="#（1）应用环境" class="headerlink" title="（1）应用环境"></a>（1）应用环境</h4><p>局域网主机共享单个公网IP地址接入Internet（私有IP不能在Internet中正常路由）。<br>一个IP地址做SNAT转换，一般可以让内网 100到200 台主机实现上网。</p><h4 id="（2）原理"><a href="#（2）原理" class="headerlink" title="（2）原理"></a>（2）原理</h4><p>修改数据包的源地址</p><h4 id="（3）SNAT转换前提条件"><a href="#（3）SNAT转换前提条件" class="headerlink" title="（3）SNAT转换前提条件"></a>（3）SNAT转换前提条件</h4><p>局域网各主机已正确设置IP地址、子网掩码、默认网关地址<br>Linux网关开启IP路由转发</p><h4 id="（4）路由转发开启方式"><a href="#（4）路由转发开启方式" class="headerlink" title="（4）路由转发开启方式"></a>（4）路由转发开启方式</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.临时打开：<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward或sysctl -w net.ipv4.ip_forward<span class="token operator">=</span><span class="token number">1</span><span class="token number">2</span>.永久打开：<span class="token function">vim</span> /etc/sysctl.confnet.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#将此行写入配置文件</span><span class="token number">3</span>.sysctl -p         <span class="token comment">#读取修改后的配置</span></code></pre><h4 id="（5）SNAT转换具体格式"><a href="#（5）SNAT转换具体格式" class="headerlink" title="（5）SNAT转换具体格式"></a>（5）SNAT转换具体格式</h4><ol><li>固定的公网IP地址：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s <span class="token number">192.168</span>.80.0/24<span class="token punctuation">(</span>内网IP<span class="token punctuation">)</span> -o<span class="token punctuation">(</span>出站<span class="token punctuation">)</span> ens33<span class="token punctuation">(</span>外网网卡<span class="token punctuation">)</span> -j SNAT --to <span class="token number">12.0</span>.0.1<span class="token punctuation">(</span>外网IP或地址池<span class="token punctuation">)</span>或iptables -t nat -A POSTROUTING -s <span class="token number">192.168</span>.80.0/24<span class="token punctuation">(</span>内网IP<span class="token punctuation">)</span> -o<span class="token punctuation">(</span>出站<span class="token punctuation">)</span> ens33<span class="token punctuation">(</span>外网网卡<span class="token punctuation">)</span> -j SNAT --to-source <span class="token number">12.0</span>.0.1-12.0.0.10<span class="token punctuation">(</span>外网IP或地址池<span class="token punctuation">)</span></code></pre><ol><li>非固定的公网IP地址（共享动态IP地址）：</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">iptables -t nat -A POSTROUTING -s 192.168.80.0&#x2F;24 -o ens33 -j MASQUERADE</code></pre><h3 id="8-DNAT原理与应用"><a href="#8-DNAT原理与应用" class="headerlink" title="8. DNAT原理与应用"></a>8. DNAT原理与应用</h3><h4 id="（1）应用环境-1"><a href="#（1）应用环境-1" class="headerlink" title="（1）应用环境"></a>（1）应用环境</h4><p>在Internet中发布位于局域网内的服务器。<br>主机型防火墙：主要使用INPUT、OUTPUT链，设置规则时一般要详细的指定到端口。<br>网络型防火墙：主要使用FORWARD链，设置规则时很少去指定到端口，一般指定到IP地址或者到网段即可。</p><h4 id="（2）原理-1"><a href="#（2）原理-1" class="headerlink" title="（2）原理"></a>（2）原理</h4><p>修改数据包的目的地址</p><h4 id="（3）DNAT转换前提条件"><a href="#（3）DNAT转换前提条件" class="headerlink" title="（3）DNAT转换前提条件"></a>（3）DNAT转换前提条件</h4><p>局域网的服务器能够访问Internet<br>网关的外网地址有正确的DNS解析记录<br>Linux网关开启IP路由转发</p><h4 id="（4）DNAT转换"><a href="#（4）DNAT转换" class="headerlink" title="（4）DNAT转换"></a>（4）DNAT转换</h4><p>使用DNAT时，同时配合SNAT使用，才能实现响应数据包的正确返回</p><ol><li>发布内网的Web服务</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">#把从ens33进来的要访问web服务的数据包目的地址转换为 192.168.80.11iptables -t nat -A PREROUTING -i(入站) ens33(外网网卡) -d 12.0.0.1(外网IP) -p tcp --dport 80 -j DNAT --to 192.168.80.11(内网服务器Ip)或iptables -t nat -A PREROUTING -i(入站) ens33(外网网卡) -d 12.0.0.1(外网IP) -p tcp --dport 80 -j DNAT --to-destination 192.168.80.11(内网服务器IP)iptables -t nat -A PREROUTING -i ens33 -p tcp --dport 80 -j DNAT --to 192.168.80.11-192.168.80.20(地址池)</code></pre><ol><li>发布时修改目标端口</li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">#发布局域网内部的OpenSSH服务器，外网主机需使用250端口进行连接iptables -t nat -A PREROUTING -i ens33 -d 12.0.0.1 -p tcp --dport 250 -j DNAT --to 192.168.80.11:22ssh -p 250 root@12.0.0.1        #在外网环境中使用SSH测试yum -y install net-tools #若没有 ifconfig 命令可提前使用 yum 进行安装ifconfig ens33</code></pre><h3 id="9-防火墙规则的备份和还原"><a href="#9-防火墙规则的备份和还原" class="headerlink" title="9. 防火墙规则的备份和还原"></a>9. 防火墙规则的备份和还原</h3><h4 id="（1）导出（备份）所有表的规则"><a href="#（1）导出（备份）所有表的规则" class="headerlink" title="（1）导出（备份）所有表的规则"></a>（1）导出（备份）所有表的规则</h4><pre class="language-sh" data-language="sh"><code class="language-sh">iptables-save &gt; &#x2F;opt&#x2F;ipt.txt</code></pre><h4 id="（2）导入（还原）规则"><a href="#（2）导入（还原）规则" class="headerlink" title="（2）导入（还原）规则"></a>（2）导入（还原）规则</h4><pre class="language-bash" data-language="bash"><code class="language-bash">iptables-restore <span class="token operator">&lt;</span> /opt/ipt.txt将iptables规则文件保存在 /etc/sysconfig/iptables 中，iptables服务启动时会自动还原规则iptables-save <span class="token operator">></span> /etc/sysconfig/iptablessystemctl stop iptables    <span class="token comment">#停止iptables服务会清空掉所有表的规则</span>systemctl start iptables<span class="token comment">#启动iptables服务会自动还原/etc/sysconfig/iptables 中的规则</span></code></pre><h2 id="二、firewalld"><a href="#二、firewalld" class="headerlink" title="二、firewalld"></a>二、firewalld</h2><h3 id="1-firewalld防火墙简介"><a href="#1-firewalld防火墙简介" class="headerlink" title="1. firewalld防火墙简介"></a>1. firewalld防火墙简介</h3><p>firewalld防火墙是Centos7系统默认的防火墙管理工具，取代了之前的iptables防火墙，也是工作在网络层，属于包过滤防火墙<br>firewalld和iptables都是用来管理防火墙的工具(属于用户态)来定义防火墙的各种规则功能，内部结构都指向netfilter网络过滤子系统(属于内核态)来实现包过滤防火墙功能<br>firewalld提供了支持网络区域所定义的网络连接以及接口安全等级的动态防火墙管理工具<br>它支持IPv4、IPv6防火墙设置以及以太网桥(在某些高级服务可能会用到，比如云计算)，并且拥有两种配置模式:运行时配置与永久配置</p><h3 id="2-firewalld与iptables的区别"><a href="#2-firewalld与iptables的区别" class="headerlink" title="2. firewalld与iptables的区别"></a>2. firewalld与iptables的区别</h3><table><thead><tr><th>区别项</th><th>firewalld</th><th>iptables</th></tr></thead><tbody><tr><td>配置文件</td><td>/usr/lib/firewalld /etc/firewalld</td><td>/etc/sysconfig/iptables</td></tr><tr><td>对规则的修改</td><td>不需要全部刷新策略，不丢失现行连接</td><td>需要全部刷新策略，丢失连接</td></tr><tr><td>防火墙类型</td><td>动态防火墙</td><td>静态防火墙</td></tr></tbody></table><ol><li>iptables主要是基于接口，来设置规则，从而判断网络的安全性；firewalld是基于区域，根据不同的区域来设置不同的规则，从而保证网络的安全。与硬件防火墙的设置相类似</li><li>iptables在/etc/ sysconfig/iptables中储存配置；firewalld将配置储存在/etc/firewalld/(优先加载)和/usr/lib/ firewalld/ (默认的配置文件)中的各种XML文件里</li><li>使用iptables每一个单独更改意味着清除所有旧有的规则和从/etc/sysconfig/iptables里读取所有新的规则；使用firewalld却不会再创建任何新的规则，仅仅运行规则中的不同之处。因此firewalld可以在运行时间内，改变设置而不丢失现行连接</li><li>iptables防火墙类型为静态防火墙；firewalld防火墙类型为动态防火墙</li></ol><h3 id="3-firewalld区域的概念"><a href="#3-firewalld区域的概念" class="headerlink" title="3. firewalld区域的概念"></a>3. firewalld区域的概念</h3><p>firewalld防火墙为了简化管理，将所有网络流量分为多个区（zone），然后根据数据包的源IP地址或传入的网络接口等条件将流量传入相应区域。每个区域都定义了自己打开或者关闭的端口和服务列表</p><h4 id="（1）firewalld防火墙9个区域"><a href="#（1）firewalld防火墙9个区域" class="headerlink" title="（1）firewalld防火墙9个区域"></a>（1）firewalld防火墙9个区域</h4><table><thead><tr><th>区域</th><th>说明</th></tr></thead><tbody><tr><td>trusted（信任区域）</td><td>允许所有的传入流量</td></tr><tr><td>public（公共区域）</td><td>允许与ssh或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝。是新添加网络接口的默认区域</td></tr><tr><td>external（外部区域）</td><td>允许与 ssh 预定义服务匹配的传入流量，其余均拒绝。 默认将通过此区域转发的IPv4传出流量将进行地址伪装，可用于为 路由器启用了伪装功能的外部网络</td></tr><tr><td>home（家庭区域）</td><td>允许与ssh、ipp-client、mdns、samba-client或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝</td></tr><tr><td>internal（内部区域）</td><td>默认值时与home区域相同</td></tr><tr><td>work（工作区域）</td><td>允许与 ssh、ipp-client、dhcpv6-client 预定义服务匹配的传入流量，其余均拒绝</td></tr><tr><td>dmz（隔离区域也称为非军事区域）</td><td>允许与 ssh 预定义服务匹配的传入流量，其余均拒绝</td></tr><tr><td>block（限制区域）</td><td>拒绝所有传入流量</td></tr><tr><td>drop（丢弃区域）</td><td>丢弃所有传入流量，并且不产生包含ICMP的错误响应</td></tr></tbody></table><h4 id="（2）区域介绍"><a href="#（2）区域介绍" class="headerlink" title="（2）区域介绍"></a>（2）区域介绍</h4><ol><li>最终一个区域的安全程度是取决于管理员在此区域中设置的规则</li><li>区域如同进入主机的安全门，每个区域都具有不同限制程度的规则，只会允许符合规则的流量传入</li><li>可以根据网络规模，使用一个或多个区域，但是任何一个 活跃区域 至少需要关联 源地址或接口</li><li>默认情况下，public区域是默认区域，包含所有接口（网卡）</li></ol><h3 id="4-firewalld数据处理流程"><a href="#4-firewalld数据处理流程" class="headerlink" title="4. firewalld数据处理流程"></a>4. firewalld数据处理流程</h3><p>firewalld对于进入系统的数据包，会根据数据包的源IP地址或传入的网络接口等条件，将数据流量转入相应区域的防火墙规则。对于进入系统的数据包，首先检查的就是其源地址</p><h3 id="5-firewalld检查数据包的源地址规则"><a href="#5-firewalld检查数据包的源地址规则" class="headerlink" title="5. firewalld检查数据包的源地址规则"></a>5. firewalld检查数据包的源地址规则</h3><ol><li>若源地址关联到特定的区域（即源地址或接口绑定的区域有冲突），则执行该区域所制定的规则</li><li>若源地址未关联到特定的区域（即源地址或接口绑定的区域没有冲突），则使用传入网络接口的区域并执行该区域所制定的规则</li><li>若网络接口也未关联到特定的区域（即源地址或接口都没有绑定特定的某个区域），则使用默认区域并执行该区域所制定的规则</li></ol><h3 id="6-firewalld防火墙的配置方法"><a href="#6-firewalld防火墙的配置方法" class="headerlink" title="6. firewalld防火墙的配置方法"></a>6. firewalld防火墙的配置方法</h3><h4 id="（1）使用firewall-cmd命令行工具"><a href="#（1）使用firewall-cmd命令行工具" class="headerlink" title="（1）使用firewall-cmd命令行工具"></a>（1）使用firewall-cmd命令行工具</h4><table><thead><tr><th>常用的firewall-cmd命令选项</th><th>说明</th></tr></thead><tbody><tr><td>–get-default-zone</td><td>显示当前默认区域</td></tr><tr><td>–set-default-zone=</td><td>设置默认区域</td></tr><tr><td>–get-active-zones</td><td>显示当前正在使用的区域及其对应的网卡接口</td></tr><tr><td>–get-zones</td><td>显示所有可用的区域</td></tr><tr><td>–get-zone-of-interface=</td><td>显示指定接口绑定的区域</td></tr><tr><td>–zone= –add-interface=</td><td>为指定接口绑定区域</td></tr><tr><td>–zone= –change-interface=</td><td>为指定的区域更改绑定的网络接口</td></tr><tr><td>–zone= –remove-interface=</td><td>为指定的区域删除绑定的网络接口</td></tr><tr><td>–get-zone-of-source=[/]</td><td>显示指定源地址绑定的区域</td></tr><tr><td>–zone= –add-source=[/]</td><td>为指定源地址绑定区域</td></tr><tr><td>–zone= –change-source=[/]</td><td>为指定的区域更改绑定的源地址</td></tr><tr><td>–zone= –remove-source=[/]</td><td>为指定的区域删除绑定的源地址</td></tr><tr><td>–list-all-zones</td><td>显示所有区域及其规则</td></tr><tr><td>[–zone=] –list-all</td><td>显示所有指定区域的所有规则，省略–zone=时表示仅对默认区域操作</td></tr><tr><td>[–zone=] –list-services</td><td>显示指定区域内允许访问的所有服务</td></tr><tr><td>[–zone=] –add-service=</td><td>为指定区域设置允许访问的某项服务</td></tr><tr><td>[–zone=] –remove-service=</td><td>删除指定区域已设置的允许访问的某项服务</td></tr><tr><td>[–zone=] –list-ports</td><td>显示指定区域内允许访问的所有端口号</td></tr><tr><td>[–zone=] –add-port=[-]/</td><td>为指定区域设置允许访问的某个/某段端口号（包括协议名）</td></tr><tr><td>[–zone=] –remove-port=[-]/</td><td>删除指定区域已设置的允许访问的端口号（包括协议名）</td></tr><tr><td>[–zone=] –list-icmp-blocks</td><td>显示指定区域内拒绝访问的所有 ICMP 类型</td></tr><tr><td>[–zone=] –add-icmp-block=</td><td>为指定区域设置拒绝访问的某项 ICMP 类型</td></tr><tr><td>[–zone=] –remove-icmp-block=</td><td>删除指定区域已设置的拒绝访问的某项ICMP类型</td></tr><tr><td>firewall-cmd –get-icmptypes</td><td>显示所有 ICMP 类型</td></tr></tbody></table><h4 id="（2）使用firewall-config图形工具"><a href="#（2）使用firewall-config图形工具" class="headerlink" title="（2）使用firewall-config图形工具"></a>（2）使用firewall-config图形工具</h4><p><img src="firewall-config.png" alt="img"><br><img src="firewall-config%E5%9B%BE%E5%BD%A2.png" alt="img"></p><h4 id="（3）编写-etc-firewalld-中的配置文件"><a href="#（3）编写-etc-firewalld-中的配置文件" class="headerlink" title="（3）编写/etc/firewalld/中的配置文件"></a>（3）编写/etc/firewalld/中的配置文件</h4><p><img src="firewall%E9%85%8D%E7%BD%AE.png" alt="img"></p><h3 id="7-区域管理"><a href="#7-区域管理" class="headerlink" title="7. 区域管理"></a>7. 区域管理</h3><ol><li>显示当前系统中的默认区域<br>firewall-cmd –get-default-zone</li><li>显示默认区域的所有规则<br>firewall-cmd –list-all</li><li>显示当前正在使用的区域及其对应的网卡接口<br>firewall-cmd –get-active-zones</li><li>设置默认区域<br>firewall-cmd –set-default-zone=home<br>firewall-cmd –get-default-zone</li></ol><h3 id="8-服务管理"><a href="#8-服务管理" class="headerlink" title="8. 服务管理"></a>8. 服务管理</h3><ol><li>查看默认区域内允许访问的所有服务<br>firewall-cmd –list-service</li><li>添加httpd 服务到public 区域<br>firewall-cmd –add-service=http –zone=public</li><li>查看public 区域已配置规则<br>firewall-cmd –list-all –zone=public</li><li>删除public 区域的httpd 服务<br>firewall-cmd –remove-service=http –zone=public</li><li>同时添加httpd、https 服务到默认区域，设置成永久生效<br>firewall-cmd –add-service=http –add-service=https –permanent<br>firewall-cmd –reload<br>firewall-cmd –list-all</li><li>添加使用 –permanent选项表示设置成永久生效，需要重新启动firewalld服务或执行firewall-cmd –reload命令，重新加载防火墙规则时才会生效。若不带有此选项，表示用于设置运行时规则，但是这些规则在系统或firewalld服务重启、停止时配置将失效。</li><li>–runtime-to-permanent：将当前的运行时配置写入规则配置文件中，使之成为永久性配置</li></ol><h3 id="9-端口管理"><a href="#9-端口管理" class="headerlink" title="9. 端口管理"></a>9. 端口管理</h3><ol><li>允许TCP的443端口到internal区域<br>firewall-cmd –zone=internal –add-port=443/tcp<br>firewall-cmd –list-all –zone=internal</li><li>从internal 区域将TCP的443端口移除<br>firewall-cmd –zone=internal –remove-port=443/tcp</li><li>允许UDP的2048~2050端口到默认区域<br>firewall-cmd –add-port=2048-2050/udp<br>firewall-cmd –list-all</li></ol><h2 id="三、linux系统抓包"><a href="#三、linux系统抓包" class="headerlink" title="三、linux系统抓包"></a>三、linux系统抓包</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="1. 格式"></a>1. 格式</h3><pre class="language-sh" data-language="sh"><code class="language-sh">例：tcpdump tcp -i ens33 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0&#x2F;24 -w .&#x2F;target.cap</code></pre><h3 id="2-选项"><a href="#2-选项" class="headerlink" title="2. 选项"></a>2. 选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>tcp</td><td>ip icmp arp rarp和tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据包的类型</td></tr><tr><td>-i ens33</td><td>只抓经过接口ens33的包</td></tr><tr><td>-t</td><td>不显示时间戳</td></tr><tr><td>-s 0</td><td>抓取数据包时默认抓取长度为68字节。加上-s 0后可以抓取完整的数据包</td></tr><tr><td>-c 100</td><td>只抓取100个数据包</td></tr><tr><td>dst port ！22</td><td>不抓取目标端口是22的数据包</td></tr><tr><td>src net 192.168.1.0/24</td><td>数据包的源网络地址为192.168.1.0/24</td></tr><tr><td>-w ./target.cap</td><td>保存成cap文件，方便用ethereal（wireshark）分析</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFS服务器</title>
      <link href="/2023/04/10/linux/nfs/"/>
      <url>/2023/04/10/linux/nfs/</url>
      
        <content type="html"><![CDATA[<h1 id="NFS服务器"><a href="#NFS服务器" class="headerlink" title="NFS服务器"></a>NFS服务器</h1><h2 id="NFS介绍"><a href="#NFS介绍" class="headerlink" title="NFS介绍"></a>NFS介绍</h2><p>​    NFS 就是 Network FileSystem 的缩写，最早之前是由 Sun 这家公司所发展出来的。 它最大的功能就是可以透过网络，让不同的机器、不同的操作系统、可以彼此分享个别的档案 (share files)。所以，你也可以简单的将他看做是一个文件服务器 (file server) 呢！这个 NFS 服务器可以让你的 PC 来将网络远程的 NFS 服务器分享的目录，挂载到本地端的机器当中， 在本地端的机器看起来，那个远程主机的目录就好像是自己的一个磁盘分区槽一样 (partition)！使用上面相当的便利！</p><p>​    当我们的 NFS 服务器设定好了分享出来的 /home/sharefile 这个目录后，其他的 NFS 客户端就可以将这个目录挂载到自己系统上面的某个挂载点 (挂载点可以自定义)，例如 NFS client 1 与 NFS client 2 挂载的目录就不相同。我只要在 NFS client 1 系统中进入 /home/data/sharefile 内，就可以看到 NFS 服务器系统内的 /home/sharefile 目录下的所有数据了 (当然，权限要足够！这个 /home/data/sharefile 就好像 NFS client 1 自己机器里面的一个 partition 喔！只要权限对了，那么你可以使用 cp, cd, mv, rm… 等等磁盘或档案相关的指令！</p><p>​    NFS 只提供了基本的文件处理功能，而不提供任何 TCP/IP 数据传输功能。它需要借助 RPC 协议才能实现 TCP/IP 数据传输功能</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>​    RPC（Remote Procedure Call，远程过程调用）是一种网络程序的编程方法，它定义了一种进程间通过网络进行交互通信的机制。</p><p>​    正常情况下，如果客户端要和服务器相互通信，那么客户端和服务器就必须利用系统的套接口函数，编写出一套完整的网络通信协议才能实现。而如果使用了 RPC，那么服务器和客户端之间只需要相互调用对方提供的 RPC 接口函数（俗称客户桩）即可实现相互通信。函数的参数和返回值就是要传递的信息。而 RPC 将全权负责网络通信。这样一来，网络程序的设计就变得简单许多，跟编写本地程序一样简单，通信效率也会有所提高。当调用 RPC 的服务器程序启动时，相关的进程就会向 RPC 发起注册。RPC 就会开启特定的端口来为客户端提供服务。</p><p>​    由于端口号可能是不固定的，因此 RPC 服务器必须提供一种查询服务端口的方法。RPC 服务器上有一个叫端口映射器的东西，它固定监听 UDP 111 端口。RPC 客户端通过访问这个端口就可以查询到对应服务所使用的端口。</p><p>​    使用 RPC 协议的网络程序在服务器和客户端上都必须借助 RPC 服务才可相互通信。</p><h2 id="安装nfs"><a href="#安装nfs" class="headerlink" title="安装nfs"></a>安装nfs</h2><h3 id="查看是否安装过nfs"><a href="#查看是否安装过nfs" class="headerlink" title="查看是否安装过nfs"></a>查看是否安装过nfs</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> nfs <span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> rpcbind </code></pre><h3 id="安装nfs-1"><a href="#安装nfs-1" class="headerlink" title="安装nfs"></a>安装nfs</h3><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> nfs-utils</code></pre><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/exports/tmp <span class="token number">192.168</span>.100.0/24<span class="token punctuation">(</span>ro<span class="token punctuation">)</span> localhost<span class="token punctuation">(</span>rw<span class="token punctuation">)</span> *.ev.ncku.edu.tw<span class="token punctuation">(</span>ro,sync<span class="token punctuation">)</span></code></pre><ul><li>我想将 /tmp 分享出去给大家使用，由于这个目录本来就是大家都可以读写的，因此想让所有的人都可以存取。此外，我要让 root 写入的档案还是具有 root 的权限，那如何设计配置文件</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">/tmp  *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span></code></pre><ul><li></li></ul><p>配置说明</p><table><thead><tr><th>参数值</th><th>内容说明</th></tr></thead><tbody><tr><td>rw ro</td><td>该目录分享的权限是可擦写 (read-write) 或只读 (read-only)，但最终能不能读写，还是与文件系统的 rwx 及身份有关。</td></tr><tr><td>sync async</td><td>sync 代表数据会同步写入到内存与硬盘中，async 则代表数据会先暂存于内存当中，而非直接写入硬盘！</td></tr><tr><td>no_root_squash root_squash</td><td>客户端使用 NFS 文件系统的账号若为 root 时，系统该如何判断这个账号的身份?<br/>预设的情况下，客户端 root 的身份会由 root_squash 的设定压缩成 nfsnobody， 如此对服务器的系统会较有保障。但如果你想要开放客户端使用 root 身份来操作服务器的文件系统，那么这里就得要开 no_root_squash 才行！</td></tr><tr><td>all_squash</td><td>不论登入 NFS 的使用者身份为何， 他的身份都会被压缩成为匿名用户，通常也就是 nobody(nfsnobody) 啦！</td></tr><tr><td>anonuid anongid</td><td>anon 意指 anonymous (匿名者) 前面关于 *_squash 提到的匿名用户的 UID 设定值，通常为 nobody(nfsnobody)，但是你可以自行设定这个 UID 的值！当然，这个 UID 必需要存在于你的 /etc/passwd 当中！ anonuid 指的是 UID 而 anongid 则是群组的 GID 啰。</td></tr></tbody></table><h3 id="启动nfs"><a href="#启动nfs" class="headerlink" title="启动nfs"></a>启动nfs</h3><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/init.d/rpcbind start/etc/init.d/nfs start<span class="token comment"># 重启</span>systemctl reload nfs</code></pre><h3 id="查看nfs启动状态"><a href="#查看nfs启动状态" class="headerlink" title="查看nfs启动状态"></a>查看nfs启动状态</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -tulnp<span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'(rpc|nfs)'</span>showmount <span class="token punctuation">[</span>-ae<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostname<span class="token operator">|</span>IP<span class="token punctuation">]</span>选项与参数：-a ：显示目前主机与客户端的 NFS 联机分享的状态；-e ：显示某部主机的 /etc/exports 所分享的目录数据。</code></pre><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>命令用法</p><pre class="language-python" data-language="python"><code class="language-python">mount<span class="token punctuation">.</span>nfs <span class="token operator">&lt;</span>服务器 IP 或主机名<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>共享路径<span class="token operator">></span> <span class="token operator">&lt;</span>挂载点<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">-</span>o <span class="token operator">&lt;</span>选项<span class="token operator">></span><span class="token punctuation">]</span>或者mount <span class="token operator">-</span>t nfs NFS_SERVER<span class="token punctuation">:</span><span class="token operator">/</span>PATH<span class="token operator">/</span>TO<span class="token operator">/</span>SOME_EXPORT <span class="token operator">/</span>PATH<span class="token operator">/</span>TO<span class="token operator">/</span>SOMEWHRERE</code></pre><h3 id="取消挂载"><a href="#取消挂载" class="headerlink" title="取消挂载"></a>取消挂载</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> /home/nfs/public</code></pre><h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><h4 id="Failed-to-start-nfs-service-Unit-nfs-service-not-found"><a href="#Failed-to-start-nfs-service-Unit-nfs-service-not-found" class="headerlink" title="Failed to start nfs.service: Unit nfs.service not found"></a>Failed to start nfs.service: Unit nfs.service not found</h4><p>ubuntu 10.0开启配置nfs 服务service nfs start时出现:</p><blockquote><p>Failed to start nfs.service: Unit nfs.service not found.</p></blockquote><p>原因是ubuntu 10.0以上的版本取消了<code>service nfs start</code>。改成了<code>sudo service nfs-server start</code> 。这样就完成启动了</p><h4 id="System-Error-No-route-to-host"><a href="#System-Error-No-route-to-host" class="headerlink" title="System Error: No route to host."></a>System Error: No route to host.</h4><p>​    由于nfs服务需要开启 <code>mountd,nfs,nlockmgr,portmapper,rquotad</code>这5个服务，需要将这5个服务的端口加到iptables里面<br>而nfs 和 portmapper两个服务是固定端口的，nfs为2049，portmapper为111。其他的3个服务是用的随机端口，那就需要<br>先把这3个服务的端口设置成固定的。</p><p>查看当前这5个服务的端口并记录下来</p><pre class="language-bash" data-language="bash"><code class="language-bash">rpcinfo -p</code></pre><p>​    固定<code>nlockmgr,portmapper,rquotad</code>三个的端口    </p><pre class="language-bash" data-language="bash"><code class="language-bash">mountd  <span class="token number">976</span>/tcpmountd  <span class="token number">976</span>/udprquotad  <span class="token number">966</span>/tcprquotad  <span class="token number">966</span>/udpnlockmgr <span class="token number">33993</span>/tcpnlockmgr <span class="token number">33993</span>/udp</code></pre><p>​    重启nfs</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nfs restart</code></pre><p>防火墙中开放这5个端口</p><p>   编辑iptables配置文件 </p> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/iptables</code></pre><p>   添加如下行：</p><pre class="language-bash" data-language="bash"><code class="language-bash">-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p tcp --dport <span class="token number">111</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p tcp --dport <span class="token number">976</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p tcp --dport <span class="token number">2049</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p tcp --dport <span class="token number">966</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p tcp --dport <span class="token number">33993</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p udp --dport <span class="token number">111</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p udp --dport <span class="token number">976</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p udp --dport <span class="token number">2049</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p udp --dport <span class="token number">966</span> -j ACCEPT-A RH-Firewall-1-INPUT -s <span class="token number">192.168</span>.0.0/24 -m state --state NEW -p udp --dport <span class="token number">33993</span> -j ACCEPT</code></pre><p>保存退出并重启iptables</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables restart</code></pre><h3 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看防火墙状态</span><span class="token function">service</span> iptables statussystemctl status firewalld.service<span class="token comment"># 停止防火墙</span><span class="token function">service</span> iptables stopsystemctl stop firewalld.service<span class="token comment"># 启动防火墙</span><span class="token function">service</span> iptables startsystemctl start firewalld.service<span class="token comment"># 重启防火墙</span><span class="token function">service</span> iptables restart systemctl restart firewalld.service<span class="token comment"># 永久关闭防火墙</span><span class="token function">chkconfig</span> iptables off  <span class="token comment"># 永久关闭后重启</span><span class="token function">chkconfig</span> iptables on　<span class="token comment"># 禁用防火墙</span>systemctl disable firewalld.service</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql安装</title>
      <link href="/2023/03/10/database/mysql%E5%AE%89%E8%A3%85/"/>
      <url>/2023/03/10/database/mysql%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载MySQL"><a href="#1-下载MySQL" class="headerlink" title="1. 下载MySQL"></a>1. 下载MySQL</h2><p><a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></p><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>如果是centos版本，则MySQL选择Red Hat版本</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-卸载mariadb"><a href="#2-1-卸载mariadb" class="headerlink" title="2.1 卸载mariadb"></a>2.1 卸载mariadb</h3><p>linux系统会自动携带一个数据库mariadb，需要把它给卸载掉</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 查看是否有mariadbrpm -qa | grep mariadb# 若有，则卸载yum remove mariadb-libs-5.5.52-1.el7.x86_64 -y# 查看是否卸载成功rpm -qa | grep mariadb</code></pre><h3 id="2-2-安装MySQL"><a href="#2-2-安装MySQL" class="headerlink" title="2.2 安装MySQL"></a>2.2 安装MySQL</h3><p>上传MySQL捆绑包到服务器上</p><p>解压MySQL安装包</p><pre class="language-sh" data-language="sh"><code class="language-sh">mkdir mysql-8.0.33tar -xvf mysql-community-server-8.0.33-1.el8.x86_64.rpm -C mysql-8.0.33</code></pre><p>按顺序安装rpm</p><pre class="language-sh" data-language="sh"><code class="language-sh">#5.7mysql-community-common -&gt; mysql-community-libs -&gt; mysql-community-client -&gt; mysql-community-server#8.0rpm -ivh mysql-community-common-8.0.33-1.el7.x86_64.rpmrpm -ivh mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-8.0.33-1.el7.x86_64.rpmrpm -ivh mysql-community-client-8.0.33-1.el7.x86_64.rpmrpm -ivh mysql-community-icu-data-files-8.0.33-1.el7.x86_64.rpm# yum install -y net-tools 如果安装server失败再安装net-toolsrpm -ivh mysql-community-server-8.0.33-1.el7.x86_64.rpm</code></pre><p>验证是否安装成功</p><pre class="language-none"><code class="language-none">mysql --version</code></pre><h2 id="3-启动MySQL"><a href="#3-启动MySQL" class="headerlink" title="3 启动MySQL"></a>3 启动MySQL</h2><pre class="language-sh" data-language="sh"><code class="language-sh">#启动mysql服务器service mysqld start# 查看mysql是否启动service mysqld status# 每次开机都要手动启动mysqlsystemctl start mysqld# 开机时自动开启mysql systemctl enable mysqld# 停止mysql服务器service mysqld stop</code></pre><p>若启动时遇到如下的报错，需删除数据库存放的数据</p><blockquote><p> [InnoDB] Unsupported redo log format (v0). The redo log was created before MySQL 5.7.9</p><p>[MY-010020] [Server] Data Dictionary initialization failed.</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh"># 删除数据库下的所有数据rm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*# 启动MySQLservice mysqld start 或 systemctl start mysqld</code></pre><h3 id="3-1-登录MySQL-修改密码"><a href="#3-1-登录MySQL-修改密码" class="headerlink" title="3.1 登录MySQL 修改密码"></a>3.1 登录MySQL 修改密码</h3><p>第一次登录mysql需要使用mysql的临时密码，该密码存放在mysql日志文件中</p><pre class="language-sh" data-language="sh"><code class="language-sh">vi &#x2F;var&#x2F;log&#x2F;mysqld.log# 查看某一行日志为：A temporary password is generated for root@localhost: k9r0TzkLR4&#x2F;&#x2F;# 则k9r0TzkLR4&#x2F;&#x2F; 为首次登录密码</code></pre><h4 id="3-1-1-命令登录MySQL"><a href="#3-1-1-命令登录MySQL" class="headerlink" title="3.1.1 命令登录MySQL"></a>3.1.1 命令登录MySQL</h4><pre class="language-sh" data-language="sh"><code class="language-sh">mysql -uroot -p</code></pre><p>输入刚才获取到的临时密码</p><h4 id="3-1-2-修改密码"><a href="#3-1-2-修改密码" class="headerlink" title="3.1.2 修改密码"></a>3.1.2 修改密码</h4><pre class="language-sh" data-language="sh"><code class="language-sh"># 想设置密码简单需要先修改成复杂密码，然后降低密码校验的复杂度alter user root@localhost identified by &#39;6789@jklJKL&#39;;# 修改密码校验配置# mysql8.0set global validate_password.policy &#x3D; 0;set global validate_password.length &#x3D; 4;# mysql5.7set global validate_password.policy &#x3D; 0;set global validate_password.length &#x3D; 4;# 重新设置简单密码alter user root@localhost identified by &#39;123456&#39;;# 查看密码策略SHOW VARIABLES LIKE &#39;validate_password%&#39;;0&#x2F;LOW：只验证长度；1&#x2F;MEDIUM：验证长度、数字、大小写、特殊字符；2&#x2F;STRONG：验证长度、数字、大小写、特殊字符、字典文件；</code></pre><h3 id="3-2-配置远程登录"><a href="#3-2-配置远程登录" class="headerlink" title="3.2 配置远程登录"></a>3.2 配置远程登录</h3><p>此时root用户只能用于本机访问，不能用于远程访问，否则会报错误。因此如果navicat想远程连接，是无法连接的！</p><p>授予root用户远程访问权限</p><pre class="language-sh" data-language="sh"><code class="language-sh">update mysql.user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;flush privileges;</code></pre><h3 id="3-3-配置防火墙"><a href="#3-3-配置防火墙" class="headerlink" title="3.3 配置防火墙"></a>3.3 配置防火墙</h3><p>使用本地使用管理工具如navicat，尝试连接mysql数据库。如果拒绝访问，可能是防火墙没设置</p><pre class="language-sh" data-language="sh"><code class="language-sh">#确认防火墙使用的是iptables还是firewalldservice iptables statusservice firewalld status# 哪个命令好使，说明使用的是那个防火墙# 方案1：简单粗暴，关闭防火墙systemctl stop iptables 或者 systemctl stop firewalld.service# 方案2：添加指定端口&#x2F;sbin&#x2F;iptables -I INPUT -p tcp --dport 3306 -jfirewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent# 查看开放的端口firewall-cmd --list-all</code></pre><h3 id="3-4-配置编码"><a href="#3-4-配置编码" class="headerlink" title="3.4 配置编码"></a>3.4 配置编码</h3><p>为了防止以后出现乱码问题，我们需要把mysql的编码修改为<code>utf8</code></p><pre class="language-sh" data-language="sh"><code class="language-sh"># 查看编码show variables like &#39;%char%&#39;;# 编辑配置文件vim &#x2F;etc&#x2F;my.cnf# 1、在 [mysqld] 标签下加上以下内容：collation-server&#x3D;utf8_general_cicharacter-set-server&#x3D;utf8# 2、在 [mysql] 标签下加上一行default-character-set&#x3D;utf8# 3、在 [mysql.server]标签下加上一行default-character-set&#x3D;utf8# 4、在 [mysqld_safe]标签下加上一行default-character-set&#x3D;utf8# 5、在 [client]标签下加上一行default-character-set&#x3D;utf8</code></pre><h1 id="二、-配置ssl"><a href="#二、-配置ssl" class="headerlink" title="二、 配置ssl"></a>二、 配置ssl</h1><p>可参考 <a href="https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html">mysql官网</a> 进行配置。</p><h2 id="1-创建一个ssl的用户"><a href="#1-创建一个ssl的用户" class="headerlink" title="1. 创建一个ssl的用户"></a>1. 创建一个ssl的用户</h2><h3 id="1-1-创建用户并赋权"><a href="#1-1-创建用户并赋权" class="headerlink" title="1.1 创建用户并赋权"></a>1.1 创建用户并赋权</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--mysql5.7</span><span class="token comment">--配置权限</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'ssltest'</span><span class="token variable">@'%'</span>identified <span class="token keyword">by</span> <span class="token string">'123456'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span><span class="token comment">--创建用户并开启ssl登录</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'ssltest'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span> <span class="token keyword">REQUIRE</span> SSL<span class="token punctuation">;</span><span class="token comment">--mysql8.0</span><span class="token comment">--新版本的 MySQL 8.x 版本已经将创建账户和赋权的方式分开会导致上面的命令在 MySQL 8.x 上执行报语法错误。</span><span class="token comment">-- 创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'ssltest'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">-- 赋权</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'ssltest'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token comment">-- 刷新</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-开启ssl登录"><a href="#1-2-开启ssl登录" class="headerlink" title="1.2 开启ssl登录"></a>1.2 开启ssl登录</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--MySQL8版本中新增了一个system_user帐户类型，如果root用户没有SYSTEM_USER权限，会导致新增的用户开启ssl失败</span><span class="token keyword">grant</span> <span class="token keyword">system_user</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment">--开启ssl</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'ssltest'</span><span class="token variable">@'%'</span> <span class="token keyword">REQUIRE</span> SSL<span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span class="token comment">--查看用户情况</span><span class="token keyword">SELECT</span> ssl_type <span class="token keyword">From</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">Where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">"ssltest"</span><span class="token comment">-- 取消ssl验证:</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'xxx'</span><span class="token variable">@'%'</span> <span class="token keyword">require</span> none<span class="token punctuation">;</span></code></pre><h2 id="2-制作证书"><a href="#2-制作证书" class="headerlink" title="2. 制作证书"></a>2. 制作证书</h2><h3 id="方式1：使用mysql8默认证书"><a href="#方式1：使用mysql8默认证书" class="headerlink" title="方式1：使用mysql8默认证书"></a>方式1：使用mysql8默认证书</h3><p>mysql8自带了ssl证书，可直接使用，一般在data目录里(/var/lib/mysql/)</p><pre class="language-sh" data-language="sh"><code class="language-sh">mysql-certs:├── public_key.pem├── ca.pem #ca证书├── client-cert.pem     #客户端证书├── server-cert.pem#服务端证书├── ca-key.pem#ca私钥├── client-key.pem#客户端私钥├── private_key.pem#私钥├── server-key.pem#服务端私钥</code></pre><h3 id="方式2：使用mysql-ssl-rsa-setup"><a href="#方式2：使用mysql-ssl-rsa-setup" class="headerlink" title="方式2：使用mysql_ssl_rsa_setup"></a>方式2：使用mysql_ssl_rsa_setup</h3><p>mysql_ssl_rsa_setup一般在mysql的bin目录下，Linux在<code>/var/lib/mysql/</code>下</p><pre class="language-sh" data-language="sh"><code class="language-sh">mysql_ssl_rsa_setup -d &#x2F;opt&#x2F;mysql&#x2F;# -d 指定生成ssl证书的路径</code></pre><h3 id="方式3：使用openssl生成"><a href="#方式3：使用openssl生成" class="headerlink" title="方式3：使用openssl生成"></a>方式3：使用openssl生成</h3><pre class="language-sh" data-language="sh"><code class="language-sh"># Create clean environmentrm -rf newcertsmkdir newcerts &amp;&amp; cd newcerts# Create CA certificateopenssl genrsa 2048 &gt; ca-key.pemopenssl req -new -x509 -nodes -days 3600 -key ca-key.pem -out ca.pem# Create server certificate, remove passphrase, and sign it# server-cert.pem &#x3D; public key, server-key.pem &#x3D; private keyopenssl req -newkey rsa:2048 -days 3600 -nodes -keyout server-key.pem -out server-req.pemopenssl rsa -in server-key.pem -out server-key.pemopenssl x509 -req -in server-req.pem -days 3600 -CA ca.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem# Create client certificate, remove passphrase, and sign it# client-cert.pem &#x3D; public key, client-key.pem &#x3D; private keyopenssl req -newkey rsa:2048 -days 3600 -nodes -keyout client-key.pem -out client-req.pemopenssl rsa -in client-key.pem -out client-key.pemopenssl x509 -req -in client-req.pem -days 3600 -CA ca.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem# 验证openssl verify -CAfile ca.pem server-cert.pem client-cert.pem# 查看证书openssl x509 -text -in ca.pemopenssl x509 -text -in server-cert.pemopenssl x509 -text -in client-cert.pem</code></pre><h4 id="openssl相关说明"><a href="#openssl相关说明" class="headerlink" title="openssl相关说明"></a>openssl相关说明</h4><ol><li><p>生成根证书私钥</p><pre class="language-sh" data-language="sh"><code class="language-sh">openssl genrsa -aes256 -out private&#x2F;cakey.pem 2048命令含义如下：genrsa——使用RSA算法产生私钥-aes256——使用256位密钥的AES算法对私钥进行加密-out——输出文件的路径2048——指定私钥长度</code></pre></li><li><p>生成证书请求</p><pre class="language-sh" data-language="sh"><code class="language-sh">openssl req -new -key private&#x2F;cakey.pem -out private&#x2F;ca.csr -subj “&#x2F;C&#x3D;CN&#x2F;ST&#x3D;ZHEJIANG&#x2F;L&#x3D;HANGZHOU&#x2F;O&#x3D;TEST&#x2F;OU&#x3D;mygroup&#x2F;CN&#x3D;TEST”该命令含义如下：req——执行证书签发命令-new——新证书签发请求-key——指定私钥路径-out——输出的csr文件的路径-subj——证书相关的用户信息(subject的缩写)备注：这里需要输入私钥密码；</code></pre></li><li><p>检查证书请求信息</p><pre class="language-sh" data-language="sh"><code class="language-sh">openssl req -text -in ca.csr -noout</code></pre></li><li><p>自签发根证书</p><pre class="language-sh" data-language="sh"><code class="language-sh">openssl x509 -req -days 365 -sha1 -extensions v3_ca -signkey private&#x2F;cakey.pem -in private&#x2F;ca.csr -out certs&#x2F;ca.cer#该命令的含义如下：x509——生成x509格式证书-req——输入csr文件-days——证书的有效期（天）-sha1——证书摘要采用sha1算法-extensions——按照openssl.cnf文件中配置的v3_ca项添加扩展-signkey——签发证书的私钥-in——要输入的csr文件-out——输出的cer证书文件备注：（1）创建非根证书指定 -extensions v3_req，表示，在openssl.cnf中v3_req扩展属性为：basicConstraints &#x3D; CA:FALSE。（2）创建根证书时，指定了-extensions v3_ca，basicConstraints &#x3D; critical,CA:true。</code></pre></li><li><p>检查证书</p><pre class="language-sh" data-language="sh"><code class="language-sh">openssl x509 -text -in ca.cer -noout</code></pre></li></ol><h2 id="3-配置证书"><a href="#3-配置证书" class="headerlink" title="3. 配置证书"></a>3. 配置证书</h2><p>编辑mysql的配置文件，Linux下为my.cnf，windows下为mysql.ini。添加下列配置：</p><pre class="language-sh" data-language="sh"><code class="language-sh">ssl_ca&#x3D;ca.pemssl_cert&#x3D;server-cert.pemssl_key&#x3D;server-key.pem#指定是否要求客户端使用加密连接。默认值为 OFF，如果 ON，则表示客户端必须使用加密连接，如果客户端关闭 ssl ，则连接会报错。require_secure_transport&#x3D;ON# 注意证书目录的所属权限用户为mysql，否则会导致mysql启动时读取证书失败chown -R mysql.mysql &#x2F;opt&#x2F;mysql&#x2F;</code></pre><p> 配置完后重启mysql</p><pre class="language-sh" data-language="sh"><code class="language-sh">service mysqld restart</code></pre><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h2><pre class="language-sh" data-language="sh"><code class="language-sh">show variables like &#39;%ssl%&#39;;+---------------+--------------------------------+| Variable_name | Value                          |+---------------+--------------------------------+| have_openssl  | YES                            || have_ssl      | YES                            || ssl_ca        | &#x2F;etc&#x2F;mariadb&#x2F;pki&#x2F;ca-bundle.crt || ssl_capath    |                                || ssl_cert      | &#x2F;etc&#x2F;mariadb&#x2F;pki&#x2F;server.crt    || ssl_cipher    |                                || ssl_crl       |                                || ssl_crlpath   |                                || ssl_key       | &#x2F;etc&#x2F;mariadb&#x2F;pki&#x2F;server.key    |+---------------+--------------------------------+当 have_ssl 为 YES 时, 表示此时 MySQL 服务已经支持 SSL 了. 如果是 DESABLE, 则表示当前环境不支持启用ssl.</code></pre><p> <strong>查看ssl_cipher</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--通过ssl登录</span>mysql <span class="token operator">-</span>u ssltest <span class="token operator">-</span>p <span class="token comment">--ssl-ca=/opt/mysql/mysql-8.0.33/ssl/ca.pem</span><span class="token comment">--登录mysql后</span><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'ssl_cipher'</span><span class="token punctuation">;</span><span class="token comment">--返回结果</span><span class="token operator">+</span><span class="token comment">---------------+-----------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------------------------+</span><span class="token operator">|</span> Ssl_cipher    <span class="token operator">|</span> ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------------------------+</span></code></pre><p>当使用ssl登录时，才会有结果，若不通过ssl登录，则显示为空。</p><h2 id="5-TLS版本"><a href="#5-TLS版本" class="headerlink" title="5. TLS版本"></a>5. TLS版本</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看版本</span><span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'tls_version'</span><span class="token punctuation">;</span><span class="token comment">--配置版本 在mysql配置文件</span>tls_version<span class="token operator">=</span>TLSv1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span>TLSv1<span class="token punctuation">.</span><span class="token number">3</span></code></pre><h2 id="6-附录"><a href="#6-附录" class="headerlink" title="6. 附录"></a>6. 附录</h2><h4 id="MySQL-Server-TLS-Protocol-Support"><a href="#MySQL-Server-TLS-Protocol-Support" class="headerlink" title="MySQL Server TLS Protocol Support"></a>MySQL Server TLS Protocol Support</h4><table><thead><tr><th align="left">MySQL Server Release</th><th align="left">TLS Protocols Supported</th></tr></thead><tbody><tr><td align="left">MySQL 8.0.15 and below</td><td align="left">TLSv1, TLSv1.1, TLSv1.2</td></tr><tr><td align="left">MySQL 8.0.16 and MySQL 8.0.17</td><td align="left">TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 (except Group Replication)</td></tr><tr><td align="left">MySQL 8.0.18 through MySQL 8.0.25</td><td align="left">TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 (including Group Replication)</td></tr><tr><td align="left">MySQL 8.0.26 and MySQL 8.0.27</td><td align="left">TLSv1 (deprecated), TLSv1.1 (deprecated), TLSv1.2, TLSv1.3</td></tr><tr><td align="left">MySQL 8.0.28 and above</td><td align="left">TLSv1.2, TLSv1.3</td></tr></tbody></table><h4 id="MySQL-Server-TLS-Protocol-Default-Settings"><a href="#MySQL-Server-TLS-Protocol-Default-Settings" class="headerlink" title="MySQL Server TLS Protocol Default Settings"></a>MySQL Server TLS Protocol Default Settings</h4><table><thead><tr><th align="left">MySQL Server Release</th><th align="left"><code>tls_version</code> Default Setting</th></tr></thead><tbody><tr><td align="left">MySQL 8.0.15 and below</td><td align="left"><code>TLSv1,TLSv1.1,TLSv1.2</code></td></tr><tr><td align="left">MySQL 8.0.16 and MySQL 8.0.17</td><td align="left"><code>TLSv1,TLSv1.1,TLSv1.2,TLSv1.3 (with OpenSSL 1.1.1)``TLSv1,TLSv1.1,TLSv1.2 (otherwise)</code>Group Replication does not support TLSv1.3</td></tr><tr><td align="left">MySQL 8.0.18 through MySQL 8.0.25</td><td align="left"><code>TLSv1,TLSv1.1,TLSv1.2,TLSv1.3 (with OpenSSL 1.1.1)``TLSv1,TLSv1.1,TLSv1.2 (otherwise)</code>Group Replication supports TLSv1.3</td></tr><tr><td align="left">MySQL 8.0.26 and MySQL 8.0.27</td><td align="left"><code>TLSv1,TLSv1.1,TLSv1.2,TLSv1.3 (with OpenSSL 1.1.1)``TLSv1,TLSv1.1,TLSv1.2 (otherwise)</code>TLSv1 and TLSv1.1 are deprecated</td></tr><tr><td align="left">MySQL 8.0.28 and above</td><td align="left"><code>TLSv1.2,TLSv1.3</code></td></tr></tbody></table><h1 id="三、卸载mysql"><a href="#三、卸载mysql" class="headerlink" title="三、卸载mysql"></a>三、卸载mysql</h1><p>如果之前linux系统上存在mysql想更新版本卸载或出现问题重装的话，需要卸载mysql</p><h2 id="查看安装情况"><a href="#查看安装情况" class="headerlink" title="查看安装情况"></a>查看安装情况</h2><pre class="language-sh" data-language="sh"><code class="language-sh">rpm -qa|grep -i mysql# 会出现如下安装包mysql-community-client-5.7.28-1.el7.x86_64mysql-community-server-5.7.28-1.el7.x86_64mysql-community-common-5.7.28-1.el7.x86_64mysql-community-libs-5.7.28-1.el7.x86_64# mysql8mysql-community-client-8.0.33-1.el7.x86_64mysql-community-common-8.0.33-1.el7.x86_64mysql-community-client-plugins-8.0.33-1.el7.x86_64mysql-community-server-8.0.33-1.el7.x86_64mysql-community-libs-8.0.33-1.el7.x86_64mysql-community-icu-data-files-8.0.33-1.el7.x86_64</code></pre><h2 id="删除安装包"><a href="#删除安装包" class="headerlink" title="删除安装包"></a>删除安装包</h2><pre class="language-sh" data-language="sh"><code class="language-sh">rpm -ev mysql-community-server-5.7.28-1.el7.x86_64……# 或者执行以下语句全部卸载rpm -e --nodeps &#96;rpm -qa|grep mysql&#96;</code></pre><h2 id="删除mysql相关文件"><a href="#删除mysql相关文件" class="headerlink" title="删除mysql相关文件"></a>删除mysql相关文件</h2><pre class="language-sh" data-language="sh"><code class="language-sh"> # 查询mysql相关文件 find &#x2F; -name mysql # 根据查找后的结果进行删除rm -rf &#x2F;etc&#x2F;selinux&#x2F;targeted&#x2F;active&#x2F;modules&#x2F;100&#x2F;mysql……#删除所有# 删除mysql的my.cnfrm -rf &#x2F;etc&#x2F;my.cnf</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁单节点Redis实现方案</title>
      <link href="/2023/02/10/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8D%95%E8%8A%82%E7%82%B9Redis%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2023/02/10/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8D%95%E8%8A%82%E7%82%B9Redis%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>加锁：使用SETNX进行加锁，当该指令返回1时，说明成功获得锁<br>解锁：当得到锁的线程执行完任务之后，使用DEL命令释放锁，以便其他线程可以继续执行setnx命令来获得锁。</p><ol><li><p><strong>死锁问题</strong>：假设线程获取了锁之后，在执行任务的过程中挂掉，来不及显示地执行DEL命令释放锁，那么竞争该锁的线程都会执行不了，产生死锁的情况。<br>解决方案：设置锁超时时间。setnx的key必须设置一个超时时间，以保证即使没有被显式释放，这把锁也要在一定时间后自动释放。可以使用expire命令设置锁超时时间</p></li><li><p><strong>非原子性问题</strong>：setnx和expire不是原子性的操作，假设某个线程执行setnx命令，成功获得了锁，但是还没来得及执行expire命令，服务器就挂掉了，这样一来，这把锁就没有设置过期时间了，变成了死锁，别的线程再也没有办法获得锁了。<br>解决方案：redis的set命令支持在获取锁的同时设置key的过期时间set &lt;lock.key&gt; &lt;lock.value&gt; nx ex <expireTime></p></li><li><p><strong>锁超时误删问题</strong>：假如线程A成功得到了锁，并且设置的超时时间是30秒。如果某些原因导致线程A30秒都没执行完，锁过期自动释放，线程B得到了锁。随后线程A执行完任务，执行DEL指令来释放锁。这时候线程B还没执行完，线程A实际上删除的是线程B加的锁。<br>解决方案：可以在DEL释放锁之前做一个判断，验证当前的锁是不是自己加的锁。在加锁的时候设置UUID当做value，并在删除之前验证key对应的value是不是UUID。</p></li><li><p><strong>锁校验非原子性问题</strong>：get操作、判断UUID和释放锁是两个独立操作，不是原子性。<br>解决方案：对于非原子性的问题，我们可以使用Lua脚本来确保操作的原子性。具体参照代码。</p></li><li><p><strong>多线程访问同代码块</strong>：虽然避免了线程A误删掉key的情况，但是同一时间有A，B两个线程在访问代码块，仍然是不完美的。<br>解决方案：可以让获得锁的线程开启一个守护线程，用来给快要过期的锁“续期”。假设线程A执行了29秒后还没执行完，这时候守护线程会执行expire指令，为这把锁续期20秒。守护线程从第29秒开始执行，每20秒执行一次。当线程A执行完任务，会显式关掉守护线程。如果服务器忽然断电，由于线程A和守护线程在同一个进程，守护线程也会停下。这把锁到了超时的时候，没人给它续命，也就自动释放了。</p></li><li><p><strong>重入锁问题</strong>：A方法调用B方法，A和B都有加锁的操作，这时就会有死锁的问题。<br>解决方案：需要将锁修改为Hash结构，这时加锁解锁都需要使用LUA脚本实现，因为Hash没有SETNX类似的命令能判断不存在才添加。并且删除锁的时候要判断锁重入层级。</p></li></ol><p>代码举例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>thunisoft<span class="token punctuation">.</span>pcglrpt<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span><span class="token class-name">DefaultRedisScript</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Timer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimerTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span><span class="token comment">/** * Redis 实现分布式锁实现类（由Lua + Redis Hash保证） * 锁类型：非公平，可重入，自动续期 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedRedisLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Redis 调用者     */</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 锁名称（锁唯一使用）     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lockName<span class="token punctuation">;</span>    <span class="token comment">/**     * 锁ID（可重入使用）     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expire <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DistributedRedisLock</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">,</span> <span class="token class-name">String</span> lockName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockName <span class="token operator">=</span> lockName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uuid <span class="token operator">=</span> <span class="token string">"uuid:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 加锁方法     *     * @param time 超时时间数字     * @param unit 时间类型     * @return 加锁成功与否     * @throws InterruptedException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断过期时间，如果没传自定义的，就使用默认值30，单位为秒</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expire <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置加锁LUA脚本</span>        <span class="token class-name">String</span> luaLockScript <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span>                <span class="token string">"if "</span> <span class="token operator">+</span>                <span class="token string">"   redis.call('exists',KEYS[1]) == 0 or redis.call('hexists', KEYS[1], ARGV[1]) == 1 "</span> <span class="token operator">+</span>       <span class="token comment">// 判断锁不存在或者锁存在且为当前线程</span>                <span class="token string">"then "</span> <span class="token operator">+</span>                <span class="token string">"   redis.call('hincrby',KEYS[1],ARGV[1],1) "</span> <span class="token operator">+</span>                                                        <span class="token comment">// 重入自增一操作</span>                <span class="token string">"   redis.call('expire',KEYS[1],ARGV[2]) return 1 "</span> <span class="token operator">+</span>                                                 <span class="token comment">// 设置过期时间</span>                <span class="token string">"else "</span> <span class="token operator">+</span>                <span class="token string">"   return 0 "</span> <span class="token operator">+</span>                <span class="token string">"end"</span><span class="token punctuation">;</span>        <span class="token comment">// 尝试加锁并循环</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>luaLockScript<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果未获取到锁，50毫秒后自动重试</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取锁成功后，过期时间自动续期</span>        <span class="token function">renewExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解锁方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置解锁LUA脚本</span>        <span class="token class-name">String</span> luaUnLockScript <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span>                <span class="token string">"if "</span> <span class="token operator">+</span>                <span class="token string">"   redis.call('hexists', KEYS[1], ARGV[1]) == 0 "</span> <span class="token operator">+</span>                  <span class="token comment">// 如果不存在锁，返回空</span>                <span class="token string">"then "</span> <span class="token operator">+</span>                <span class="token string">"   return nil "</span> <span class="token operator">+</span>                <span class="token string">"elseif "</span> <span class="token operator">+</span>                <span class="token string">"   redis.call('hincrby', KEYS[1], ARGV[1], -1) == 0 "</span> <span class="token operator">+</span>             <span class="token comment">// 如果存在锁并且重入等级降为0，删除锁</span>                <span class="token string">"then "</span> <span class="token operator">+</span>                <span class="token string">"   return redis.call('del', KEYS[1]) "</span> <span class="token operator">+</span>                              <span class="token comment">// 删除锁</span>                <span class="token string">"else "</span> <span class="token operator">+</span>                <span class="token string">"   return 0 "</span> <span class="token operator">+</span>                <span class="token string">"end"</span><span class="token punctuation">;</span>        <span class="token comment">// 执行解锁LUA脚本</span>        <span class="token class-name">Long</span> flag <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>luaUnLockScript<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果返回的是nil，flag就为null，抛出异常（锁不属于你或者锁不存在）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token string">"this lock doesn't belong to you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 守护线程锁续期     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">renewExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> lua <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span>                <span class="token string">"if "</span> <span class="token operator">+</span>                <span class="token string">"   redis.call('hexists',KEYS[1],ARGV[1]) == 1 "</span> <span class="token operator">+</span>              <span class="token comment">// 判断如果锁存在，就设置过期时间</span>                <span class="token string">"then "</span> <span class="token operator">+</span>                <span class="token string">"   return redis.call('expire',KEYS[1],ARGV[2]) "</span> <span class="token operator">+</span>                <span class="token string">"else "</span> <span class="token operator">+</span>                <span class="token string">"   return 0 "</span> <span class="token operator">+</span>                <span class="token string">"end"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">renewExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> expire <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 三分之一的过期时间执行一次</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 无需实现的方法，忽略     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 无需实现的方法，忽略     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现场服务器问题排查方法</title>
      <link href="/2023/01/31/java/%E7%8E%B0%E5%9C%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/31/java/%E7%8E%B0%E5%9C%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、现象观察"><a href="#一、现象观察" class="headerlink" title="一、现象观察"></a>一、现象观察</h1><p>​    一般遇到服务器问题时，现场用户会反馈页面打不开，这时候先需要对服务器的情况做个观察定位。</p><ol><li><p> 执行命令<code>ps aux | grep java</code>，查看服务器进程是否还存在，如存在，确认服务器的进程id <code>&lt;PID&gt;</code> ；</p></li><li><p>如果服务器进程已不在，可到服务安装的文件夹下查看是否有自动转储的dump文件或者trace日志，要做到OOM宕机时自动生成dump文件，需要在JVM启动参数中增加<code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&lt;dump文件存储路径&gt;</code>；</p></li><li><p> 如果服务器进程存在，可执行wget命令访问服务器的某个资源，观察服务器返回情况，或者直接在浏览器中访问服务器的某个资源地址，观察服务器返回状态，如服务器能返回对应资源内容，则说明服务仍然在运行中。</p></li></ol><h1 id="二、JVM运行情况检查"><a href="#二、JVM运行情况检查" class="headerlink" title="二、JVM运行情况检查"></a>二、JVM运行情况检查</h1><h2 id="2-1-内存运行检查"><a href="#2-1-内存运行检查" class="headerlink" title="2.1 内存运行检查"></a>2.1 内存运行检查</h2><h3 id="2-1-1-JVM堆内存模型"><a href="#2-1-1-JVM堆内存模型" class="headerlink" title="2.1.1  JVM堆内存模型"></a>2.1.1  JVM堆内存模型</h3><p>​    JVM堆内存分为新生代(Young)和老年代(Old)。</p><p>​    新生代又可以划分为三块：</p><ul><li><p>Eden:几乎所有新诞生的java对象存在这个区域。</p></li><li><p>From Survivor/To Survivor:经历过gc之后仍然存活且未进入到老年代区域的对象。</p></li><li><p>除此之外还存在一个永久代，又叫方法区。</p></li></ul><h3 id="2-1-2-GC发生条件"><a href="#2-1-2-GC发生条件" class="headerlink" title="2.1.2 GC发生条件"></a>2.1.2 GC发生条件</h3><p>​    首先，一般的对象产生都会在Eden中，较大的对象会直接进入老年代。在新生代中三个区域eden，from，to，一个时刻只会有两片内存被使用，首先eden肯定会被使用，from和to只有一片会被使用，主要是由于虚拟机采用的复制算法。</p><p>​    <strong>minor gc</strong>：为了避免在gc的时候产生内存碎片，jvm以牺牲空间的方式来做的，首先eden空间不足时会产生一次minor gc，垃圾回收器会在eden和一片使用的Survivor（假设是from）中进行清理，存活下来的对象会被复制到to中（假设to的大小足够装满），然后清空eden和from，保留下来的对象年龄加一。当年龄到达某一个设定值时会进入老年代，默认是15岁。还有一种情况是在Survivor区域相同年龄多有对象大于Survivor区域一半是所有该年龄及以上的都会被移动到老年代。</p><p>​    <strong>full gc</strong>：minor gc时Survivor区域不足以容纳年轻代中存活下来的对象时，且老年代中剩余空间容纳不了新生代中存活下来的对象时会进行full gc。老年代中因为没有进行分区，所以回收算法使用的是标记－清理算法或者标记整理算法。</p><h3 id="2-1-3-jmap命令检查"><a href="#2-1-3-jmap命令检查" class="headerlink" title="2.1.3 jmap命令检查"></a>2.1.3 jmap命令检查</h3><p>Jdk自带的jmap命令可以用于检查JVM的内存使用情况。</p><p>使用<code>jmap -heap &lt;PID&gt;</code>命令，可以查看对应进程的堆内存使用情况，比如下图所示的结果。</p><p><img src="0bd33d7ca8484161b04b1baf0cd55420.jpg" alt="jmapHeap.jpg">           </p><p>这个显示的结果分为两部分内容，一部分为JVM的堆配置情况，其具体的含义见下图所示。</p><pre class="language-sh" data-language="sh"><code class="language-sh">Heap Configuration:                               ##堆配置情况   MinHeapFreeRatio &#x3D; 40                         ##最小堆使用比例   MaxHeapFreeRatio &#x3D; 70                        ##最大堆可用比例   MaxHeapSize      &#x3D; 2147483648 (2048.0MB)      ##最大堆空间大小   NewSize          &#x3D; 268435456 (256.0MB)           ##新生代分配大小   MaxNewSize       &#x3D; 268435456 (256.0MB)         ##最大可新生代分配大小   OldSize          &#x3D; 5439488 (5.1875MB)             ##老生代大小   NewRatio         &#x3D; 2                              ##新生代比例   SurvivorRatio    &#x3D; 8                             ##新生代与suvivor的比例   PermSize         &#x3D; 134217728 (128.0MB)           ##perm区大小   MaxPermSize      &#x3D; 134217728 (128.0MB)         ##最大可分配perm区大小</code></pre><p>​    在这里主要需要关注的是MaxHeapSize和MaxPermSize这俩个参数，这俩个参数影响着JVM的内存运行，如果这俩个参数设置的不当，可能会导致JVM的内存溢出。</p><p>​    主要需要检查的还是堆内存使用情况，整个堆内存使用情况的参数含义如下图所示。</p><pre class="language-sh" data-language="sh"><code class="language-sh">Heap Usage:                                     ##堆使用情况New Generation (Eden + 1 Survivor Space):          ##新生代（伊甸区 + survior空间）   capacity &#x3D; 241631232 (230.4375MB)               ##伊甸区容量   used     &#x3D; 77776272 (74.17323303222656MB)      ##已经使用大小   free     &#x3D; 163854960 (156.26426696777344MB)     ##剩余容量   32.188004570534986% used                      ##使用比例Eden Space:                                       ##伊甸区   capacity &#x3D; 214827008 (204.875MB)                ##伊甸区容量   used     &#x3D; 74442288 (70.99369812011719MB)      ##伊甸区使用   free     &#x3D; 140384720 (133.8813018798828MB)      ##伊甸区当前剩余容量   34.65220164496263% used                       ##伊甸区使用情况From Space:                                       ##survior1区   capacity &#x3D; 26804224 (25.5625MB)                  ##survior1区容量   used     &#x3D; 3333984 (3.179534912109375MB)        ##surviror1区已使用情况   free     &#x3D; 23470240 (22.382965087890625MB)       ##surviror1区剩余容量   12.43827838477995% used                        ##survior1区使用比例To Space:                                          ##survior2 区   capacity &#x3D; 26804224 (25.5625MB)                  ##survior2区容量   used     &#x3D; 0 (0.0MB)                               ##survior2区已使用情况   free     &#x3D; 26804224 (25.5625MB)                    ##survior2区剩余容量   0.0% used                                        ## survior2区使用比例concurrent mark-sweep generation:                    ##老生代使用情况   capacity &#x3D; 1879048192 (1792.0MB)                  ##老生代容量   used     &#x3D; 30847928 (29.41887664794922MB)        ##老生代已使用容量   free     &#x3D; 1848200264 (1762.5811233520508MB)      ##老生代剩余容量   1.6416783843721663% used                        ##老生代使用比例Perm Generation:                                    ##perm区使用情况   capacity &#x3D; 134217728 (128.0MB)                    ##perm区容量   used     &#x3D; 47303016 (45.111671447753906MB)       ##perm区已使用容量   free     &#x3D; 86914712 (82.8883285522461MB)          ##perm区剩余容量   35.24349331855774% used                        ##perm区使用比例</code></pre><p>​        堆内存使用情况主要关注Eden Space（伊甸区）和PS Old Generation（老年代）的使用情况。正常情况下，伊甸区和老年代的使用比例会不断发生变化，可能会不断的往上增长然后又开始下降，一旦出现伊甸区和老年代使用全部被占满的情况，则表明JVM已经无法正常的完成GC操作，此时程序必然对外无法响应，一个典型的情况可看下图的结果。 </p><p><img src="image-20230130182858336.png" alt="image-20230130182858336"></p><p>​        对于已经出现内存使用问题的JVM，需要将内存文件拷贝出来以供后续检查分析，此时可执行命令<code>jmap –dump: format=b,file=&lt;dump文件存储路径&gt; &lt;PID&gt;</code>，如果遇到对应线程无响应的情况，此时还可以加上<code>-F</code>参数来强制进行内存转储。等待dump文件完成后，可将dump文件进行压缩，然后将dump文件从服务器中拷贝出来，以供后续分析检查使用。</p><p>​        除此之外，当PS Perm Generation（永久代）的使用达到100%时，JVM也会出错，在日志中会报出“java.lang.OutOfMemoryError: PermGen space”类似的错误，此时需要重新设置JVM启动参数中的MaxPermSize的值，以保证永久代的内存使用不会溢出。</p><p>​    还可以使用<code>jstat -gcutil &lt;PID&gt;</code>命令来查看对应JVM进程的GC情况，从而帮助我们进行检查。</p><h2 id="2-2-线程检查"><a href="#2-2-线程检查" class="headerlink" title="2.2 线程检查"></a>2.2 线程检查</h2><p>线程检查主要使用jstack命令来进行，在控制台执行“jstack <PID>”命令可以查看对应JVM进程在当前时刻的所有线程日志，由于jstack的日志会相当大，在控制台查看不大方便，建议在后面加上输出参数“&gt; [输出文件路径]”,从而将jstack的日志输出到文件，然后再打开对应的文件进行检查。</p><p>对于jstack的日志文件，其中的线程状态有如下几种：</p><ol><li><p><strong>Deadlock</strong>（死锁，重点关注）</p><p>一般指多个线程调用间，进入相互资源占用，导致一直等待无法释放的情况。</p></li><li><p>Runnable（执行中）</p></li><li><p><strong>Waiting on condition</strong>（等待资源， 重点关注） </p><p>等待资源，或等待某个条件的发生。如果堆栈信息明确是应用代码，则证明该线程正在等待资源。一般是大量读取某资源，且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取。</p></li><li><p>**Waiting on monitor entry或in Object.wait()**（等待获取监视器， 重点关注）</p><p>Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 Class的锁。每一个对象都有，也仅有一个 monitor。每个 Monitor在某个时刻，只能被一个线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “ Entry Set”和 “Wait Set”里面等候。在 “Entry Set”中等待的线程状态是 “Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”。</p></li><li><p>Suspended（暂停）</p></li></ol><ol start="6"><li>Object.wait() 或 TIMED_WAITING（对象等待中）</li></ol><ol start="7"><li><strong>Blocked</strong>（阻塞， 重点关注） </li></ol><p>   线程阻塞，是指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。</p><ol start="8"><li>Parked（停止）</li></ol><p>   一般的线程日志检查最可能会出现问题的是“Waiting on monitor entry”和“Blocked”状态的线程数过多，如果这两种线程数过多的话，会导致中间件无法启用新线程来面对访问请求（一个中间件的最大线程数是有限制的），从而对外表现出宕机的症状，这时分析日志的时候主要需要查看这些线程被“lock”住的对象堆栈信息是啥，从而定位出原因来。由于每次执行jstack命令获得的都是当前时刻的线程堆栈信息，为了确定问题原因，最好多提取几次jstack日志以做比较。</p><p>线程日志问题定位需要一定的经验，对于此种问题的检查还需要多次练习才行。</p><h1 id="三、CPU问题定位"><a href="#三、CPU问题定位" class="headerlink" title="三、CPU问题定位"></a>三、CPU问题定位</h1><p>​    当服务器对外显示的现象是CPU一直在高位运行，比如CPU使用率在95%以上持续20分钟以上，此时需要对CPU的使用情况进行检查，以定位是否程序问题导致CPU持续飘高。</p><p>​    在服务器中执行命令<code>top –H -p &lt;PID&gt;</code>可查看某个java进程里各个线程的CPU占用情况，比如某个服务进程的显示的情况如下图所示。</p><p><img src="image-20230130183550423.png" alt="image-20230130183550423"></p><pre><code>找到其中CPU使用率较高，且执行时间较长的线程，比如上图中25077的线程当前CPU占用率达到了10%，且其执行时间接近9秒，初步判断该进程比较可疑，此时需要进一步排查该进程信息。</code></pre><p>​    按2.2章中介绍的jstack的使用方法，获得该服务当前的线程堆栈信息，然后将查出的可疑进程号25077转换为16进制数61f5，在Thread dump数据中搜索nid为0x61f5的线程号，即可得到该可疑进程当前的堆栈信息，通过堆栈信息即可定位有问题的程序位置。</p><h1 id="四、内存问题定位"><a href="#四、内存问题定位" class="headerlink" title="四、内存问题定位"></a>四、内存问题定位</h1><p>​    内存问题的定位需要依赖2.1.3章中使用jmap命令获得的JVM堆内存dump文件。同时内存分析还需要使用“Memory Analyzer Tool”工具（简称MAT），该工具可以从网上单独下载，也可以在Eclipse的Marketplace中进行插件安装。</p><p>​    Eclipse安装完MAT插件后，可以在Eclipse中打开“Memory Analysis”视图，如下图所示。</p><p><img src="image-20230130183557957.png" alt="image-20230130183557957"></p><p>​    在“Memory Analysis”视图中。选择File菜单下的“Open Heap Dump”菜单项，打开jmap命令获得的内存dump文件，即可对dump的内存进行分析。</p><p><img src="image-20230130183610548.png" alt="image-20230130183610548"></p><p>  等待工具分析完dump内存后，会得到一个内存分析报告，如下图所示，此时主要需要关注的是“Leak Suspects”项，点击此项，即可获得该内存报告所分析的主要问题。</p><p><img src="image-20230130183633708.png" alt="image-20230130183633708"></p><p>​    其中对于每个对象的查看，最常用的功能如下：</p><p><img src="image-20230130183708903.png" alt="image-20230130183708903"></p><p> <strong>List objects:</strong></p><blockquote><p>with outgoing references: 查看它所引用的对象</p><p>with incoming references: 查看它被哪些对象引用</p></blockquote><p>​    通过查看可疑内存对象的引用情况，大致可定位出问题原因来。</p><p>​    内存原因定位也需要操作人有一定的经验，目前生产环境出现内存问题绝大部分的情况都是在数据库中一次性查询了大量数据进入内存，导致JVM的GC操作无法执行，因此程序在查询的时候一定要注意数据量的问题，对于数据量大的表进行查询时，一定要考虑分页的问题。</p><h1 id="五、命令总结"><a href="#五、命令总结" class="headerlink" title="五、命令总结"></a>五、命令总结</h1><pre class="language-sh" data-language="sh"><code class="language-sh">ps aux | grep java                 -- 查看java进程jmap -heap &lt;PID&gt;                 -- 查看jvm堆内存使用情况jmap –dump: format&#x3D;b,file&#x3D;&lt;dump文件存储路径&gt; &lt;PID&gt; -- 转储内存文件jstack &lt;PID&gt;                    -- 查看jvm实时线程信息top –H –p &lt;PID&gt;                  -- 查看对应jvm进程中各线程CPU占用情况jstat -gcutil &lt;PID&gt;                -- 查看jvm的实时gc情况</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 问题排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abase基本问题解决</title>
      <link href="/2023/01/30/database/abase/abase%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/01/30/database/abase/abase%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Abase基本问题解决"><a href="#Abase基本问题解决" class="headerlink" title="Abase基本问题解决"></a>Abase基本问题解决</h1><h2 id="一、数据库启停"><a href="#一、数据库启停" class="headerlink" title="一、数据库启停"></a>一、数据库启停</h2><p>数据库一般安装在thunisoft用户，在/home/thunisoft目录下存在启停数据库的脚本</p><h3 id="1-1-启动数据库"><a href="#1-1-启动数据库" class="headerlink" title="1.1 启动数据库"></a>1.1 启动数据库</h3><pre class="language-none"><code class="language-none">su - thunisoft.&#x2F;startup_abase1.sh</code></pre><h3 id="1-2-停止数据库"><a href="#1-2-停止数据库" class="headerlink" title="1.2 停止数据库"></a>1.2 停止数据库</h3><pre class="language-none"><code class="language-none">su - thunisoft.&#x2F;stop_abase1.sh</code></pre><h3 id="1-3-查看数据库是否启动"><a href="#1-3-查看数据库是否启动" class="headerlink" title="1.3 查看数据库是否启动"></a>1.3 查看数据库是否启动</h3><pre class="language-none"><code class="language-none">ps -ef|grep &quot;postgres -D&quot;</code></pre><h2 id="二、数据库连接数满"><a href="#二、数据库连接数满" class="headerlink" title="二、数据库连接数满"></a>二、数据库连接数满</h2><p>目前遇到的数据库连接满的情况，都是由于JDBC驱动未更新导致的。可登录数据库服务器，判断哪个客户端造成的。</p><h3 id="2-1-查看数据库连接"><a href="#2-1-查看数据库连接" class="headerlink" title="2.1 查看数据库连接"></a>2.1 查看数据库连接</h3><pre class="language-none"><code class="language-none">ps -ef|grep postgres</code></pre><h3 id="2-2-定位应用"><a href="#2-2-定位应用" class="headerlink" title="2.2 定位应用"></a>2.2 定位应用</h3><h4 id="2-2-1-查看应用服务器连接数据库进程"><a href="#2-2-1-查看应用服务器连接数据库进程" class="headerlink" title="2.2.1 查看应用服务器连接数据库进程"></a>2.2.1 查看应用服务器连接数据库进程</h4><p>通过2.1命令定位连接最多应用服务器，登录该服务器定位应用进程号</p><pre class="language-none"><code class="language-none">netstat -np|grep 172.16.32.240</code></pre><pre class="language-none"><code class="language-none">tcp        0      0 ::ffff:172.16.33.84:41654   ::ffff:172.16.32.240:5432   ESTABLISHED 21238&#x2F;javatcp        0      0 ::ffff:172.16.33.84:39908   ::ffff:172.16.32.240:5432   ESTABLISHED 19468&#x2F;javatcp        0      0 ::ffff:172.16.33.84:39906   ::ffff:172.16.32.240:5432   ESTABLISHED 19468&#x2F;javatcp        0      0 ::ffff:172.16.33.84:41662   ::ffff:172.16.32.240:5432   ESTABLISHED 21238&#x2F;javatcp        0      0 ::ffff:172.16.33.84:41655   ::ffff:172.16.32.240:5432   ESTABLISHED 21238&#x2F;javatcp        0      0 ::ffff:172.16.33.84:41660   ::ffff:172.16.32.240:5432   ESTABLISHED 21238&#x2F;javatcp        0      0 ::ffff:172.16.33.84:41658   ::ffff:172.16.32.240:5432   ESTABLISHED 21238&#x2F;java</code></pre><h4 id="2-2-2-查看具体应用进程"><a href="#2-2-2-查看具体应用进程" class="headerlink" title="2.2.2 查看具体应用进程"></a>2.2.2 查看具体应用进程</h4><p>通过2.2.1命令执行结果，定位连接数据库应用进程号21238、19468。通过如下命令定位应用</p><pre class="language-none"><code class="language-none">ps -ef|grep 21238</code></pre><h4 id="2-2-3-kill应用"><a href="#2-2-3-kill应用" class="headerlink" title="2.2.3 kill应用"></a>2.2.3 kill应用</h4><p>先kill该上述应用，可释放连接。</p><pre class="language-none"><code class="language-none">kill -9 21238</code></pre><h4 id="2-2-4-更新驱动"><a href="#2-2-4-更新驱动" class="headerlink" title="2.2.4 更新驱动"></a>2.2.4 更新驱动</h4><p>最后跟新JDBC驱动，重启应用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> abase </tag>
            
            <tag> postgre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abase基础SQL</title>
      <link href="/2023/01/30/database/abase/abase%E5%9F%BA%E7%A1%80sql/"/>
      <url>/2023/01/30/database/abase/abase%E5%9F%BA%E7%A1%80sql/</url>
      
        <content type="html"><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="1-create-table"><a href="#1-create-table" class="headerlink" title="1.create table"></a>1.create table</h3><pre class="language-none"><code class="language-none">略 </code></pre><h3 id="2-select-into"><a href="#2-select-into" class="headerlink" title="2.select * into"></a>2.select * into</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--复制一张表,包括全部结构和数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj<span class="token punctuation">;</span><span class="token comment">--复制一张表,包括指定的字段和数据</span><span class="token keyword">select</span> c_bh<span class="token punctuation">,</span> n_ajzlb<span class="token punctuation">,</span> n_jbfy <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj<span class="token punctuation">;</span><span class="token comment">--复制一张表,按条件填充数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj <span class="token keyword">where</span> n_ajzlb <span class="token operator">=</span> <span class="token number">30010</span><span class="token punctuation">;</span><span class="token comment">--复制一张表,只包括表结构</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj <span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">&lt;></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h3 id="3-create-table-as"><a href="#3-create-table-as" class="headerlink" title="3.create table as"></a>3.create table as</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--复制一张表和数据</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj<span class="token punctuation">;</span><span class="token comment">--复制一张表,按条件填充数据</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj <span class="token keyword">where</span> n_ajzlb <span class="token operator">=</span> <span class="token number">30010</span><span class="token punctuation">;</span></code></pre><h3 id="4-create-table-like"><a href="#4-create-table-like" class="headerlink" title="4.create table like"></a>4.create table like</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--including constraints:需要复制check约束</span><span class="token comment">--including indexes:需要复制索引</span><span class="token comment">--including comments:需要复制注释</span><span class="token comment">--including defaults:需要复制默认值</span><span class="token comment">--including storage:需要复制存储策略</span><span class="token comment">--复制一张表,只复制表结构</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token punctuation">(</span><span class="token operator">like</span> db_test<span class="token punctuation">.</span>t_aj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--复制一张表,复制表结构和索引</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token punctuation">(</span><span class="token operator">like</span> db_test<span class="token punctuation">.</span>t_aj including indexes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--复制一张表,复制表结构、索引、注释</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_aj_linych <span class="token punctuation">(</span><span class="token operator">like</span> db_test<span class="token punctuation">.</span>t_aj including indexes including comments<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-create-temp-table"><a href="#4-create-temp-table" class="headerlink" title="4.create temp table"></a>4.create temp table</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--create temp tbl_name() on commit&#123;preserve rows|delete rows|drop&#125;;</span><span class="token comment">--preserve rows：默认值，事务提交后保留临时表和数据</span><span class="token comment">--delete rows：事务提交后删除数据，保留临时表</span><span class="token comment">--drop：事务提交后删除表</span><span class="token keyword">create</span> <span class="token keyword">temp</span> <span class="token keyword">table</span> tbl_temp<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">temp</span> <span class="token keyword">table</span> tbl_temp<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">temp</span> <span class="token keyword">table</span> tbl_temp<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">drop</span><span class="token punctuation">;</span></code></pre><h3 id="5-create-table-with"><a href="#5-create-table-with" class="headerlink" title="5.create table with"></a>5.create table with</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--fillfactor,填充因子，一个表的填充因子(fillfactor)是一个介于 10 和 100 之间的百分数。100(完全填充)是默认值。</span><span class="token comment">--如果指定了较小的填充因子，INSERT 操作仅按照填充因子指定的百分率填充表页。每个页上的剩余空间将用于在该页上更新行，</span><span class="token comment">--这就使得 UPDATE 有机会在同一页上放置同一条记录的新版本，这比把新版本放置在其它页上更有效。</span><span class="token comment">--对于一个从不更新的表将填充因子设为 100是最佳选择，但是对于频繁更新的表，较小的填充因子则更加有效</span><span class="token comment">--oid,行对象标识符（对象ID），这个字段只有在创建表时使用了“with oids”或配置参数“default_with_oids”的值为真时才出现，</span><span class="token comment">--这个字段的类型是oid（类型名与字段名同名）PostgreSQL在内部使用对象标识符（oid）作为系统表的主键。</span><span class="token comment">--系统不会给用户创建的表增加一个oid字段。oid类型用一个四字节的无符号整数实现，不能提供大数据范围内的唯一性保证，甚至在单个大表中也不行。</span><span class="token comment">--因此PostgreSQL官方不鼓励在用户创建的表中使用oid字段。</span><span class="token comment">--指定fillfactor(填充因子)和oids</span><span class="token keyword">create</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">FILLFACTOR</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> oids<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建一张表</span><span class="token keyword">create</span> <span class="token keyword">table</span>  db_test<span class="token punctuation">.</span>t_lyc <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> age <span class="token keyword">int</span><span class="token punctuation">,</span> addr <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--修改表名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_lyc <span class="token keyword">rename</span> <span class="token keyword">to</span> t_linych<span class="token punctuation">;</span><span class="token comment">--新增一个字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">add</span> c_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删除一个字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">drop</span> <span class="token keyword">column</span> c_name<span class="token punctuation">;</span><span class="token comment">--修改字段名称</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">rename</span> <span class="token string">"id"</span> <span class="token keyword">to</span> <span class="token string">"n_id"</span><span class="token punctuation">;</span><span class="token comment">--修改字段数据类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">alter</span> <span class="token keyword">column</span> <span class="token string">"c_name"</span> <span class="token keyword">type</span> <span class="token keyword">text</span><span class="token punctuation">;</span><span class="token comment">--插入随机数据，为验证修改做准备</span><span class="token keyword">insert</span> <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token keyword">repeat</span><span class="token punctuation">(</span> chr<span class="token punctuation">(</span>int4<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">integer</span><span class="token punctuation">;</span><span class="token comment">--特殊的修改为integer</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">alter</span> <span class="token keyword">column</span> c_name <span class="token keyword">type</span> <span class="token keyword">int</span> <span class="token keyword">using</span> to_number<span class="token punctuation">(</span>c_name<span class="token punctuation">,</span><span class="token string">'9999999999999999999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查看表的索引信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_indexes <span class="token keyword">where</span> tablename<span class="token operator">=</span><span class="token string">'t_aj'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_statio_all_indexes <span class="token keyword">where</span> relname<span class="token operator">=</span><span class="token string">'t_aj'</span><span class="token punctuation">;</span><span class="token comment">--创建一个索引</span><span class="token comment">--默认btree索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_t_linych_age <span class="token keyword">on</span> db_test<span class="token punctuation">.</span>t_linych <span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--指定btree索引，适合排序，比大小，和绝大部分场景</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_t_linych_age <span class="token keyword">on</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">using</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--指定hash索引，适合精确匹配，例如长字符串查询</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_t_linych_age <span class="token keyword">on</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">using</span> <span class="token keyword">hash</span> <span class="token punctuation">(</span>c_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--指定gin索引，适合like检索，尤其是三字符以上的检索，采用的是倒排索引的方式</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_t_linych_age <span class="token keyword">on</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">using</span> gin <span class="token punctuation">(</span>addr gin_trgm_ops<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删除一个索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> db_name<span class="token punctuation">.</span>index_name<span class="token punctuation">;</span></code></pre><p>想深究gin索引的同学请移步：<a href="http://artery.thunisoft.com/posts/detail/ce222e210dd0485fbc788fd0f190ed3a">http://artery.thunisoft.com/posts/detail/ce222e210dd0485fbc788fd0f190ed3a</a><br>非常详尽</p><h2 id="约束操作"><a href="#约束操作" class="headerlink" title="约束操作"></a>约束操作</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询表的约束信息</span><span class="token comment">--约束的类型包括 UNIQUE,PRIMARY KEY, CHECK, FOREIGN KEY, 注意这里的类型必须是大写</span><span class="token keyword">select</span>     tc<span class="token punctuation">.</span>constraint_name<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>table_name<span class="token punctuation">,</span> kcu<span class="token punctuation">.</span>column_name<span class="token punctuation">,</span>      ccu<span class="token punctuation">.</span>table_name <span class="token keyword">as</span> foreign_table_name<span class="token punctuation">,</span>     ccu<span class="token punctuation">.</span>column_name <span class="token keyword">as</span> foreign_column_name<span class="token punctuation">,</span>     tc<span class="token punctuation">.</span>is_deferrable<span class="token punctuation">,</span>tc<span class="token punctuation">.</span>initially_deferred <span class="token keyword">from</span>      information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">as</span> tc      <span class="token keyword">join</span> information_schema<span class="token punctuation">.</span>key_column_usage <span class="token keyword">as</span> kcu <span class="token keyword">on</span> tc<span class="token punctuation">.</span>constraint_name <span class="token operator">=</span> kcu<span class="token punctuation">.</span>constraint_name     <span class="token keyword">join</span> information_schema<span class="token punctuation">.</span>constraint_column_usage <span class="token keyword">as</span> ccu <span class="token keyword">on</span> ccu<span class="token punctuation">.</span>constraint_name <span class="token operator">=</span> tc<span class="token punctuation">.</span>constraint_name <span class="token keyword">where</span> constraint_type <span class="token operator">=</span> <span class="token string">'PRIMARY KEY'</span> <span class="token operator">and</span> tc<span class="token punctuation">.</span>table_name <span class="token operator">=</span> <span class="token string">'t_aj'</span><span class="token punctuation">;</span><span class="token comment">--添加一个主键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_id <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>n_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--添加一个唯一性约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">add</span> <span class="token keyword">constraint</span> unique_id <span class="token keyword">unique</span><span class="token punctuation">(</span>n_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--添加非空约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">alter</span> <span class="token keyword">column</span> age <span class="token keyword">set</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">--删除非空约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">alter</span> <span class="token keyword">column</span> age <span class="token keyword">drop</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">--删除一个约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">drop</span> <span class="token keyword">constraint</span> unique_id<span class="token punctuation">;</span></code></pre><h3 id="表权限"><a href="#表权限" class="headerlink" title="表权限"></a>表权限</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--修改表的拥有者</span><span class="token keyword">alter</span> <span class="token keyword">table</span> db_test<span class="token punctuation">.</span>t_linych owner <span class="token keyword">to</span> sa<span class="token punctuation">;</span><span class="token comment">--查询表权限</span><span class="token keyword">select</span> relname<span class="token punctuation">,</span>relacl <span class="token keyword">from</span> pg_class <span class="token keyword">where</span> relname<span class="token operator">=</span><span class="token string">'t_aj_sssq'</span><span class="token punctuation">;</span><span class="token comment">--为schema下的表添加权限</span><span class="token keyword">grant</span> <span class="token keyword">select</span> <span class="token keyword">on</span> <span class="token keyword">all</span> <span class="token keyword">tables</span> <span class="token operator">in</span> <span class="token keyword">schema</span> db_test <span class="token keyword">to</span> FY2000Login<span class="token punctuation">;</span><span class="token comment">--对未来新建表赋予相关权限(给予默认权限)</span><span class="token keyword">alter</span> <span class="token keyword">default</span> <span class="token keyword">privileges</span> <span class="token operator">in</span> <span class="token keyword">schema</span> db_test <span class="token keyword">grant</span> <span class="token keyword">select</span> <span class="token keyword">on</span> <span class="token keyword">tables</span> <span class="token keyword">to</span> FY2000Login<span class="token punctuation">;</span></code></pre><p>Access privileges 具体含义：<br>a: insert<br>r: select<br>w: update<br>d: delete<br>x: references<br>t: trigger<br>D: truncate  </p><h3 id="表的元数据"><a href="#表的元数据" class="headerlink" title="表的元数据"></a>表的元数据</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询库中的schema</span><span class="token keyword">select</span> schema_name<span class="token punctuation">,</span><span class="token operator">*</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">where</span> catalog_name <span class="token operator">=</span> <span class="token string">'db_ywst_ms'</span>   <span class="token operator">and</span> schema_name <span class="token operator">like</span> <span class="token string">'%test%'</span><span class="token punctuation">;</span><span class="token comment">-- 查询schema中的表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'t_aj'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--查询数据库占用空间</span> <span class="token keyword">select</span> d<span class="token punctuation">.</span>datname <span class="token keyword">as</span> name<span class="token punctuation">,</span>  pg_catalog<span class="token punctuation">.</span>pg_get_userbyid<span class="token punctuation">(</span>d<span class="token punctuation">.</span>datdba<span class="token punctuation">)</span> <span class="token keyword">as</span> owner<span class="token punctuation">,</span>    <span class="token keyword">case</span> <span class="token keyword">when</span> pg_catalog<span class="token punctuation">.</span>has_database_privilege<span class="token punctuation">(</span>d<span class="token punctuation">.</span>datname<span class="token punctuation">,</span> <span class="token string">'connect'</span><span class="token punctuation">)</span>        <span class="token keyword">then</span> pg_catalog<span class="token punctuation">.</span>pg_size_pretty<span class="token punctuation">(</span>pg_catalog<span class="token punctuation">.</span>pg_database_size<span class="token punctuation">(</span>d<span class="token punctuation">.</span>datname<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token string">'no access'</span>    <span class="token keyword">end</span> <span class="token keyword">as</span> size<span class="token keyword">from</span> pg_catalog<span class="token punctuation">.</span>pg_database d    <span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token keyword">case</span> <span class="token keyword">when</span> pg_catalog<span class="token punctuation">.</span>has_database_privilege<span class="token punctuation">(</span>d<span class="token punctuation">.</span>datname<span class="token punctuation">,</span> <span class="token string">'connect'</span><span class="token punctuation">)</span>        <span class="token keyword">then</span> pg_catalog<span class="token punctuation">.</span>pg_database_size<span class="token punctuation">(</span>d<span class="token punctuation">.</span>datname<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token boolean">null</span>    <span class="token keyword">end</span> <span class="token keyword">desc</span> <span class="token comment">-- nulls first</span>    <span class="token keyword">limit</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">--查询表的存储空间</span><span class="token keyword">select</span>    table_schema <span class="token operator">||</span> <span class="token string">'.'</span> <span class="token operator">||</span> table_name <span class="token keyword">as</span> table_full_name<span class="token punctuation">,</span>    pg_size_pretty<span class="token punctuation">(</span>pg_total_relation_size<span class="token punctuation">(</span><span class="token string">'"'</span> <span class="token operator">||</span> table_schema <span class="token operator">||</span> <span class="token string">'"."'</span> <span class="token operator">||</span> table_name <span class="token operator">||</span> <span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> size<span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token string">'db_ywst'</span>   <span class="token operator">and</span> table_type <span class="token operator">=</span> <span class="token string">'base table'</span>   <span class="token operator">and</span> table_name <span class="token operator">=</span> <span class="token string">'t_aj'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> pg_total_relation_size<span class="token punctuation">(</span><span class="token string">'"'</span> <span class="token operator">||</span> table_schema <span class="token operator">||</span> <span class="token string">'"."'</span> <span class="token operator">||</span> table_name <span class="token operator">||</span> <span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">--查询列信息</span> <span class="token keyword">select</span> column_name<span class="token punctuation">,</span>        udt_name<span class="token punctuation">,</span>        is_nullable<span class="token punctuation">,</span>        character_maximum_length<span class="token punctuation">,</span>        numeric_precision<span class="token punctuation">,</span>        numeric_precision_radix<span class="token punctuation">,</span>        numeric_scale<span class="token punctuation">,</span>        datetime_precision   <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span>  <span class="token keyword">where</span> table_name <span class="token operator">=</span> <span class="token string">'t_aj'</span>    <span class="token operator">AND</span> table_schema <span class="token operator">=</span> <span class="token string">'db_test'</span><span class="token punctuation">;</span><span class="token comment">--查询字段名、类型、注释</span><span class="token keyword">select</span>    a<span class="token punctuation">.</span>attname <span class="token keyword">as</span> name<span class="token punctuation">,</span>     <span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span>format_type <span class="token punctuation">(</span>a<span class="token punctuation">.</span>atttypid<span class="token punctuation">,</span> a<span class="token punctuation">.</span>atttypmod<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'character varying'</span> <span class="token punctuation">,</span><span class="token string">'varchar'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'integer'</span><span class="token punctuation">,</span><span class="token string">'int4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' without time zone'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">type</span><span class="token punctuation">,</span>    col_description<span class="token punctuation">(</span>a<span class="token punctuation">.</span>attrelid<span class="token punctuation">,</span> a<span class="token punctuation">.</span>attnum<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">comment</span><span class="token keyword">from</span> pg_class <span class="token keyword">as</span> c<span class="token punctuation">,</span>     pg_attribute <span class="token keyword">as</span> a<span class="token keyword">where</span> c<span class="token punctuation">.</span>relname <span class="token operator">=</span> <span class="token string">'t_aj'</span>  <span class="token operator">and</span> a <span class="token punctuation">.</span>attrelid <span class="token operator">=</span> c<span class="token punctuation">.</span>oid  <span class="token operator">and</span> a <span class="token punctuation">.</span>attnum <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">order</span> <span class="token keyword">by</span> attnum<span class="token punctuation">;</span><span class="token comment">--查询主键列</span><span class="token keyword">select</span>    pg_attribute<span class="token punctuation">.</span>attname <span class="token keyword">as</span> colname<span class="token punctuation">,</span>    pg_type<span class="token punctuation">.</span>typname <span class="token keyword">as</span> typename<span class="token punctuation">,</span>    pg_constraint<span class="token punctuation">.</span>conname <span class="token keyword">as</span> pk_name<span class="token keyword">from</span>    pg_constraint<span class="token keyword">inner</span> <span class="token keyword">join</span> pg_class <span class="token keyword">on</span> pg_constraint<span class="token punctuation">.</span>conrelid <span class="token operator">=</span> pg_class<span class="token punctuation">.</span>oid<span class="token keyword">inner</span> <span class="token keyword">join</span> pg_attribute <span class="token keyword">on</span> pg_attribute<span class="token punctuation">.</span>attrelid <span class="token operator">=</span> pg_class<span class="token punctuation">.</span>oid <span class="token operator">and</span> pg_attribute<span class="token punctuation">.</span>attnum <span class="token operator">=</span> pg_constraint<span class="token punctuation">.</span>conkey <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">inner</span> <span class="token keyword">join</span> pg_type <span class="token keyword">on</span> pg_type<span class="token punctuation">.</span>oid <span class="token operator">=</span> pg_attribute<span class="token punctuation">.</span>atttypid<span class="token keyword">where</span> pg_class<span class="token punctuation">.</span>relname <span class="token operator">=</span> <span class="token string">'t_aj'</span>  <span class="token operator">and</span> pg_constraint<span class="token punctuation">.</span>contype <span class="token operator">=</span> <span class="token string">'p'</span><span class="token punctuation">;</span><span class="token comment">--查询视图创建语句</span><span class="token keyword">select</span> pg_get_viewdef<span class="token punctuation">(</span><span class="token string">'db_ywst.v_aj'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">--查询依赖于某个表的视图</span><span class="token keyword">set</span> search_path <span class="token keyword">to</span> db_ywst<span class="token punctuation">;</span><span class="token keyword">select</span> rulename<span class="token punctuation">,</span>ev_class::regclass<span class="token punctuation">,</span>ev_class <span class="token keyword">from</span> pg_rewrite <span class="token keyword">where</span> oid <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> objid <span class="token keyword">from</span> pg_depend <span class="token keyword">where</span> refobjid<span class="token operator">=</span><span class="token string">'db_ywst.t_ms_aj'</span>::regclass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--查询视图用到的表</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> c<span class="token punctuation">.</span>view_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>table_name   <span class="token keyword">from</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>  a<span class="token punctuation">.</span>ev_class::regclass <span class="token keyword">as</span> view_name<span class="token punctuation">,</span>                 b<span class="token punctuation">.</span>refobjid::regclass <span class="token keyword">as</span> table_name<span class="token punctuation">,</span>                a<span class="token punctuation">.</span>ev_class           <span class="token keyword">from</span> pg_rewrite a<span class="token punctuation">,</span> pg_depend b         <span class="token keyword">where</span> a<span class="token punctuation">.</span>oid <span class="token operator">=</span> b<span class="token punctuation">.</span>objid           <span class="token operator">and</span> b<span class="token punctuation">.</span>deptype <span class="token operator">&lt;></span> <span class="token string">'i'</span>            <span class="token operator">and</span> b<span class="token punctuation">.</span>refobjsubid <span class="token operator">&lt;></span> <span class="token number">0</span>       <span class="token punctuation">)</span> c  <span class="token keyword">where</span> c<span class="token punctuation">.</span>ev_class <span class="token operator">=</span> <span class="token string">'db_ywst.v_aj'</span>::regclass<span class="token punctuation">;</span></code></pre><h3 id="向表中插入数据"><a href="#向表中插入数据" class="headerlink" title="向表中插入数据"></a>向表中插入数据</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--insert into</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token string">"db_test"</span><span class="token punctuation">.</span><span class="token string">"t_linych"</span> <span class="token punctuation">(</span><span class="token string">"n_id"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">,</span> <span class="token string">"c_name"</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'31'</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">,</span> <span class="token string">'7313'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--批量insert into</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token string">"db_test"</span><span class="token punctuation">.</span><span class="token string">"t_linych"</span> <span class="token punctuation">(</span><span class="token string">"n_id"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">,</span> <span class="token string">"c_name"</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'oooo'</span><span class="token punctuation">,</span> <span class="token string">'9207'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'hhhh'</span><span class="token punctuation">,</span> <span class="token string">'8575'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'32'</span><span class="token punctuation">,</span> <span class="token string">'qqqq'</span><span class="token punctuation">,</span> <span class="token string">'3843'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'jjjj'</span><span class="token punctuation">,</span> <span class="token string">'7886'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'16'</span><span class="token punctuation">,</span> <span class="token string">'17'</span><span class="token punctuation">,</span> <span class="token string">'wwww'</span><span class="token punctuation">,</span> <span class="token string">'6787'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--insert into from</span><span class="token keyword">insert</span> <span class="token keyword">into</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">select</span> to_number<span class="token punctuation">(</span>c_bh<span class="token punctuation">,</span><span class="token string">'9999999999999999999'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_ajzlb<span class="token punctuation">,</span> c_ah<span class="token punctuation">,</span> n_ajjzjd <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_aj <span class="token keyword">limit</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">--copy,copy to 的文件存储在数据库所在的服务器上</span>copy <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">to</span> <span class="token string">'/home/gpadmin/db_test.t_linych.dat'</span><span class="token punctuation">;</span>copy db_test<span class="token punctuation">.</span>t_linych <span class="token keyword">from</span> <span class="token string">'/home/gpadmin/db_test.t_linych.dat'</span><span class="token punctuation">;</span><span class="token comment">--dump </span><span class="token comment">--dump指令需要在数据库服务器上psql中执行</span><span class="token comment">--dump出的文件存储在数据库所在的服务器上,恢复时可以用psql指令执行备份文件(前提是以sql形式备份，如果是以流的方式备份，则需要用其他方式恢复)</span>pg_dump <span class="token operator">-</span>h172<span class="token punctuation">.</span><span class="token number">23.33</span><span class="token number">.4</span> <span class="token operator">-</span>p <span class="token number">6543</span> <span class="token operator">-</span>U sa <span class="token operator">-</span>d abase <span class="token operator">-</span>t db_dat_wb<span class="token punctuation">.</span>dim<span class="token operator">*</span> <span class="token operator">-</span>a <span class="token operator">-</span>f <span class="token operator">~</span><span class="token operator">/</span>db_dat_wb_20190215<span class="token punctuation">.</span>dat<span class="token punctuation">;</span></code></pre><h3 id="VACUUM"><a href="#VACUUM" class="headerlink" title="VACUUM"></a>VACUUM</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--只将磁盘空间标记为可用(删除的数据如果在末端，会直接释放磁盘空间)</span>vacuum db_test<span class="token punctuation">.</span>t_linych<span class="token comment">--该命令会为指定的表或索引重新生成一个数据文件，并将原有文件中可用的数据导入到新文件中，之后再删除原来的数据文件。</span><span class="token comment">--因此在导入过程中，要求当前磁盘有更多的空间可用于此操作。由此可见，该命令的执行效率相对较低。</span>vacuum <span class="token keyword">full</span> db_test<span class="token punctuation">.</span>t_linych</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> abase </tag>
            
            <tag> postgre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>abase数据库运维常用命令</title>
      <link href="/2023/01/30/database/abase/abase%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/30/database/abase/abase%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着生产环境下abase数据库越来越多，使用过程中会面临下面几个问题，本文针对这些问题进行一些总结。</p><ol><li>数据库出现性能问题如何排查</li><li>日常需要进行哪些数据库维护操作</li><li>数据库备份恢复该使用哪种方式</li></ol><p>[TOC]</p><h1 id="一、性能问题排查"><a href="#一、性能问题排查" class="headerlink" title="一、性能问题排查"></a>一、性能问题排查</h1><h2 id="1-1-查询锁等待"><a href="#1-1-查询锁等待" class="headerlink" title="1.1 查询锁等待"></a>1.1 查询锁等待</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询锁等待的进程号</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_locks <span class="token keyword">where</span> granted<span class="token operator">=</span><span class="token string">'f'</span><span class="token punctuation">;</span><span class="token comment">-- 查询是哪个进程阻塞的</span><span class="token keyword">select</span> pg_blocking_pids<span class="token punctuation">(</span>进程号<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 多次查询上述命令，直到结果为&#123;&#125;,确定最初是哪个进程导致的问题。</span><span class="token comment">-- 查看进程正在执行的sql</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity <span class="token keyword">where</span> pid<span class="token operator">=</span>进程号<span class="token punctuation">;</span></code></pre><h2 id="1-2-查询耗cpu高的sql（实时）"><a href="#1-2-查询耗cpu高的sql（实时）" class="headerlink" title="1.2 查询耗cpu高的sql（实时）"></a>1.2 查询耗cpu高的sql（实时）</h2><p>postgres 数据库是多进程数据库，每个数据库连接是单独的进程。可以通过linux的命令查看耗cpu高的进程。</p><p>如top命令，按c可以看进程的更多信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash">  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND               <span class="token number">29992</span> appuser   <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">16</span>.661g <span class="token number">787440</span> <span class="token number">768960</span> R  <span class="token number">99.7</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:45.98 postgres: sa abase <span class="token punctuation">[</span>local<span class="token punctuation">]</span> SELECT  </code></pre><p>或使用pidstat命令，获取占用cpu高的进程。</p><pre class="language-none"><code class="language-none">pidstat -u 5 1 平均时间:   UID       PID    %usr %system  %guest    %CPU   CPU  Command平均时间:  1007     29992   89.63    9.00    0.00   98.63     -  postgres平均时间:     0     32765    0.20    0.20    0.00    0.39     -  java平均时间:  1007     42047    0.39    1.37    0.00    1.76     -  pidstat平均时间:  1007     42062   36.59    3.72    0.00   40.31     -  postgres</code></pre><p>得到耗cpu的进程pid后，到数据库中查看具体执行的sql语句。 </p><pre class="language-sql" data-language="sql"><code class="language-sql">abase<span class="token operator">=</span><span class="token comment"># select pid,usename,application_name,client_addr,state,query from pg_stat_activity where pid = 29992;</span>  pid  <span class="token operator">|</span> usename <span class="token operator">|</span> application_name <span class="token operator">|</span> client_addr <span class="token operator">|</span> state  <span class="token operator">|</span>               query               <span class="token comment">-------+---------+------------------+-------------+--------+-----------------------------------</span> <span class="token number">29992</span> <span class="token operator">|</span> sa      <span class="token operator">|</span> psql             <span class="token operator">|</span>             <span class="token operator">|</span> active <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ywst<span class="token punctuation">.</span>t1<span class="token punctuation">,</span>ywst<span class="token punctuation">.</span>t1 t2<span class="token punctuation">;</span></code></pre><h2 id="1-3-查询耗io高的sql（实时）"><a href="#1-3-查询耗io高的sql（实时）" class="headerlink" title="1.3 查询耗io高的sql（实时）"></a>1.3 查询耗io高的sql（实时）</h2><p>使用pidstat命令，获取占用io高的进程。  </p><pre class="language-bash" data-language="bash"><code class="language-bash">pidstat -d <span class="token number">5</span> <span class="token number">1</span> <span class="token number">10</span>时22分38秒   <span class="token environment constant">UID</span>       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>      <span class="token number">4196</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>      <span class="token number">4209</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>      <span class="token number">4211</span>      <span class="token number">0.00</span>     <span class="token number">23.44</span>     <span class="token number">15.62</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>     <span class="token number">18947</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>     <span class="token number">18948</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>     <span class="token number">18949</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>     <span class="token number">18950</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres<span class="token number">10</span>时22分43秒  <span class="token number">1007</span>     <span class="token number">18964</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres平均时间:   <span class="token environment constant">UID</span>       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command平均时间:  <span class="token number">1007</span>      <span class="token number">4196</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>      <span class="token number">4209</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>      <span class="token number">4211</span>      <span class="token number">0.00</span>     <span class="token number">23.44</span>     <span class="token number">15.62</span>  postgres平均时间:  <span class="token number">1007</span>     <span class="token number">18947</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>     <span class="token number">18948</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>     <span class="token number">18949</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>     <span class="token number">18950</span>      <span class="token number">0.00</span>      <span class="token number">3.12</span>      <span class="token number">0.00</span>  postgres平均时间:  <span class="token number">1007</span>     <span class="token number">18964</span>      <span class="token number">0.00</span>      <span class="token number">1.56</span>      <span class="token number">0.00</span>  postgres</code></pre><p>得到进程号后，到数据库中查看具体执行的sql语句。与确定耗cpu的sql方法一致。</p><h2 id="1-4-查询慢sql（历史）"><a href="#1-4-查询慢sql（历史）" class="headerlink" title="1.4 查询慢sql（历史）"></a>1.4 查询慢sql（历史）</h2><h3 id="方法一-设置数据库参数"><a href="#方法一-设置数据库参数" class="headerlink" title="方法一 设置数据库参数"></a>方法一 设置数据库参数</h3><p>设置log_min_duration_statement参数，在sql执行时间超过参数值时记录到数据库日志中。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 记录所有类型执行时间超过3秒的sql</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> log_statement <span class="token operator">=</span> <span class="token string">'all'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> log_min_duration_statement<span class="token operator">=</span><span class="token string">'3000'</span><span class="token punctuation">;</span></code></pre><h3 id="方法二-使用pg-stat-statements插件"><a href="#方法二-使用pg-stat-statements插件" class="headerlink" title="方法二 使用pg_stat_statements插件"></a>方法二 使用pg_stat_statements插件</h3><p>插件会对数据库性能带来一定影响（影响不大），但记录的信息会很详细，包括sql执行次数，平均执行时间等信息。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改配置文件，注意shared_preload_libraries参数若已有值，则增加pg_stat_statements，用逗号分隔。</span>shared_preload_libraries <span class="token operator">=</span> <span class="token string">'pg_stat_statements'</span>pg_stat_statements<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">10000</span>pg_stat_statements<span class="token punctuation">.</span>track <span class="token operator">=</span> <span class="token keyword">all</span><span class="token comment">-- 重启数据库后，创建插件。</span><span class="token keyword">create</span> extension pg_stat_statements<span class="token punctuation">;</span><span class="token comment">-- 查询慢sql</span><span class="token keyword">select</span> query<span class="token punctuation">,</span> calls<span class="token punctuation">,</span> total_time<span class="token punctuation">,</span> <span class="token punctuation">(</span>total_time<span class="token operator">/</span>calls<span class="token punctuation">)</span> <span class="token keyword">as</span> average<span class="token punctuation">,</span> <span class="token keyword">rows</span><span class="token punctuation">,</span> <span class="token number">100.0</span> <span class="token operator">*</span> shared_blks_hit<span class="token operator">/</span><span class="token keyword">nullif</span><span class="token punctuation">(</span>shared_blks_hit <span class="token operator">+</span> shared_blks_read<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> hit_percent <span class="token keyword">from</span> pg_stat_statements <span class="token keyword">order</span> <span class="token keyword">by</span> average <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 清空历史慢sql记录</span><span class="token keyword">select</span> pg_stat_statements_reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-5-断开数据库会话进程"><a href="#1-5-断开数据库会话进程" class="headerlink" title="1.5 断开数据库会话进程"></a>1.5 断开数据库会话进程</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方法1：数据库中执行，推荐方式。下面2个命令区别是cancle取消查询语句，不会断开会话，但有时会不成功。terminate是中断会话，回滚未提交事务。</span><span class="token keyword">select</span> pg_cancle_backend<span class="token punctuation">(</span>进程号<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> pg_terminate_backend<span class="token punctuation">(</span>进程号<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 方法2：操作系统下执行，严禁执行Kill -9 进程号，否则会导致数据库postmaster主进程重启。仅当数据库无法连接时使用，仅可针对数据库会话进程执行。</span><span class="token keyword">kill</span> 进程号</code></pre><h2 id="1-6-批量断开某类数据库会话进程"><a href="#1-6-批量断开某类数据库会话进程" class="headerlink" title="1.6 批量断开某类数据库会话进程"></a>1.6 批量断开某类数据库会话进程</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 显示正在执行查询语句（sql以select开头）的进程信息 ，并断开进程。</span><span class="token keyword">select</span> pg_terminate_backend<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity <span class="token keyword">where</span> state<span class="token operator">=</span><span class="token string">'active'</span> <span class="token operator">and</span> lower<span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'select%'</span> <span class="token operator">and</span> pid <span class="token operator">&lt;></span> pg_backend_pid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或操作系统下执行，仅当数据库无法正常连接时使用。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-- 如下列命令会杀掉全部6543端口数据库下的select进程<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token variable"><span class="token variable">`</span><span class="token function">head</span> -1 /tmp/.s.PGSQL.6543.lock<span class="token variable">`</span></span><span class="token operator">|</span><span class="token function">grep</span> SELECT<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span></code></pre><h2 id="1-7-查看sql执行计划"><a href="#1-7-查看sql执行计划" class="headerlink" title="1.7 查看sql执行计划"></a>1.7 查看sql执行计划</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看查询语句执行计划</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token comment">-- 查看查询语句执行计划，并显示实际执行情况。增加analyze选项，sql语句会被实际执行。</span><span class="token keyword">explain</span> <span class="token keyword">analyze</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token comment">-- 查看更新/删除/插入语句执行计划，并显示实际执行情况。</span><span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">analyze</span> <span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">delete</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span></code></pre><h2 id="1-8-查询表上有哪些索引"><a href="#1-8-查询表上有哪些索引" class="headerlink" title="1.8 查询表上有哪些索引"></a>1.8 查询表上有哪些索引</h2><p>查询pg_indexes获取表上有哪些索引</p><pre class="language-sql" data-language="sql"><code class="language-sql">abase<span class="token operator">=</span><span class="token comment"># select * from pg_indexes where schemaname='msaj' and tablename='t_ms_aj_jc';</span> schemaname <span class="token operator">|</span> tablename  <span class="token operator">|</span>    indexname     <span class="token operator">|</span> <span class="token keyword">tablespace</span> <span class="token operator">|</span>                               indexdef<span class="token comment">------------+------------+------------------+------------+-----------------------------------------------------------------------</span> msaj       <span class="token operator">|</span> t_ms_aj_jc <span class="token operator">|</span> i_ms_aj_jc_jbfy4 <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy4 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span> msaj       <span class="token operator">|</span> t_ms_aj_jc <span class="token operator">|</span> i_ms_aj_jc_jbfy2 <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy2 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span> msaj       <span class="token operator">|</span> t_ms_aj_jc <span class="token operator">|</span> i_ms_aj_jc_jbfy1 <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy1 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span> msaj       <span class="token operator">|</span> t_ms_aj_jc <span class="token operator">|</span> i_ms_aj_jc_jbfy  <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span></code></pre><p>查询pg_index获取表上有哪些索引，以及索引状态等信息。修改WHERE c.oid=’msaj.t_ms_aj_jc’::regclass 部分的模式名表名。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c2<span class="token punctuation">.</span>relname<span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisprimary<span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisunique<span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisclustered<span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisvalid<span class="token punctuation">,</span> pg_catalog<span class="token punctuation">.</span>pg_get_indexdef<span class="token punctuation">(</span>i<span class="token punctuation">.</span>indexrelid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  pg_catalog<span class="token punctuation">.</span>pg_get_constraintdef<span class="token punctuation">(</span>con<span class="token punctuation">.</span>oid<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contype<span class="token punctuation">,</span> condeferrable<span class="token punctuation">,</span> condeferred<span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisreplident<span class="token punctuation">,</span> c2<span class="token punctuation">.</span>reltablespace<span class="token keyword">FROM</span> pg_catalog<span class="token punctuation">.</span>pg_class c<span class="token punctuation">,</span> pg_catalog<span class="token punctuation">.</span>pg_class c2<span class="token punctuation">,</span> pg_catalog<span class="token punctuation">.</span>pg_index i  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> pg_catalog<span class="token punctuation">.</span>pg_constraint con <span class="token keyword">ON</span> <span class="token punctuation">(</span>conrelid <span class="token operator">=</span> i<span class="token punctuation">.</span>indrelid <span class="token operator">AND</span> conindid <span class="token operator">=</span> i<span class="token punctuation">.</span>indexrelid <span class="token operator">AND</span> contype <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>oid<span class="token operator">=</span><span class="token string">'msaj.t_ms_aj_jc'</span>::regclass <span class="token operator">AND</span> c<span class="token punctuation">.</span>oid <span class="token operator">=</span> i<span class="token punctuation">.</span>indrelid <span class="token operator">AND</span> i<span class="token punctuation">.</span>indexrelid <span class="token operator">=</span> c2<span class="token punctuation">.</span>oid<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> i<span class="token punctuation">.</span>indisprimary <span class="token keyword">DESC</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>indisunique <span class="token keyword">DESC</span><span class="token punctuation">,</span> c2<span class="token punctuation">.</span>relname<span class="token punctuation">;</span>     relname      <span class="token operator">|</span> indisprimary <span class="token operator">|</span> indisunique <span class="token operator">|</span> indisclustered <span class="token operator">|</span> indisvalid <span class="token operator">|</span>                             pg_get_indexdef                             <span class="token operator">|</span> pg_get_constraintdef <span class="token operator">|</span> contype <span class="token operator">|</span> condeferrable <span class="token operator">|</span> condeferred <span class="token operator">|</span> indisreplident <span class="token operator">|</span> reltablespace<span class="token comment">------------------+--------------+-------------+----------------+------------+-------------------------------------------------------------------------+----------------------+---------+---------------+-------------+----------------+---------------</span> t_ms_aj_jc_pkey  <span class="token operator">|</span> t            <span class="token operator">|</span> t           <span class="token operator">|</span> f              <span class="token operator">|</span> t          <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> t_ms_aj_jc_pkey <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>     <span class="token operator">|</span> p       <span class="token operator">|</span> f             <span class="token operator">|</span> f           <span class="token operator">|</span> f              <span class="token operator">|</span>             <span class="token number">0</span> i_ms_aj_jc_jbfy  <span class="token operator">|</span> f            <span class="token operator">|</span> f           <span class="token operator">|</span> f              <span class="token operator">|</span> f          <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span>    <span class="token operator">|</span>                      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span>             <span class="token operator">|</span> f              <span class="token operator">|</span>             <span class="token number">0</span> i_ms_aj_jc_jbfy1 <span class="token operator">|</span> f            <span class="token operator">|</span> f           <span class="token operator">|</span> f              <span class="token operator">|</span> f          <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy1 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span>   <span class="token operator">|</span>                      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span>             <span class="token operator">|</span> f              <span class="token operator">|</span>             <span class="token number">0</span> i_ms_aj_jc_jbfy2 <span class="token operator">|</span> f            <span class="token operator">|</span> f           <span class="token operator">|</span> f              <span class="token operator">|</span> f          <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy2 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span>   <span class="token operator">|</span>                      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span>             <span class="token operator">|</span> f              <span class="token operator">|</span>             <span class="token number">0</span> i_ms_aj_jc_jbfy4 <span class="token operator">|</span> f            <span class="token operator">|</span> f           <span class="token operator">|</span> f              <span class="token operator">|</span> t          <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i_ms_aj_jc_jbfy4 <span class="token keyword">ON</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">USING</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span>   <span class="token operator">|</span>                      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span>             <span class="token operator">|</span> f              <span class="token operator">|</span>             <span class="token number">0</span></code></pre><h2 id="1-9-创建-重建索引"><a href="#1-9-创建-重建索引" class="headerlink" title="1.9 创建/重建索引"></a>1.9 创建/重建索引</h2><p>创建索引和重建 的语法。若生产环境执行，需要增加CONCURRENTLY关键字，可以避免对表的独占锁锁定。reindex暂时不支持CONCURRENTLY并行方式（postgres12版本新增功能，abase6.0对应postgres11.1不支持），可以并行方式新建一个索引，然后删除旧索引。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 语法</span><span class="token keyword">CREATE</span> <span class="token punctuation">[</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">]</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span> CONCURRENTLY <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> name <span class="token punctuation">]</span> <span class="token keyword">ON</span> table_name <span class="token punctuation">[</span> <span class="token keyword">USING</span> method <span class="token punctuation">]</span>    <span class="token punctuation">(</span> &#123; column_name <span class="token operator">|</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span> &#125; <span class="token punctuation">[</span> <span class="token keyword">COLLATE</span> collation <span class="token punctuation">]</span> <span class="token punctuation">[</span> opclass <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> NULLS &#123; <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">LAST</span> &#125; <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">(</span> storage_parameter <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span>    <span class="token punctuation">[</span> <span class="token keyword">TABLESPACE</span> tablespace_name <span class="token punctuation">]</span>    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> predicate <span class="token punctuation">]</span>REINDEX <span class="token punctuation">[</span> <span class="token punctuation">(</span> VERBOSE <span class="token punctuation">)</span> <span class="token punctuation">]</span> &#123; <span class="token keyword">INDEX</span> <span class="token operator">|</span> <span class="token keyword">TABLE</span> <span class="token operator">|</span> <span class="token keyword">SCHEMA</span> <span class="token operator">|</span> <span class="token keyword">DATABASE</span> <span class="token operator">|</span> SYSTEM &#125; name<span class="token comment">-- 例子</span><span class="token keyword">create</span> <span class="token keyword">index</span> concurrently i_ms_aj_jc_jbfy <span class="token keyword">on</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">using</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建索引前可以临时设置较大的maintenance_work_mem加快索引创建速度，仅当前会话生效。</span><span class="token keyword">set</span> maintenance_work_mem<span class="token operator">=</span><span class="token string">'2GB'</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> concurrently i_ms_aj_jc_jbfy <span class="token keyword">on</span> msaj<span class="token punctuation">.</span>t_ms_aj_jc <span class="token keyword">using</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>c_jbfy<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-10-临时禁用某索引"><a href="#1-10-临时禁用某索引" class="headerlink" title="1.10 临时禁用某索引"></a>1.10 临时禁用某索引</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改索引是否有效字段为false，禁用索引。禁用时新数据依然会维护这个索引，一般用来调试SQL执行计划。</span><span class="token keyword">update</span> pg_index <span class="token keyword">set</span> indisvalid<span class="token operator">=</span><span class="token boolean">false</span> <span class="token keyword">where</span> indexrelid<span class="token operator">=</span><span class="token string">'模式名.索引名'</span>::regclass<span class="token punctuation">;</span><span class="token comment">-- 修改索引是否有效字段为true，恢复索引。</span><span class="token keyword">update</span> pg_index <span class="token keyword">set</span> indisvalid<span class="token operator">=</span><span class="token boolean">true</span> <span class="token keyword">where</span> indexrelid<span class="token operator">=</span><span class="token string">'模式名.索引名'</span>::regclass<span class="token punctuation">;</span></code></pre><h1 id="二、其他日常维护操作"><a href="#二、其他日常维护操作" class="headerlink" title="二、其他日常维护操作"></a>二、其他日常维护操作</h1><h2 id="2-1-更新统计信息"><a href="#2-1-更新统计信息" class="headerlink" title="2.1 更新统计信息"></a>2.1 更新统计信息</h2><p>更新统计信息<code>analyze</code>命令，会在表级别增加<code>ShareUpdateExclusiveLock</code>锁。不影响正常的dml操作，若有必要可以在工作时间段执行。建议每周非业务时间执行一次。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 更新单张表统计信息</span><span class="token keyword">analyze</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 更新数据库下所有表统计信息</span><span class="token keyword">analyze</span><span class="token punctuation">;</span><span class="token comment">-- 更新统计信息前可以临时设置较大的maintenance_work_mem加快分析速度。</span><span class="token keyword">set</span> maintenance_work_mem<span class="token operator">=</span><span class="token string">'2GB'</span><span class="token punctuation">;</span><span class="token keyword">set</span> max_parallel_maintenance_workers <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">analyze</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-整理碎片"><a href="#2-2-整理碎片" class="headerlink" title="2.2 整理碎片"></a>2.2 整理碎片</h2><p>整理碎片<code>vacuum ful</code>l命令，会在表级别增加<code>AccessExclusiveLock</code>锁。影响表的其他访问，必须在非工作时段执行。整理碎片会自动重建表上的索引，建议一个月执行一次。需要观察执行耗时，若耗时较长可分多个会话并行执行（每个客户端整理部分表）。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 整理单表碎片，并更新统计信息。</span>vacuum <span class="token keyword">full</span> <span class="token keyword">analyze</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 对数据库下所有表进行碎片整理，并更新统计信息</span>vacuum <span class="token keyword">full</span> <span class="token keyword">analyze</span><span class="token punctuation">;</span><span class="token comment">-- 整理碎片前可以临时设置较大的maintenance_work_mem加快整理速度。</span><span class="token keyword">set</span> maintenance_work_mem<span class="token operator">=</span><span class="token string">'2GB'</span><span class="token punctuation">;</span><span class="token keyword">set</span> max_parallel_maintenance_workers <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>vacuum <span class="token keyword">full</span> <span class="token keyword">analyze</span><span class="token punctuation">;</span></code></pre><h2 id="2-3-清理表内历史版本数据"><a href="#2-3-清理表内历史版本数据" class="headerlink" title="2.3 清理表内历史版本数据"></a>2.3 清理表内历史版本数据</h2><p>与<code>vacuum full</code>不同，vacuum仅对表内历史版本数据进行清理，并不回收空间。执行时会在表级别增加<code>ShareUpdateExclusiveLock</code>锁。不影响正常的dml操作，若有必要可以在工作时间段执行。建议每周非业务时间执行一次。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 清理单张表</span>vacuum 表名<span class="token punctuation">;</span><span class="token comment">-- 对数据库下所有表进行清理</span>vacuum<span class="token punctuation">;</span><span class="token comment">-- 清理前可以临时设置较大的maintenance_work_mem加快清理速度。</span><span class="token keyword">set</span> maintenance_work_mem<span class="token operator">=</span><span class="token string">'2GB'</span><span class="token punctuation">;</span><span class="token keyword">set</span> max_parallel_maintenance_workers <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>vacuum <span class="token keyword">analyze</span><span class="token punctuation">;</span></code></pre><h2 id="2-4-冻结表内事物id"><a href="#2-4-冻结表内事物id" class="headerlink" title="2.4 冻结表内事物id"></a>2.4 冻结表内事物id</h2><p>abase数据库根据行内隐藏列xmin、xmax记录的事物id，以及事物的提交记录判断记录的可见性。而事物id是32位的整数，40亿+循环使用。为了避免事物无法判断新旧（即事物回卷），数据库需要讲过老的事物id进行冻结。表的年龄可以认为是表上最早事物id距离当前事物id的距离。默认情况当表年龄达到2亿，自动运行autovacuum进程时，会触发<code>vacuum freeze</code>操作。</p><p><code>vacuum freeze</code>会在表级别增加<code>ShareUpdateExclusiveLock</code>，行级别增加<code>RowExclusiveLock</code>，对系统影响较大。因此我们需要定期监控表年龄增长情况，及时手工运行<code>vacuum freeze;</code>命令。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 冻结单张表</span>vacuum freeze 表名<span class="token punctuation">;</span><span class="token comment">-- 对数据库下所有表进行清理</span>vacuum freeze<span class="token punctuation">;</span><span class="token comment">-- 清理前可以临时设置较大的maintenance_work_mem加快清理速度。</span><span class="token keyword">set</span> maintenance_work_mem<span class="token operator">=</span><span class="token string">'2GB'</span><span class="token punctuation">;</span><span class="token keyword">set</span> max_parallel_maintenance_workers <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>vacuum freeze<span class="token punctuation">;</span></code></pre><p> <font color=#ff0000 face="黑体"><strong>注：若未定期检查，导致生产数据库表年龄达到2亿，触发了autovacuum的freeze操作，影响数据库使用时。可临时修改autovacuum_freeze_max_age为更大的值，如4亿，修改后重启数据库生效。这样数据库暂时就不会触发freeze操作。待周末非工作时间，手工执行<code>vacuum freeze</code>冻结事物id。冻结后，需要将autovacuum_freeze_max_age改回2亿。</strong> </font> </p><h2 id="2-5-查看年龄过大的表"><a href="#2-5-查看年龄过大的表" class="headerlink" title="2.5 查看年龄过大的表"></a>2.5 查看年龄过大的表</h2><p>当表年龄超过1亿时，在非工作时间执行<code>vacuum freeze;</code>冻结表上事物id。可以运行下列语句，查看年龄大于1亿的表。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> current_database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nspname<span class="token punctuation">,</span>     <span class="token keyword">case</span> relkind <span class="token keyword">when</span> $$r$$ <span class="token keyword">then</span> $$ordinary <span class="token keyword">table</span>$$ <span class="token keyword">when</span> $$t$$ <span class="token keyword">then</span> $$toast <span class="token keyword">table</span>$$ <span class="token keyword">end</span> <span class="token keyword">as</span> relkind<span class="token punctuation">,</span>    relname<span class="token punctuation">,</span>    age<span class="token punctuation">(</span>relfrozenxid<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>substring<span class="token punctuation">(</span>reloptions::<span class="token keyword">text</span><span class="token punctuation">,</span>$$autovacuum_freeze_max_age<span class="token operator">=</span><span class="token punctuation">(</span>\d<span class="token operator">+</span><span class="token punctuation">)</span>$$<span class="token punctuation">)</span>::int8<span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token punctuation">(</span>substring<span class="token punctuation">(</span>reloptions::<span class="token keyword">text</span><span class="token punctuation">,</span>$$autovacuum_freeze_max_age<span class="token operator">=</span><span class="token punctuation">(</span>\d<span class="token operator">+</span><span class="token punctuation">)</span>$$<span class="token punctuation">)</span>::int8<span class="token punctuation">)</span><span class="token operator">-</span>age<span class="token punctuation">(</span>relfrozenxid<span class="token punctuation">)</span>          <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token keyword">select</span> setting <span class="token keyword">from</span> pg_settings <span class="token keyword">where</span> name<span class="token operator">=</span>$$autovacuum_freeze_max_age$$<span class="token punctuation">)</span>::int8 <span class="token operator">-</span> age<span class="token punctuation">(</span>relfrozenxid<span class="token punctuation">)</span>     <span class="token keyword">end</span> <span class="token keyword">as</span> age_remain<span class="token punctuation">,</span>$$vacuum freeze $$<span class="token operator">||</span>nspname<span class="token operator">||</span>$$<span class="token punctuation">.</span>$$<span class="token operator">||</span>relname<span class="token operator">||</span>$$<span class="token punctuation">;</span>$$ <span class="token keyword">as</span> cmd<span class="token keyword">from</span> pg_class t2 <span class="token keyword">join</span> pg_namespace t3 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>relnamespace<span class="token operator">=</span>t3<span class="token punctuation">.</span>oid <span class="token keyword">where</span> t2<span class="token punctuation">.</span>relkind <span class="token operator">in</span> <span class="token punctuation">(</span>$$t$$<span class="token punctuation">,</span> $$r$$<span class="token punctuation">)</span> <span class="token operator">and</span> t2<span class="token punctuation">.</span>relname <span class="token operator">LIKE</span> $$t_<span class="token operator">%</span>$$ <span class="token operator">and</span> age<span class="token punctuation">(</span>relfrozenxid<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100000000</span><span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">(</span>relfrozenxid<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><h1 id="三、备份恢复"><a href="#三、备份恢复" class="headerlink" title="三、备份恢复"></a>三、备份恢复</h1><h2 id="3-1-逻辑导出导入"><a href="#3-1-逻辑导出导入" class="headerlink" title="3.1 逻辑导出导入"></a>3.1 逻辑导出导入</h2><p>针对一些数据安全性要求低，故障时可以接受丢失当天数据的应用，可以采用pg_dump进行数据备份（更推荐3.2的备份方式）。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-- 备份-- 备份abase数据库pg_dump -Usa -dabase <span class="token operator">></span> abase.dmp-- 备份abase数据库下的ywst模式、db_aty模式pg_dump -Usa -dabase -n ywst -n db_aty <span class="token operator">></span> ywst_db_aty.dmp-- 备份abase数据库下的ywst.t1表、ywst.t2表pg_dump -Usa -dabase -t ywst.t1 -t ywst.t2 <span class="token operator">></span> t1_t2.dmp-- 备份用户、角色信息pg_dumpall -r <span class="token operator">></span> role.dmp-- 备份abase数据库建库建表语句（不包括索引约束）pg_dump -Usa -dabase --section<span class="token operator">=</span>pre-data-- 备份abase数据库的数据pg_dump -Usa -dabase --section<span class="token operator">=</span>data-- 备份abase数据库的索引及约束pg_dump -Usa -dabase --section<span class="token operator">=</span>post-data-- 恢复-- 是否需要提前创建库或模式，可以看一下备份文件开头是否有创建库或模式的命令。psql -Usa -dabase <span class="token operator">&lt;</span> 备份文件</code></pre><h2 id="3-2-备份恢复"><a href="#3-2-备份恢复" class="headerlink" title="3.2 备份恢复"></a>3.2 备份恢复</h2><p>abase数据库备份推荐使用安装包带的arterybase-wal-backup-linux-6.0.0工具，工具会开启数据库日志归档，配合每天晚上的基础备份，支持做基于时间点的恢复，可以恢复到任意故障时刻之前。适合数据安全级别高的应用，对磁盘空间的要求较大，需要存储大量归档日志。</p><pre class="language-bash" data-language="bash"><code class="language-bash">-- 工具基于abase的pg_basebackup命令实现，主要命令如下。pg_basebackup -D <span class="token variable">$bakdir</span> -Ft -z -U <span class="token variable">$&#123;PGUSER&#125;</span> -p <span class="token variable">$&#123;PGPORT&#125;</span></code></pre><p>具体工具的使用及恢复方法见《ArteryBase基于事务日志的增量备份工具使用说明.pdf》。</p><p><strong>注：归档日志无法配合pg_dump进行数据恢复，需要使用pg_basebackup进行基础备份。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> abase </tag>
            
            <tag> postgre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java性能优化</title>
      <link href="/2023/01/29/java/java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2023/01/29/java/java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="一、接口性能优化的11个小技巧"><a href="#一、接口性能优化的11个小技巧" class="headerlink" title="一、接口性能优化的11个小技巧"></a>一、接口性能优化的11个小技巧</h1><p><strong>前言</strong></p><p>接口性能优化对于从事后端开发的同学来说，肯定再熟悉不过了，因为它是一个跟开发语言无关的公共问题。</p><p>该问题说简单也简单，说复杂也复杂。</p><p>有时候，只需加个索引就能解决问题。</p><p>有时候，需要做代码重构。</p><p>有时候，需要增加缓存。</p><p>有时候，需要引入一些中间件，比如 Message Queue。</p><p>有时候，需要需要分库分表。</p><p>有时候，需要拆分服务。</p><p>等等。</p><p>导致接口性能问题的原因千奇百怪，不同的项目不同的接口，原因可能也不一样。</p><h2 id="1-索引"><a href="#1-索引" class="headerlink" title="1. 索引"></a><strong>1. 索引</strong></h2><p>接口性能优化大家第一个想到的可能是：<strong>优化索引</strong>。</p><p>没错，优化索引的成本是最小的。</p><p>你通过查看线上日志或者监控报告，查到某个接口用到的某条 SQL 语句耗时比较长。</p><p>这时你可能会有下面这些疑问：</p><ul><li>该 SQL 语句加索引了没？</li><li>加的索引生效了没？</li><li>MySQL 选错索引了没？</li></ul><h3 id="1-1-没加索引"><a href="#1-1-没加索引" class="headerlink" title="1.1 没加索引"></a><strong>1.1 没加索引</strong></h3><p>SQL 语句中 where 条件的关键字段，或者 order by 后面的排序字段，忘了加索引。这个问题在项目中很常见。</p><p>项目刚开始的时候，由于表中的数据量小，加不加索引 SQL 查询性能差别不大。后来，随着业务的发展，表中数据量越来越多，就不得不加索引了。</p><p>可以通过命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span><span class="token punctuation">;</span></code></pre><p>能单独查看某张表的索引情况。</p><p>也可以通过命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span><span class="token punctuation">;</span></code></pre><p>查看整张表的建表语句，里面同样会显示索引情况。</p><p>通过 ALTER TABLE 命令可以添加索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过 CREATE INDEX 命令添加索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不过这里有一个需要注意的地方是：<strong>想通过命令修改索引，是不行的</strong>。</p><p>目前在 MySQL 中如果想要修改索引，只能先删除索引，再重新添加新的。</p><p>删除索引可以用 DROP INDEX 命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_name<span class="token punctuation">;</span></code></pre><p>用 DROP INDEX 命令也行：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span><span class="token punctuation">;</span></code></pre><h3 id="1-2-索引没生效"><a href="#1-2-索引没生效" class="headerlink" title="1.2 索引没生效"></a><strong>1.2 索引没生效</strong></h3><p>通过上面的命令我们已经能够确认索引是有的，但它生效了没？此时你内心或许会冒出这样一个疑问。</p><p>那么，如何查看索引有没有生效呢？</p><p><strong>答</strong>：可以使用 explain 命令，查看 MySQL 的执行计划，它会显示索引的使用情况。</p><p>例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> <span class="token keyword">where</span> code<span class="token operator">=</span><span class="token string">'002'</span><span class="token punctuation">;</span></code></pre><p>结果：</p><p><img src="%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E7%BB%93%E6%9E%9C.jpg"></p><p>通过这几列可以判断索引使用情况，执行计划包含列的含义如下图所示：</p><p><img src="%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.jpg"></p><p>说实话，SQL 语句没有走索引，排除没有建索引之外，最大的可能性是索引失效了。</p><p>下面说说索引失效的常见原因：</p><p><img src="%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0.jpg"></p><p>如果不是上面的这些原因，则需要再进一步排查一下其他原因。</p><h3 id="1-3-选错索引"><a href="#1-3-选错索引" class="headerlink" title="1.3 选错索引"></a><strong>1.3 选错索引</strong></h3><p>此外，你有没有遇到过这样一种情况：明明是同一条 SQL，只有入参不同而已。有的时候走的索引 a，有的时候却走的索引 b？</p><p>没错，有时候 MySQL 会选错索引。</p><p>必要时可以使用 force index 来强制查询 SQL 走某个索引。至于为什么 MySQL 会选错索引，后面有专门的文章介绍的，这里先留点悬念。</p><h2 id="2-SQL-优化"><a href="#2-SQL-优化" class="headerlink" title="2. SQL 优化"></a><strong>2. SQL 优化</strong></h2><p>如果优化了索引之后，也没啥效果。接下来试着优化一下 SQL 语句，因为它的改造成本相对于 Java 代码来说也要小得多。</p><p>下面给大家列举了 SQL 优化的 15 个小技巧：</p><p><img src="SQL%E4%BC%98%E5%8C%96%E5%B0%8F%E6%8A%80%E5%B7%A7.jpg"></p><h2 id="3-远程调用"><a href="#3-远程调用" class="headerlink" title="3. 远程调用"></a><strong>3. 远程调用</strong></h2><p>很多时候，我们需要在某个接口中，调用其他服务的接口。</p><p>比如有这样的业务场景：在用户信息查询接口中需要返回：用户名称、性别、等级、头像、积分、成长值等信息。</p><p>而用户名称、性别、等级、头像在用户服务中，积分在积分服务中，成长值在成长值服务中。为了汇总这些数据统一返回，需要另外提供一个对外接口服务。</p><p>于是，用户信息查询接口需要调用<strong>用户查询接口</strong>、<strong>积分查询接口</strong>和<strong>成长值查询接口</strong>，然后汇总数据统一返回。</p><p>调用过程如下图所示：</p><p><img src="%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3.jpg"></p><p>调用远程接口总耗时 530ms = 200ms + 150ms + 180ms</p><p>显然这种串行调用远程接口性能是非常不好的，调用远程接口总的耗时为所有的远程接口耗时之和。</p><p>那么如何优化远程接口性能呢？</p><h3 id="3-1-并行调用"><a href="#3-1-并行调用" class="headerlink" title="3.1 并行调用"></a><strong>3.1 并行调用</strong></h3><p>上面说到，既然串行调用多个远程接口性能很差，为什么不改成并行呢？</p><p>如下图所示：</p><p><img src="%E5%B9%B6%E8%A1%8C.jpg"></p><p>调用远程接口总耗时 200ms = 200ms（即耗时最长的那次远程接口调用）</p><p>在 Java 8 之前可以通过实现 Callable 接口，获取线程返回结果。</p><p>Java 8 以后通过 CompleteFuture 类实现该功能。我们这里 以CompleteFuture 为例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span> userFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">getRemoteUserAndFill</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span> bonusFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">getRemoteBonusAndFill</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span> growthFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">getRemoteGrowthAndFill</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>userFuture<span class="token punctuation">,</span> bonusFuture<span class="token punctuation">,</span> growthFuture<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bonusFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    growthFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>温馨提醒：这两种方式别忘了使用线程池。示例中我用到了 executor，表示自定义的线程池，为了防止高并发场景下，出现线程过多的问题。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="3-2-数据异构"><a href="#3-2-数据异构" class="headerlink" title="3.2 数据异构"></a><strong>3.2 数据异构</strong></h3><p>上面说到的用户信息查询接口需要调用用户查询接口、积分查询接口 和 成长值查询接口，然后汇总数据统一返回。</p><p>那么，我们能不能把数据冗余一下，把用户信息、积分和成长值的数据统一存储到一个地方？比如 Redis，存的数据结构就是用户信息查询接口所需要的内容。然后通过用户id，直接从 Redis 中查询数据出来，不就 OK 了？</p><p>如果在高并发的场景下，为了提升接口性能，远程接口调用大概率会被去掉，而改成保存冗余数据的数据异构方案。</p><p><img src="%E6%95%B0%E6%8D%AE%E5%BC%82%E6%9E%84.jpg"></p><p>但需要注意的是，如果使用了数据异构方案，就可能会出现数据一致性问题。</p><p>用户信息、积分和成长值有更新的话，大部分情况下，会先更新到数据库，然后同步到Redis。但这种跨库的操作，可能会导致两边数据不一致的情况产生。</p><h2 id="4-重复调用"><a href="#4-重复调用" class="headerlink" title="4. 重复调用"></a><strong>4. 重复调用</strong></h2><p>重复调用在我们的日常工作代码中可以说随处可见，但如果没有控制好，会非常影响接口的性能。</p><h3 id="4-1-循环查数据库"><a href="#4-1-循环查数据库" class="headerlink" title="4.1 循环查数据库"></a><strong>4.1 循环查数据库</strong></h3><p>有时候，我们需要从指定的用户集合中，查询出有哪些是在数据库中已经存在的。</p><p>实现代码可以这样写：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> searchList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>searchList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-></span> result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里如果有 50 个用户，则需要循环 50 次去查询数据库。我们都知道，每查询一次数据库，就是一次远程调用。如果查询 50 次数据库，就有 50 次远程调用，这是非常耗时的操作。</p><p>那么，我们如何优化呢？</p><p>具体代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> searchList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>searchList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> ids <span class="token operator">=</span> searchList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>提供一个根据用户 Id 集合批量查询用户的接口，只远程调用一次，就能查询出所有的数据。</p><p>这里有个需要注意的地方是：Id 集合的大小要做限制，最好一次不要请求太多的数据。要根据实际情况而定，建议控制每次请求的记录条数在 500 以内。</p><h3 id="4-2-死循环"><a href="#4-2-死循环" class="headerlink" title="4.2 死循环"></a><strong>4.2 死循环</strong></h3><p>有些小伙伴看到这个标题，可能会感到有点意外，死循环也算？代码中不是应该避免死循环吗？为啥还是会产生死循环？</p><p>有时候死循环是我们自己写的，例如下面这段代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do samething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里使用了 while(true) 的循环调用，这种写法在 CAS 自旋锁中使用比较多。当满足 condition 等于 true 的时候，则自动退出该循环。</p><p>如果 condition 条件非常复杂，一旦出现判断不正确，或者少写了一些逻辑判断，就可能在某些场景下出现死循环的问题。</p><p>出现死循环，大概率是开发人员人为的 bug 导致的，不过这种情况很容易被测出来。</p><p>还有一种隐藏的比较深的死循环，是由于代码写的不太严谨导致的。如果用正常数据，可能测不出问题，但一旦出现异常数据，就会立即出现死循环。</p><h3 id="4-3-无限递归"><a href="#4-3-无限递归" class="headerlink" title="4.3 无限递归"></a><strong>4.3 无限递归</strong></h3><p>如果想要打印某个分类的所有父分类，可以用类似这样的递归方法实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCategory</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>category <span class="token operator">==</span> <span class="token keyword">null</span>       <span class="token operator">||</span> category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父分类名称："</span><span class="token operator">+</span> category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Category</span> parent <span class="token operator">=</span> categoryMapper<span class="token punctuation">.</span><span class="token function">getCategoryById</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printCategory</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>正常情况下，这段代码是没有问题的。但如果某次有人误操作，把某个分类的 parentId 指向了它自己，这样就会出现无限递归的情况。导致接口一直不能返回数据，最终会发生堆栈溢出。</p><p>建议：写递归方法时，设定一个递归的深度，比如：分类最大等级有 4 级，则深度可以设置为 4。然后在递归方法中做判断，如果深度大于 4 时，则自动返回，这样就能避免无限循环的情况。</p><h2 id="5-异步处理"><a href="#5-异步处理" class="headerlink" title="5. 异步处理"></a><strong>5. 异步处理</strong></h2><p>有时候，我们接口性能优化，需要重新梳理一下业务逻辑，看看是否有设计上不太合理的地方。</p><p>比如有个用户请求接口中，需要做<strong>业务操作</strong>、<strong>发站内通知</strong>和<strong>记录操作日志</strong>。为了实现起来比较方便，通常我们会将这些逻辑放在接口中同步执行，势必会对接口性能造成一定的影响。</p><p>接口内部流程图如下：</p><p><img src="%E6%8E%A5%E5%8F%A3%E5%86%85%E9%83%A8%E9%80%BB%E8%BE%91.jpg"></p><p>这个接口表面上看起来没有问题，但如果你仔细梳理一下业务逻辑，会发现只有业务操作才是核心逻辑，其他的功能都是非核心逻辑。</p><p>在这里有个原则就是：核心逻辑可以同步执行，同步写库。非核心逻辑，可以异步执行，异步写库。</p><p>上面这个例子中，发站内通知和用户操作日志功能，对实时性要求不高，即使晚点写库，用户无非是晚点收到站内通知，或者运营晚点看到用户操作日志，对业务影响不大，所以完全可以异步处理。</p><p>通常异步主要有两种：多线程和 Message Queue。</p><h3 id="5-1-线程池"><a href="#5-1-线程池" class="headerlink" title="5.1 线程池"></a><strong>5.1 线程池</strong></h3><p>使用线程池改造之后，接口逻辑如下：</p><p><img src="%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B.jpg"></p><p>发站内通知和用户操作日志功能，被提交到了两个单独的线程池中。</p><p>这样接口中重点关注的是业务操作，把其他的逻辑交给线程异步执行，这样改造之后，让接口性能瞬间提升了。</p><p>但使用线程池有个小问题就是：如果服务器重启了，或者是需要被执行的功能出现异常了，无法重试，会丢数据。</p><p>那么这个问题该怎么办呢？</p><h3 id="5-2-MessageQueue"><a href="#5-2-MessageQueue" class="headerlink" title="5.2 MessageQueue"></a><strong>5.2 MessageQueue</strong></h3><p>使用 MessageQueue 改造之后，接口逻辑如下：</p><p><img src="%E4%BD%BF%E7%94%A8mq%E6%B5%81%E7%A8%8B.jpg"></p><p>对于发站内通知和用户操作日志功能，在接口中并没真正实现，它只发送了 Message Queue 消息到 MQ 服务器。然后由 MQ 消费者消费消息时，才真正的执行这两个功能。</p><p>这样改造之后，接口性能同样提升了，因为发送 MQ 消息速度是很快的，我们只需关注业务操作的代码即可。</p><h2 id="6-避免大事务"><a href="#6-避免大事务" class="headerlink" title="6. 避免大事务"></a><strong>6. 避免大事务</strong></h2><p>很多小伙伴在使用 Spring 框架开发项目时，为了方便，喜欢使用 @Transactional 注解提供事务功能。</p><p>没错，使用 @Transactional 注解这种声明式事务的方式提供事务功能，确实能少写很多代码，提升开发效率。但也容易造成大事务，引发其他的问题。</p><p>下面用一张图看看大事务引发的问题。</p><p><img src="%E4%BA%8B%E5%8A%A1%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98.jpg"></p><p>从图中能够看出，大事务问题可能会造成接口超时，对接口的性能有直接的影响。</p><p>我们该如何优化大事务呢？</p><ul><li>少用 @Transactional 注解</li><li>将查询 (select) 方法放到事务外</li><li>事务中避免远程调用</li><li>事务中避免一次性处理太多数据</li><li>有些功能可以非事务执行</li><li>有些功能可以异步处理</li></ul><h2 id="7-锁粒度"><a href="#7-锁粒度" class="headerlink" title="7. 锁粒度"></a><strong>7. 锁粒度</strong></h2><p>在某些业务场景中，为了防止多个线程并发修改某个共享数据，造成数据异常。</p><p>为了解决并发场景下，多个线程同时修改数据，造成数据不一致的情况。通常情况下，我们会<strong>加锁</strong>。</p><p>但如果锁得不好，导致锁的粒度太粗，也会非常影响接口性能。</p><h3 id="7-1-synchronized"><a href="#7-1-synchronized" class="headerlink" title="7.1 synchronized"></a><strong>7.1 synchronized</strong></h3><p>在 Java 中提供了 synchronized 关键字给我们的代码加锁。</p><p>通常有两种写法：在<strong>方法上</strong>加锁和在<strong>代码块上</strong>加锁。</p><p>先看看如何在方法上加锁：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里加锁的目的是为了防止并发的情况下，创建了相同的目录，第二次会创建失败，影响业务功能。</p><p>但这种直接在方法上加锁，锁的粒度有点粗。因为 doSave 方法中的上传文件和发消息方法，是不需要加锁的。只有创建目录方法，才需要加锁。</p><p>我们都知道文件上传操作是非常耗时的。如果将整个方法加锁，那么需要等到整个方法执行完之后才能释放锁。显然，这会导致该方法的性能很差，变得得不偿失。</p><p>这时我们可以改成在代码块上加锁，具体代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样改造之后，锁的粒度一下子变小了，只有并发创建目录功能才加了锁。而创建目录是一个非常快的操作，即使加锁对接口的性能影响也不大。</p><p>最重要的是，其他的上传文件和发送消息功能，任然可以并发执行。</p><p>当然，这种做在单机版的服务中，是没有问题的。但现在部署的生产环境，为了保证服务的稳定性，一般情况下，同一个服务会被部署在多个节点中。如果哪天挂了一个节点，其他的节点服务任然可用。</p><p>多节点部署避免了因为某个节点挂了，导致服务不可用的情况。同时也能分摊整个系统的流量，避免系统压力过大。</p><p>同时它也带来了新的问题：synchronized 只能保证一个节点加锁是有效的，但如果有多个节点如何加锁呢?</p><p><strong>答</strong>：这就需要使用<strong>分布式锁</strong>了。目前主流的分布式锁包括 <strong>Redis 分布式锁</strong>、<strong>ZooKeeper 分布式锁</strong>和<strong>数据库分布式锁</strong>。</p><p>由于 ZooKeeper 分布式锁的性能不太好，真实业务场景用的不多。</p><h3 id="7-2-Redis-分布式锁"><a href="#7-2-Redis-分布式锁" class="headerlink" title="7.2 Redis 分布式锁"></a><strong>7.2 Redis 分布式锁</strong></h3><p>在分布式系统中，由于 Redis 分布式锁相对于更简单和高效成为了分布式锁的首选，被我们用到了很多实际业务场景当中。</p><p>使用 Redis 分布式锁的伪代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Redis 分布式锁伪代码</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>      <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>跟之前使用 synchronized 关键字加锁时一样，这里锁的范围也太大了。换句话说，就是锁的粒度太粗。这样会导致整个方法的执行效率很低。</p><p>其实只有创建目录的时候，才需要加分布式锁，其余代码根本不用加锁。</p><p>于是，我们需要优化一下代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>      <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码将加锁的范围缩小了，只有创建目录时才加了锁。这样看似简单的优化之后，接口性能能提升很多。说不定，会有意外的惊喜喔。</p><p>Redis 分布式锁虽说好用，但它在使用时，有很多注意的细节，隐藏了很多坑，如果稍不注意很容易踩中。</p><h3 id="7-3-数据库分布式锁"><a href="#7-3-数据库分布式锁" class="headerlink" title="7.3 数据库分布式锁"></a><strong>7.3 数据库分布式锁</strong></h3><p>MySQL 数据库中主要有三种锁：</p><ul><li><strong>表锁</strong>：加锁快，不会出现死锁。但锁定粒度大，发生锁冲突的概率最高，并发度最低；</li><li><strong>行锁</strong>：加锁慢，会出现死锁。但锁定粒度最小，发生锁冲突的概率最低，并发度也最高；</li><li><strong>间隙锁</strong>：开销和加锁时间界于表锁和行锁之间。它会出现死锁，锁定粒度界于表锁和行锁之间，并发度一般。</li></ul><p>并发度越高，意味着接口性能越好。</p><p>所以数据库锁的优化方向是：优先使用行锁，其次使用间隙锁，再其次使用表锁。</p><h2 id="8-分页处理"><a href="#8-分页处理" class="headerlink" title="8. 分页处理"></a><strong>8. 分页处理</strong></h2><p>有时候我会调用某个接口批量查询数据，比如：通过用户id批量查询出用户信息，然后给这些用户送积分。</p><p>但如果你一次性查询的用户数量太多了，比如一次查询 2000 个用户的数据。参数中传入了 2000 个用户的 id，远程调用接口，会发现该用户查询接口经常超时。</p><p>调用代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">remoteCallUser</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>众所周知，调用接口从数据库获取数据，是需要经过网络传输的。如果数据量太大，无论是获取数据的速度，还是网络传输受限于带宽，都会导致耗时时间比较长。</p><p>那么，这种情况要如何优化呢？</p><p><strong>答</strong>：分页处理。</p><p>将一次获取所有的数据的请求，改成分多次获取，每次只获取一部分用户的数据，最后进行合并和汇总。</p><p>其实，处理这个问题，要分为两种场景<strong>同步调用</strong>和<strong>异步调用</strong>。</p><h3 id="8-1-同步调用"><a href="#8-1-同步调用" class="headerlink" title="8.1 同步调用"></a><strong>8.1 同步调用</strong></h3><p>如果在 job 中需要获取 2000 个用户的信息，它要求只要能正确获取到数据就好，对获取数据的总耗时要求不太高。</p><p>但对每一次远程接口调用的耗时有要求，不能大于 500ms，不然会有邮件预警。</p><p>这时，我们可以同步分页调用批量查询用户信息接口。</p><p>具体示例代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> allIds <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> batchIds<span class="token operator">:</span>allIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">remoteCallUser</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>代码中我用的 Google 的 Guava 工具中的 Lists.partition 方法，用它来做分页简直太好用了，不然要巴拉巴拉写一大堆分页的代码。</p><h3 id="8-2-异步调用"><a href="#8-2-异步调用" class="headerlink" title="8.2 异步调用"></a><strong>8.2 异步调用</strong></h3><p>如果是在某个接口中需要获取 2000 个用户的信息，它考虑的就需要更多一些。</p><p>除了需要考虑远程调用接口的耗时之外，还需要考虑该接口本身的总耗时。也不能超时 500ms。这时候用上面的同步分页请求远程接口，肯定是行不通的。那么，只能使用异步调用了。</p><p>代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> allIds <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>allIds<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>   <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">remoteCallUser</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>使用 CompletableFuture 类，多个线程异步调用远程接口，最后汇总结果统一返回。</p><h2 id="9-加缓存"><a href="#9-加缓存" class="headerlink" title="9. 加缓存"></a><strong>9. 加缓存</strong></h2><p>解决接口性能问题，加缓存是一个非常高效的方法。</p><p>但不能为了缓存而缓存，还是要看具体的业务场景。毕竟加了缓存，会导致接口的复杂度增加，它会带来数据不一致问题。</p><p>在有些并发量比较低的场景中，比如用户下单，可以不用加缓存。</p><p>还有些场景，比如在商城首页显示商品分类的地方，假设这里的分类是调用接口获取到的数据，但页面暂时没有做静态化。</p><p>如果查询分类树的接口没有使用缓存，而直接从数据库查询数据，性能会非常差。</p><h3 id="9-1-Redis-缓存"><a href="#9-1-Redis-缓存" class="headerlink" title="9.1 Redis 缓存"></a><strong>9.1 Redis 缓存</strong></h3><p>通常情况下，我们使用最多的缓存可能是：Redis 和 memcached。</p><p>但对于 Java 应用来说，绝大多数都是使用的 Redis，所以接下来我们以 Redis 为例。</p><p>由于在关系型数据库，比如 MySQL 中，菜单是有上下级关系的。某个四级分类是某个三级分类的子分类，这个三级分类，又是某个二级分类的子分类，而这个二级分类，又是某个一级分类的子分类。</p><p>这种存储结构决定了，想一次性查出这个分类树，并非是一件非常容易的事情。这就需要使用程序递归查询了，如果分类多的话，这个递归是比较耗时的。</p><p>所以，如果每次都直接从数据库中查询分类树的数据，是一个非常耗时的操作。</p><p>这时我们可以使用缓存，大部分情况，接口都直接从缓存中获取数据。操作 Redis 可以使用成熟的框架，比如：Jedis 和 Redisson 等。</p><p>用 Jedis 伪代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> json <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">CategoryTree</span> categoryTree <span class="token operator">=</span> <span class="token class-name">JsonUtil</span><span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> categoryTree<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">queryCategoryTreeFromDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先从 Redis 中根据某个 key 查询是否有菜单数据。如果有则转换成对象，直接返回。如果 Redis 中没有查到菜单数据，则再从数据库中查询菜单数据，有则返回。</p><p>此外，我们还需要有个 job 每隔一段时间，从数据库中查询菜单数据，更新到 Redis 当中，这样以后每次都能直接从 Redis 中获取菜单的数据，而无需访问数据库了。<img src="redis%E7%BC%93%E5%AD%98.jpg"></p><p>这样改造之后，能快速的提升性能。</p><p>但这样做性能提升不是最佳的，还有其他的方案，我们一起看看下面的内容。</p><h3 id="9-2-二级缓存"><a href="#9-2-二级缓存" class="headerlink" title="9.2 二级缓存"></a><strong>9.2 二级缓存</strong></h3><p>上面的方案是基于 Redis 缓存的。虽说 Redis 访问速度很快。但毕竟是一个远程调用，而且菜单树的数据很多，在网络传输的过程中，是有些耗时的。</p><p>有没有办法，不经过请求远程，就能直接获取到数据呢？</p><p><strong>答</strong>：使用二级缓存，即基于内存的缓存。</p><p>除了自己手写的内存缓存之后，目前使用比较多的内存缓存框架有：Guava、Ehcache、caffine 等。</p><p>我们在这里以 Caffeine 为例，它是 Spring 官方推荐的。</p><p>第一步，引入 Caffeine 的相关 jar 包。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>第二步，配置 CacheManager，开启 EnableCaching。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CaffeineCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Caffeine配置</span>        <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> caffeine <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//最后一次写入后经过固定时间过期</span>                <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token comment">//缓存的最大条数</span>                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheManager<span class="token punctuation">.</span><span class="token function">setCaffeine</span><span class="token punctuation">(</span>caffeine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第三步，使用 Cacheable 注解获取数据。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"category"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#categoryKey"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">CategoryModel</span> <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> categoryKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> json <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>categoryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">CategoryTree</span> categoryTree <span class="token operator">=</span> <span class="token class-name">JsonUtil</span><span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> categoryTree<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token function">queryCategoryTreeFromDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>调用 categoryervice.getCategory() 方法时，先从 caffine 缓存中获取数据，如果能够获取到数据，则直接返回该数据，不进入方法体。</p><p>如果不能获取到数据，则再从 Redis 中查一次数据。如果查询到了，则返回数据，并且放入 Caffine 中。</p><p>如果还是没有查到数据，则直接从数据库中获取到数据，然后放到 Caffine 缓存中。</p><p>具体流程图如下：</p><p><img src="%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.jpg"></p><p>该方案的性能更好，但有个缺点。就是，如果数据更新了，不能及时刷新缓存。此外，如果有多台服务器节点，可能存在各个节点上数据不一样的情况。</p><p>由此可见，二级缓存给我们带来性能提升的同时，也带来了数据不一致的问题。使用二级缓存一定要结合实际的业务场景，并非所有的业务场景都适用。</p><p>但上面我列举的分类场景，是适合使用二级缓存的。因为它属于用户不敏感数据，即使出现了稍微有点数据不一致也没有关系，用户有可能都没有察觉出来。</p><h2 id="10-分库分表"><a href="#10-分库分表" class="headerlink" title="10. 分库分表"></a><strong>10. 分库分表</strong></h2><p>有时候，接口性能受限的不是别的，而是数据库。</p><p>当系统发展到一定的阶段，用户并发量大，会有大量的数据库请求，需要占用大量的数据库连接，同时会带来磁盘 IO 的性能瓶颈问题。</p><p>此外，随着用户数量越来越多，产生的数据也越来越多，一张表有可能存不下。由于数据量太大，SQL 语句查询数据时，即使走了索引也会非常耗时。</p><p>这时该怎么办呢？</p><p><strong>答</strong>：需要做分库分表。</p><p>如下图所示：</p><p><img src="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.jpg"></p><p>图中将用户库拆分成了三个库，每个库都包含了四张用户表。</p><p>如果有用户请求过来的时候，先根据用户 id 路由到其中一个用户库，然后再定位到某张表。</p><p>路由的算法挺多的：</p><ul><li>根据 id 取模：比如：id=7，有 4 张表，则 7%4=3，模为 3，路由到用户表 3；</li><li>给 id 指定一个区间范围：比如：id 的值是 0-10万，则数据存在用户表 0，id 的值是 10-20万，则数据存在用户表 1；</li><li>一致性 hash 算法。</li></ul><p>分库分表主要有两个方向：<strong>垂直</strong>和<strong>水平</strong>。</p><p>说实话垂直方向（即业务方向）更简单。</p><p>在水平方向（即数据方向）上，分库和分表的作用，其实是有区别的，不能混为一谈。</p><ul><li><strong>分库</strong>：是为了解决数据库连接资源不足问题，和磁盘 IO 的性能瓶颈问题；</li><li><strong>分表</strong>：是为了解决单表数据量太大，SQL 语句查询数据时，即使走了索引也非常耗时问题。此外还可以解决消耗 CPU 资源问题；</li><li><strong>分库分表</strong>：可以解决<strong>数据库连接资源不足</strong>、<strong>磁盘 IO 的性能瓶颈</strong>、<strong>检索数据耗时</strong>和 <strong>消耗 CPU 资源</strong>等问题。</li></ul><p>如果在有些业务场景中，用户并发量很大，但是需要保存的数据量很少，这时可以只分库，不分表。</p><p>如果在有些业务场景中，用户并发量不大，但是需要保存的数量很多，这时可以只分表，不分库。</p><p>如果在有些业务场景中，用户并发量大，并且需要保存的数量也很多时，可以分库分表。</p><h2 id="11-辅助功能"><a href="#11-辅助功能" class="headerlink" title="11. 辅助功能"></a><strong>11. 辅助功能</strong></h2><p>优化接口性能问题，除了上面提到的这些常用方法之外，还需要配合使用一些辅助功能，因为它们真的可以帮我们提升查找问题的效率。</p><h3 id="11-1-开启慢查询日志"><a href="#11-1-开启慢查询日志" class="headerlink" title="11.1 开启慢查询日志"></a><strong>11.1 开启慢查询日志</strong></h3><p>通常情况下，为了定位 SQL 的性能瓶颈，我们需要开启 MySQL 的慢查询日志。把超过指定时间的 SQL 语句，单独记录下来，方面以后分析和定位问题。</p><p>开启慢查询日志需要重点关注三个参数：</p><ul><li>slow_query_log 慢查询开关</li><li>slow_query_log_file 慢查询日志存放的路径</li><li>long_query_time 超过多少秒才会记录日志</li></ul><p>通过 MySQL 的 set 命令可以设置：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log_file<span class="token operator">=</span><span class="token string">'/usr/local/mysql/data/slow.log'</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>设置完之后，如果某条 SQL 的执行时间超过了 2秒，会被自动记录到 slow.log 文件中。</p><p>当然也可以直接修改配置文件 my.cnf：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>slow_query_log <span class="token operator">=</span> <span class="token keyword">ON</span>slow_query_log_file <span class="token operator">=</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>slow<span class="token punctuation">.</span>loglong_query_time <span class="token operator">=</span> <span class="token number">2</span></code></pre><p>但这种方式需要重启 MySQL 服务。</p><p>很多公司每天早上都会发一封慢查询日志的邮件，开发人员根据这些信息优化 SQL。</p><h3 id="11-2-加监控"><a href="#11-2-加监控" class="headerlink" title="11.2 加监控"></a>11.2 加监控</h3><p>为了出现 SQL 问题时，能够让我们及时发现，我们需要对系统做监控。</p><p>目前业界使用比较多的开源监控系统是 Prometheus。它提供了<strong>监控</strong>和<strong>预警</strong>的功能。</p><p>架构图如下：</p><p><img src="%E7%9B%91%E6%8E%A7.jpg"></p><p>我们可以用它监控如下信息：</p><ul><li>接口响应时间</li><li>调用第三方服务耗时</li><li>慢查询 SQL 耗时</li><li>CPU 使用情况</li><li>内存使用情况</li><li>磁盘使用情况</li><li>数据库使用情况</li></ul><p>等等。</p><p>它的界面大概长这样子：</p><p><img src="Prometheus.jpg"></p><p>可以看到 MySQL 当前 QPS、活跃线程数、连接数、缓存池的大小等信息。</p><p>如果发现数据量连接池占用太多，对接口的性能肯定会有影响。</p><p>这时可能是代码中开启了连接忘了关，或者并发量太大了导致的，需要做进一步排查和系统优化。</p><p>截图中只是它一小部分功能，如果你想了解更多功能，可以访问 Prometheus 的官网：</p><p><a href="https://prometheus.io/">https://prometheus.io/</a></p><h3 id="11-3-链路跟踪"><a href="#11-3-链路跟踪" class="headerlink" title="11.3 链路跟踪"></a>11.3 链路跟踪</h3><p>有时某个接口涉及的逻辑很多，比如查数据库、查 Redis、远程调用接口，发 Message Queue 消息、执行业务代码等。</p><p>该接口一次请求的链路很长，如果逐一排查，需要花费大量的时间。这时候，我们已经没法用传统的办法定位问题了。</p><p>有没有办法解决这问题呢？</p><p>用分布式链路跟踪系统：<strong>skywalking</strong>。</p><p>架构图如下：</p><p><img src="%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AAskywalking.jpg"></p><p>通过 Skywalking 定位性能问题：</p><p><img src="%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98skywalking.jpg"></p><p>在 Skywalking 中可以通过 traceId（全局唯一的 Id），串联一个接口请求的完整链路。可以看到整个接口的耗时，调用的远程服务的耗时，访问数据库或者 Redis 的耗时等等，功能非常强大。</p><p>之前没有这个功能的时候，为了定位线上接口性能问题，我们还需要在代码中加日志。手动打印出链路中各个环节的耗时情况，然后再逐一排查。</p><p>如果你用过 Skywalking 排查接口性能问题，不自觉地会爱上它的。如果你想了解更多功能，可以访问 Skywalking 的官网：</p><p><a href="https://skywalking.apache.org/">https://skywalking.apache.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫与反爬虫策略</title>
      <link href="/2022/12/27/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/"/>
      <url>/2022/12/27/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h1><p>爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并将数据抓取下来，然后使用一定的规则提取有价值的数据。说白了就是使用任何技术手段，批量获取网站信息的一种方式。</p><h1 id="爬虫是正经爬虫流不流氓我不知道"><a href="#爬虫是正经爬虫流不流氓我不知道" class="headerlink" title="爬虫是正经爬虫流不流氓我不知道"></a>爬虫是正经爬虫流不流氓我不知道</h1><p>爬虫需要遵守法律，程序员不仅要学会保护好自己头发还有自己。</p><p>Robots 协议（也称爬虫协议，机器人协议）是互联网爬虫的一项公认的道德规范，全称是“网络爬虫排除标准（Robots exclusion protocol）”，这个协议用来告诉引擎，哪些页面是可以抓取的，哪些不可以，常见的查看robots协议的方法是在网址后+“/robots.txt’。也可以使用 <a href="http://www.wetools.com/robots-tester">在线监测robots协议工具</a> 查看。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>爬虫技术这里就不多说了，我们这里多聊聊策略，想了解爬虫框架这里可以参考一下 <a href="http://zohar24.github.io/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/">主流爬虫框架比对</a>。</p><h1 id="爬虫策略"><a href="#爬虫策略" class="headerlink" title="爬虫策略"></a>爬虫策略</h1><ol><li><p>深度优先遍历策略</p><p> 深度优先遍历策略是指网络爬虫会从起始页开始，一个链接一个链接跟踪下去，处理完这条线路的链接之后，在再转入下一个起始页，继续跟踪链接。</p></li><li><p>广度优先遍历策略</p><p> 广度优先策略是按照树的层次进行搜索，如果此层没有搜索完成，不会进入下一层搜索。即首先完成一个层次的搜索，其次在进行下一层次，也称之为分层处理。</p></li><li><p>部分PageRank的策略</p><p> PageRank算法的思想：对于已经下载的网页，连同待抓取URL队列的URL，形成网页集合，计算每个页面的PageRank值（PageRank算法参考：PageRank算法 - 从原理到实现），计算完之后，将待抓取队列中的URL按照网页级别的值的大小排列，并按照顺序依次抓取网址页面。</p></li><li><p>OPIC策略策略</p><p> 基本思路：在算法开始前，给所有页面一个相同的初始现金（现金）当下载了某个页面P之后，将P的现金分摊给所有从P中分析出的链接，并且将P的现金清空。对于待抓取URL队列中的所有页面按照现金数进行排序。<br>与PageRank的的的的区别在于：PageRank的的的每次需要迭代计算，而OPIC策略不需要迭代过程所以计算速度远远快与PageRank的的的，适合实时计算使用。</p></li><li><p>大站优先策略</p><p> 以网站为单位来选题网页重要性，对于待爬取URL队列中的网页，根据所属网站归类，如果哪个网站等待下载的页面最多，则优先下载这些链接，其本质思想倾向于优先下载大型网站。因为大型网站往往包含更多的页面。鉴于大型网站往往是著名企业的内容，其网页质量一般较高，所以这个思路虽然简单，但是有一定依据。实验表明这个算法效果也要略优先于宽度优先遍历策略。</p></li></ol><h1 id="反爬虫策略"><a href="#反爬虫策略" class="headerlink" title="反爬虫策略"></a>反爬虫策略</h1><ol><li><p>基于IP反爬虫(IP限制频次)</p><p> 日志进行分析时有时会发现同一时间段内某一个或某几个IP访问量特别大，由于爬虫是通过程序来自动化爬取页面信息的，因此其单位时间的请求量较大，且相邻请求时间间隔较为固定，这时就基本可以判断此类行为系爬虫所为，此时即可在服务器上对异常IP进行封锁。</p></li><li><p>通过Header反爬虫(User-Agent + Referer检测)</p><p> User-Agent是请求头域之一，服务器从User-Agent对应的值中是被客户端的使用信息。<br> User-Agent的角色就是客户端的身份标识。很多的爬虫请求头就是默认的一些很明显的爬虫头python-requests/2.18.4，诸如此类，当发现携带有这类headers的数据包，直接拒绝访问，返回403错误。<br> 除了User-Agent之外，可利用的头域还有Host和Referer。这种验证请求头信息中特定头域的方式既可以有效地屏蔽长期无人维护的爬虫程序，也可以将一些爬虫初学者发出的网络请求拒之门外。</p></li><li><p>基于用户行为反爬虫</p><p> 日志进行分析时用户在长时间内循环某一个操作，且相邻请求时间间隔较为固定，这时就基本可以判断此类行为系爬虫所为。此时即可在服务器上对异常IP和用户进行封锁。</p></li><li><p>iframe嵌入</p><p> 核心数据展示在iframe标签内，能够动态扩展页面，重要的是可根据逻辑动态改变页面内容。</p></li><li><p>Cookie限制(登录限制)</p><p> Cookie限制指的是服务器通过校验请求头中的Cookie值来区分正常用户和爬虫程序的手段，服务器对每一个访问网页的人都会给其一个Cookie，有的扫描爬虫单纯为了爬取链接，并不会对Cookie进行处理和响应。<br> 当某个Cookie访问超过某一个阀值时，就对其进行封禁，过一段时间再放出来。也可以把Cookie和JavaScript结合起来实现反爬虫从而提高爬虫难度，这种手段被广泛应用在Web应用中。</p></li><li><p>验证码限制</p><p> 当某一用户访问次数过多后，就自动让请求跳转到一个验证码页面，只有在输入正确的验证码或指定操作之后才能继续访问网站。此限制使用最为广泛。</p></li><li><p>js加密(通过js加密请求参数、解密加密的数据来反爬)</p><p> 由 JavaScript 改变 HTML DOM 导致页面内容发生变化的现象称为动态渲染。<br> 由于编程语言没有像浏览器一样内置JavaScript解释器和渲染引擎，所以动态渲染是天然的反爬虫手段。<br> 网页开发者将重要信息放在网页中但不写入html标签中，而浏览器会自动渲染<code>&lt;script&gt;</code>标签中的js代码将信息展现在浏览器当中，而爬虫是不具备执行js代码的能力，所以无法将js事件产生的信息读取出来。</p></li><li><p>CSS偏移反爬虫(CSS偏移反爬虫指的是利用CSS样式将乱序的文字排版为人类正常阅读的顺序)。</p><p> 这种方法是利用 CSS 样式将乱序的文字排版为人类正常阅读顺序的行为。<br> 如果不细心观察，爬虫工程师很容易被爬取结果糊弄。这种混淆方法和图片伪装一样，并不会影响用户阅读。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反爬虫系统最终总是能破解，只是时间问题。这句话是什么意思呢？其实这句话你可以这么理解：反爬虫系统，对于爬虫来说，相当于一个单机游戏。单机游戏，总有通关的一天。也许是明天，也许是后天，也许是下个月、半年？但是总是过得去的。甚至你可以上上下下左右左右BABA嘛。那么什么游戏不能通关呢？没错，网络游戏不能通关，它可以无休止地升级下去。<br>你装备刚毕业，他改版了。就这样，一直下去，等于没有破解。就像一些模拟战争游戏抢要塞一样，刚抢完没多久，过期了，又要重抢。这就等于没怎么抢到手。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主流爬虫框架对比</title>
      <link href="/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
      <url>/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p><strong>目前的主流爬虫框架包括:</strong></p><table><thead><tr><th><strong>JAVA</strong></th><th><strong>Python</strong></th><th><strong>PHP</strong></th><th><strong>C#</strong></th><th><strong>C/C++</strong></th></tr></thead><tbody><tr><td>apache Nutch2</td><td>scraty</td><td>phpspider</td><td>DotnetSpider</td><td>open-source-search-engine</td></tr><tr><td>webmagic</td><td>Crawlery</td><td>Beanbun</td><td>NwebCrawler</td><td>Cobweb</td></tr><tr><td>Heritriix</td><td>Portia</td><td>PHPCrawl</td><td>SmartSpider</td><td>upton</td></tr><tr><td>webCollector</td><td>PySpider</td><td>php seienium</td><td>Abot</td><td>wombat</td></tr><tr><td>crawler4j</td><td>grab</td><td></td><td>xNet</td><td>Spidr</td></tr><tr><td>Spiderman</td><td>cola</td><td></td><td>AngleSharp</td><td>Larbin</td></tr><tr><td>SeimiCrawler</td><td>python seienium</td><td></td><td>HtmlAgilityPack</td><td></td></tr><tr><td>jsoup</td><td></td><td></td><td>CSQuery</td><td></td></tr><tr><td>java seienium</td><td></td><td></td><td></td><td></td></tr><tr><td>htmlmunit</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="一-Python"><a href="#一-Python" class="headerlink" title="一. Python"></a><strong>一. Python</strong></h1><h2 id="1-Scrapy"><a href="#1-Scrapy" class="headerlink" title="1. Scrapy"></a><strong>1. Scrapy</strong></h2><p>Python开发的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。<em><strong>但对于稍微复杂一点的页面，如 weibo 的页面信息，这个框架就满足不了需求了。</strong></em></p><p>Scrapy使用了Twisted（其主要对手是Tornado）异步网络框架来处理网络通讯，该网络框架可以加快我们的下载速度，并且包含了各种中间件接口，可以灵活的完成各种需求。</p><p><strong>优点:</strong></p><p>1）scrapy 是异步的，可以灵活调节并发量</p><p>2）采取可读性更强的 xpath 代替正则，速度快</p><p>3）写 middleware,方便写一些统一的过滤器</p><p>4）同时在不同的 url 上爬行</p><p>5）支持 shell 方式，方便独立调试</p><p>6）通过管道的方式存入数据库，灵活，可保存为多种形式</p><p><strong>缺点：</strong></p><p>1）无法用它完成分布式爬取</p><p>2）自身去重效果差，消耗内存，且不能持久化</p><p>3）对于需要执行js才能获取数据的网页，爱莫能助</p><p>4）兼容了下载图片与视频，但是可用性比较差</p><p>5）自身扩展的log模块，不好用，经常需要自定义</p><p>6）基于 twisted 框架，运行中的 exception 是不会干掉 reactor（反应器），并且异步框架出错后 是不会停掉其他任务的，数据出错后难以察觉，预警系统简单的使用邮件，很不友好</p><p><strong>scrapy的扩展件：</strong></p><p>scrapy_redis解决分布式爬取;</p><p>scrapy_redis通过redis实现调度器的队列和指纹集合，完成分布式和去重。</p><p>scrapy_redis_bloomfilter，基于Redis的Bloomfilter去重，并将其扩展到Scrapy框架，实现持久化去重，上亿或十亿级别的去重功能。</p><p>scrapy-splash ,整合了javascript，可以在scrapy当中执行js，获取数据，解析。</p><h2 id="2-Crawley"><a href="#2-Crawley" class="headerlink" title="2. Crawley"></a><strong>2. Crawley</strong></h2><p>Crawley可以高速爬取对应网站的内容，支持关系和非关系数据库，数据可以导出为JSON、XML等。</p><p>crawley也是使用python开发出来的一款爬虫框架，该框架致力于改变人们从互联网中提取数据的方式，让大家可以更高效地从互联网中爬取对应内容。</p><p>crawley框架的主要特点有：</p><p>1）高速爬取对应网站内容</p><p>2）可以将爬取到内容轻松地存储到数据库中，比如：postgres，mysql，oracle，sqlite等数据库</p><p>3）可以将爬取到的数据导出为json，xml等格式</p><p>4）支持非关系型数据库，比如：mongodb，couchdb等</p><p>5）支持使用<a href="https://so.csdn.net/so/search?q=%E5%91%BD%E4%BB%A4%E8%A1%8C&spm=1001.2101.3001.7020">命令行</a>工具</p><p>6）可以使用你喜欢的工具提取数据，比如使用xpath或者pyquery等工具</p><p>7）支持使用cookie登陆并访问哪些只有登陆才能够访问的网页</p><p>项目地址：<a href="http://project.crawley-cloud.com/">http://project.crawley-cloud.com/</a></p><h2 id="3-Portia"><a href="#3-Portia" class="headerlink" title="3. Portia"></a><strong>3. Portia</strong></h2><p>可视化爬取网站内容.</p><p>Portia是一个开源可视化爬虫工具，可让您在不需要任何编程知识的情况下爬取网站！简单地注释您感兴趣的页面，Portia将创建一个蜘蛛来从类似的页面提取数据。</p><p>portia框架是一款允许没有任何编程基础的用户可视化地爬取网页的爬虫框架，给出你要爬取的网页中感兴趣的数据内容，通过portia框架，可以将你所需要的信息从相似的网页中自动提取出来。</p><p>项目地址：<a href="https://github.com/scrapinghub/portia">https://github.com/scrapinghub/portia</a></p><h2 id="4-Newpaper"><a href="#4-Newpaper" class="headerlink" title="4. Newpaper"></a><strong>4. Newpaper</strong></h2><p>提取文章,新闻以及内容分析。</p><p>Newspaper可以用来提取新闻、文章和内容分析。使用多线程，支持10多种语言等。</p><p>newspaper框架是一种用来提取新闻、文章以及内容分析的python爬虫框架。更准确地说，newspaper是一个python的库，只不过这个库是由第三方开发的，可以归为一种框架。</p><p>newspaper框架在的主要特点：</p><p>1）比较简单</p><p>2）速度比较快</p><p>3）支持多线程</p><p>4）支持十多种语言</p><p>由此我们可以知道newspaper框架是轻量级框架，并且就爬取文章信息这一功能来说，使用起来很方便</p><p>项目地址：<a href="https://github.com/codelucas/newspaper">https://github.com/codelucas/newspaper</a></p><h2 id="5-Python-goose"><a href="#5-Python-goose" class="headerlink" title="5. Python-goose"></a><strong>5. Python-goose</strong></h2><p>Java写的文章提取工具。Python-goose框架可提取的信息包括：文章主体内容、文章主要图片、文章中嵌入的任何Youtube/Vimeo视频、元描述、元标签。</p><h2 id="6-pyspider"><a href="#6-pyspider" class="headerlink" title="6. pyspider"></a><strong>6. pyspider</strong></h2><p>pyspider 是一个用python实现的功能强大的网络爬虫系统，能在浏览器界面上进行脚本的编写，功能的调度和爬取结果的实时查看，后端使用常用的数据库进行爬取结果的存储，还能定时设置任务与任务优先级等。</p><p>主要特性如下：</p><p>1）强大的WebUI，包含：脚本编辑器、任务监控器，项目管理器和结果查看器；</p><p>2）多数据库支持，包括：MySQL, MongoDB, Redis, SQLite, Elasticsearch; PostgreSQL with SQLAlchemy等；</p><p>3）使用RabbitMQ, Beanstalk, Redis 和Kombu作为消息队列；</p><p>4）支持任务优先级设定、定时任务、失败后重试等；</p><p>5）支持分布式爬虫</p><p>6）完全可视化，对用户非常友好：WEB 界面编写调试脚本，起停脚本，监控执行状态，查看活动历史，获取结果产出。</p><p><strong>缺点：</strong></p><p>1）URL去重使用数据库而不是布隆过滤器，亿级存储的db io将导致效率急剧降低。</p><p>2）使用上的人性化牺牲了灵活度，定制化能力降低。</p><p>项目地址：<a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a></p><h2 id="7-grab"><a href="#7-grab" class="headerlink" title="7. grab"></a><strong>7. grab</strong></h2><p>Grab是一个用于构建Web刮板的Python框架。借助Grab，您可以构建各种复杂的网页抓取工具，从简单的5行脚本到处理数百万个网页的复杂异步网站抓取工具。Grab提供一个API用于执行网络请求和处理接收到的内容，例如与HTML文档的DOM树进行交互。</p><p>项目地址：<a href="http://docs.grablib.org/en/latest/#grab-spider-user-manual">http://docs.grablib.org/en/latest/#grab-spider-user-manual</a></p><h2 id="8-selenium"><a href="#8-selenium" class="headerlink" title="8.selenium"></a><strong>8.selenium</strong></h2><p>这是一个调用浏览器的 driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码</p><h2 id="9-Cola"><a href="#9-Cola" class="headerlink" title="9.Cola"></a><strong>9.Cola</strong></h2><p>Cola是一个分布式的爬虫框架，对于用户来说，只需编写几个特定的函数，而无需关注分布式运行的细节。任务会自动分配到多台机器上，整个过程对用户是透明的。</p><p>项目地址：<a href="https://github.com/chineking/cola">https://github.com/chineking/cola</a></p><h1 id="二-Java"><a href="#二-Java" class="headerlink" title="二. Java"></a><strong>二. Java</strong></h1><p> 常见的Java爬虫框架主要由有: Nutch、WebMagic、WebCollector、spider-flow、SeimiCrawler、heritrix3</p><h2 id="1-Nutch"><a href="#1-Nutch" class="headerlink" title="1.Nutch"></a><strong>1.Nutch</strong></h2><p>  Nutch是为搜索引擎设计的爬虫，大多数用户是需要一个做精准数据爬取（精抽取）的爬虫,Nutch运行的一套流程里，有三分之二是为了搜索引擎而设计的.</p><p>Nutch这个框架运行需要Hadoop，Hadoop需要开集群</p><p><a href="http://www.apache.org/index.html#projects-list">Apache顶级项目列表</a></p><p><a href="http://nutch.apache.org/">Nutch官网</a></p><p><a href="https://wiki.apache.org/nutch/#Tutorials">Nutch官方教程</a></p><p>1.Nutch支持分布式抓取，并有Hadoop支持，可以进行多机分布抓取，存储和索引。另外很吸引人的一点在于，它提供了一种插件框架，使得其对各种网页内容的解析、各种数据的采集、查询、集群、过滤等功能能够方便的进行扩展，正是由于有此框架，使得 Nutch 的插件开发非常容易，第三方的插件也层出不穷，极大的增强了 Nutch 的功能和声誉。</p><p>缺点</p><p>1.Nutch的爬虫定制能力比较弱</p><h2 id="2-WebMagic"><a href="#2-WebMagic" class="headerlink" title="2.WebMagic"></a><strong>2.WebMagic</strong></h2><p>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。 </p><p><strong>优点：</strong> </p><p> 1）简单的API，可快速上手 </p><p> 2）模块化的结构，可轻松扩展 </p><p> 3）提供多线程和分布式支持</p><p><strong>缺点:</strong></p><p> 1）不支持JS页面抓取</p><p>文档地址:<strong><a href="http://webmagic.io/docs/zh/">http://webmagic.io/docs/zh/</a></strong></p><h2 id="3-Crawler4j"><a href="#3-Crawler4j" class="headerlink" title="3. Crawler4j"></a><strong>3. Crawler4j</strong></h2><p><strong>优点</strong></p><p>1）多线程采集</p><p>2）内置了Url 过滤机制，采用的是BerkeleyDB 进行url的过滤。</p><p>3）可扩展为支持结构化提取网页字段，可作为垂直采集用</p><p><strong>缺点</strong></p><p>1）不支持动态网页抓取，例如网页的ajax部分</p><p>2）不支持分布式采集，可以考虑将其作为分布式爬虫的一部分，客户端采集部分</p><p>为了更加直观这7种爬虫框架,小编做了一个框架优缺点对比图,如下:</p><h2 id="4-Heritrix"><a href="#4-Heritrix" class="headerlink" title="4.Heritrix"></a><strong>4.Heritrix</strong></h2><p>Heritrix 是一个由 java 开发的、开源的网络爬虫，用户可以使用它来从网上抓取想要的资源</p><p><strong>优点</strong></p><p>1）Heritrix的爬虫定制参数多</p><p><strong>缺点</strong></p><p>1）单实例的爬虫，之间不能进行合作。</p><p>2）在有限的机器资源的情况下，却要复杂的操作。</p><p>3）只有官方支持，仅仅在Linux上进行了测试。</p><p>4）每个爬虫是单独进行工作的，没有对更新进行修订。</p><p>5）在硬件和系统失败时，恢复能力很差。</p><p>6）很少的时间用来优化性能。</p><p>7）相对于Nutch，Heritrix仅仅只是一个爬虫工具，没有提供搜索引擎。如果要对抓取的站点排序必须要实现类似于Pagerank的复杂算法。</p><p><img src="%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94.jpg" alt="爬虫工具对比"></p><h1 id="三-、爬虫系统开源项目"><a href="#三-、爬虫系统开源项目" class="headerlink" title="三 、爬虫系统开源项目:"></a><strong>三 、爬虫系统开源项目:</strong></h1><h2 id="1-Spider-flow"><a href="#1-Spider-flow" class="headerlink" title="1.Spider-flow"></a><strong>1.Spider-flow</strong></h2><p> spider-flows是一个爬虫平台,以图形化方式定义爬虫流程,无序代码即可实现一个爬虫(<a href="https://gitee.com/ssssssss-team/spider-flow">https://gitee.com/ssssssss-team/spider-flow</a>)<br><img src="spider-flow%E5%88%97%E8%A1%A8.png" alt="spider-flow列表.png"><br><img src="spider-flow%E7%BC%96%E8%BE%91.png" alt="spider-flow编辑.png"></p><h2 id="2-webmagic"><a href="#2-webmagic" class="headerlink" title="2.webmagic"></a><strong>2.webmagic</strong></h2><p><strong>webmagic 是一个无需配置  便于二次开发的爬虫框架, 他提供简单灵活的API ,只需要少量代码即可(</strong><a href="https://gitee.com/flashsword20/webmagic"><strong>https://gitee.com/flashsword20/webmagic</strong></a><strong>)</strong></p><p>文档链接地址:</p><p><a href="http://webmagic.io/docs/zh/">http://webmagic.io/docs/zh/</a></p><h2 id="3-ECommerceCrawlers"><a href="#3-ECommerceCrawlers" class="headerlink" title="3.ECommerceCrawlers"></a><strong>3.ECommerceCrawlers</strong></h2><p><strong>ECommerceCrawlers**<strong>实战多种网站、电商数据爬虫。包含：淘宝商品、微信公众号、大众点评、招聘网站、闲鱼、阿里任务、scrapy博客园、微博、百度贴吧、豆瓣电影、包图网、全景网、豆瓣音乐、某省药监局、搜狐新</strong></strong>(<strong><a href="https://gitee.com/AJay13/ECommerceCrawlers"><strong>https://gitee.com/AJay13/ECommerceCrawlers</strong></a></strong>)**</p><h2 id="4-Cecco"><a href="#4-Cecco" class="headerlink" title="4.Cecco"></a><strong>4.Cecco</strong></h2><p><strong>Cecco 是一款用java语言开发的轻量化的易用的网络爬虫, 整合了jsoup,httpClient,fastjson,spring,htmlunit,redission 等优秀框架</strong></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据取值</title>
      <link href="/2022/11/14/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8F%96%E5%80%BC/"/>
      <url>/2022/11/14/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8F%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="一、如何从大量的-URL-中找出相同的-URL？"><a href="#一、如何从大量的-URL-中找出相同的-URL？" class="headerlink" title="一、如何从大量的 URL 中找出相同的 URL？"></a>一、如何从大量的 URL 中找出相同的 URL？</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>给定 a、b 两个文件，各存放 50 亿个 URL，每个 URL 各占 64B，内存限制是 4G。请找出 a、b 两个文件共同的 URL。</p><h2 id="2-解答思路"><a href="#2-解答思路" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><h3 id="1-分治策略"><a href="#1-分治策略" class="headerlink" title="1. 分治策略"></a>1. 分治策略</h3><p>每个 URL 占 64B，那么 50 亿个 URL 占用的空间大小约为 320GB。</p><pre class="language-none"><code class="language-none">5, 000, 000, 000 _ 64B ≈ 5GB _ 64 &#x3D; 320GB</code></pre><p>由于内存大小只有 4G，因此，我们不可能一次性把所有 URL 加载到内存中处理。对于这种类型的题目，一般采用分治策略，即：把一个文件中的 URL 按照某个特征划分为多个小文件，使得每个小文件大小不超过 4G，这样就可以把这个小文件读到内存中进行处理了。</p><p><strong>思路如下：</strong></p><p>首先遍历文件 a，对遍历到的 URL 求 hash(URL) % 1000 ，根据计算结果把遍历到的 URL 存储到 a0, a1, a2, …, a999，这样每个大小约为 300MB。使用同样的方法遍历文件 b，把文件 b 中的 URL 分别存储到文件 b0, b1, b2, …, b999 中。这样处理过后，所有可能相同的 URL 都在对应的小文件中，即 a0 对应 b0, …, a999 对应 b999，不对应的小文件不可能有相同的 URL。那么接下来，我们只需要求出这 1000 对小文件中相同的 URL 就好了。</p><p>接着遍历 ai( i∈[0,999] )，把 URL 存储到一个 HashSet 集合中。然后遍历 bi 中每个 URL，看在 HashSet 集合中是否存在，若存在，说明这就是共同的 URL，可以把这个 URL 保存到一个单独的文件中。</p><h3 id="2-前缀树"><a href="#2-前缀树" class="headerlink" title="2. 前缀树"></a>2. 前缀树</h3><p>一般而言，URL 的长度差距不会不大，而且前面几个字符，绝大部分相同。这种情况下，非常适合使用字典树（trie tree） 这种数据结构来进行存储，降低存储成本的同时，提高查询效率。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul><li><p>分治策略：分而治之，进行哈希取余；对每个子文件进行 HashSet 统计。</p></li><li><p>前缀树：利用字符串的公共前缀来降低存储成本，提高查询效率。</p></li></ul><h1 id="二、如何从大量数据中找出高频词？"><a href="#二、如何从大量数据中找出高频词？" class="headerlink" title="二、如何从大量数据中找出高频词？"></a>二、如何从大量数据中找出高频词？</h1><h2 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。</p><h2 id="2-解答思路-1"><a href="#2-解答思路-1" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>由于内存限制，我们依然无法直接将大文件的所有词一次读到内存中。</p><p>因此，同样可以采用分治策略，把一个大文件分解成多个小文件，保证每个文件的大小小于 1MB，进而直接将单个小文件读取到内存中进行处理。</p><h2 id="3-思路如下："><a href="#3-思路如下：" class="headerlink" title="3. 思路如下："></a>3. 思路如下：</h2><p>首先遍历大文件，对遍历到的每个词 x，执行 hash(x) % 5000 ，将结果为 i 的词存放到文件 ai 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解。</p><p>接着统计每个小文件中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。具体方法是：对于遍历到的词 x，如果在 map 中不存在，则执行 map.put(x, 1) ；若存在，则执行 map.put(x, map.get(x)+1) ，将该词频数加 1。</p><p>上面我们统计了每个小文件单词出现的频数。接下来，我们可以通过维护一个小顶堆来找出所有词中出现频数最高的 100 个。具体方法是：依次遍历每个小文件，构建一个小顶堆，堆大小为 100。如果遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后重新调整为小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。</p><h2 id="4-方法总结"><a href="#4-方法总结" class="headerlink" title="4. 方法总结"></a>4. 方法总结</h2><ul><li><p>分而治之，进行哈希取余；</p></li><li><p>使用 HashMap 统计频数；</p></li><li><p>求解最大的 TopN 个，用小顶堆；求解最小的 TopN 个，用大顶堆。</p></li></ul><h1 id="三、如何找出某一天访问百度网站最多的-IP？"><a href="#三、如何找出某一天访问百度网站最多的-IP？" class="headerlink" title="三、如何找出某一天访问百度网站最多的 IP？"></a>三、如何找出某一天访问百度网站最多的 IP？</h1><h2 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>现有海量日志数据保存在一个超大文件中，该文件无法直接读入内存，要求从中提取某天访问百度次数最多的那个 IP。</p><h2 id="2-解答思路-2"><a href="#2-解答思路-2" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>这道题只关心某一天访问百度最多的 IP，因此，可以首先对文件进行一次遍历，把这一天访问百度 IP 的相关信息记录到一个单独的大文件中。接下来采用的方法与上一题一样，大致就是先对 IP 进行哈希映射，接着使用 HashMap 统计重复 IP 的次数，最后计算出重复次数最多的 IP。</p><p>注：这里只需要找出出现次数最多的 IP，可以不必使用堆，直接用一个变量 max 即可。</p><h2 id="3-方法总结"><a href="#3-方法总结" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><ul><li><p>分而治之，进行哈希取余；</p></li><li><p>使用 HashMap 统计频数；</p></li><li><p>求解最大的 TopN 个，用小顶堆；求解最小的 TopN 个，用大顶堆。</p></li></ul><h1 id="四、-如何在大量的数据中找出不重复的整数？"><a href="#四、-如何在大量的数据中找出不重复的整数？" class="headerlink" title="四、 如何在大量的数据中找出不重复的整数？"></a>四、 如何在大量的数据中找出不重复的整数？</h1><h2 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>在 2.5 亿个整数中找出不重复的整数。注意：内存不足以容纳这 2.5 亿个整数。</p><h2 id="2-解答思路-3"><a href="#2-解答思路-3" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><h3 id="方法一：分治法"><a href="#方法一：分治法" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>与前面的题目方法类似，先将 2.5 亿个数划分到多个小文件，用 HashSet/HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。</p><h3 id="方法二：位图法"><a href="#方法二：位图法" class="headerlink" title="方法二：位图法"></a>方法二：位图法</h3><p>位图，就是用一个或多个 bit 来标记某个元素对应的值，而键就是该元素。采用位作为单位来存储数据，可以大大节省存储空间。</p><p>位图通过使用位数组来表示某些元素是否存在。它可以用于快速查找，判重，排序等。不是很清楚？我先举个小例子。</p><p>假设我们要对 [0,7] 中的 5 个元素 (6, 4, 2, 1, 5) 进行排序，可以采用位图法。</p><p>0~7 范围总共有 8 个数，只需要 8bit，即 1 个字节。首先将每个位都置 0：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 0 0 0 0 0 0 0</code></pre><p>然后遍历 5 个元素，首先遇到 6，那么将下标为 6 的位的 0 置为 1；接着遇到 4，把下标为 4 的位 的 0 置为 1：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 0 0 0 1 0 1 0</code></pre><p>依次遍历，结束后，位数组是这样的：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 1 1 0 1 1 1 0</code></pre><p>每个为 1 的位，它的下标都表示了一个数：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">for i in range(8):    if bits[i] &#x3D;&#x3D; 1:        print(i)</code></pre><p>这样我们其实就已经实现了排序。</p><p>对于整数相关的算法的求解，位图法是一种非常实用的算法。假设 int 整数占用 4B，即 32bit，那么我们可以表示的整数的个数为 232。</p><p>那么对于这道题，我们用 2 个 bit 来表示各个数字的状态：</p><p>00 表示这个数字没出现过； 01 表示这个数字出现过一次（即为题目所找的不重复整数）； 10 表示这个数字出现了多次。 那么这 232 个整数，总共所需内存为 232*2b=1GB。因此，当可用内存超过 1GB 时，可以采用位图法。假设内存满足位图法需求，进行下面的操作：</p><p>遍历 2.5 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。</p><p>当然，本题中特别说明：内存不足以容纳这 2.5 亿个整数，2.5 亿个整数的内存大小为：2.5e8/1024/1024/1024 * 4=3.72GB， 如果内存大于 1GB，是可以通过位图法解决的。</p><h2 id="3-方法总结-1"><a href="#3-方法总结-1" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>判断数字是否重复的问题，位图法是一种非常高效的方法，当然前提是：内存要满足位图法所需要的存储空间。</p><h1 id="五、如何在大量的数据中判断一个数是否存在？"><a href="#五、如何在大量的数据中判断一个数是否存在？" class="headerlink" title="五、如何在大量的数据中判断一个数是否存在？"></a>五、如何在大量的数据中判断一个数是否存在？</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？</p><h2 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h2><h3 id="方法一：分治法-1"><a href="#方法一：分治法-1" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>依然可以用分治法解决，方法与前面类似，就不再次赘述了。</p><h3 id="方法二：位图法-1"><a href="#方法二：位图法-1" class="headerlink" title="方法二：位图法"></a>方法二：位图法</h3><p>由于 unsigned int 数字的范围是 [0, 1 &lt;&lt; 32)，我们用 1 &lt;&lt; 32=4,294,967,296 个 bit 来表示每个数字。初始位均为 0，那么总共需要内存：4,294,967,296b≈512M。</p><p>我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。</p><h2 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h2><p>判断数字是否存在、判断数字是否重复的问题，位图法是一种非常高效的方法。</p><h1 id="六、如何查询最热门的查询串？"><a href="#六、如何查询最热门的查询串？" class="headerlink" title="六、如何查询最热门的查询串？"></a>六、如何查询最热门的查询串？</h1><h2 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>搜索引擎会通过日志文件把用户每次检索使用的所有查询串都记录下来，每个查询串的长度不超过 255 字节。</p><p>假设目前有 1000w 个记录（这些查询串的重复度比较高，虽然总数是 1000w，但如果除去重复后，则不超过 300w 个）。请统计最热门的 10 个查询串，要求使用的内存不能超过 1G。（一个查询串的重复度越高，说明查询它的用户越多，也就越热门。）</p><h2 id="2-解答思路-4"><a href="#2-解答思路-4" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>每个查询串最长为 255B，1000w 个串需要占用 约 2.55G 内存，因此，我们无法将所有字符串全部读入到内存中处理。</p><h3 id="方法一：分治法-2"><a href="#方法一：分治法-2" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>分治法依然是一个非常实用的方法。</p><p>划分为多个小文件，保证单个小文件中的字符串能被直接加载到内存中处理，然后求出每个文件中出现次数最多的 10 个字符串；最后通过一个小顶堆统计出所有文件中出现最多的 10 个字符串。</p><p>方法可行，但不是最好，下面介绍其他方法。</p><h3 id="方法二：HashMap-法"><a href="#方法二：HashMap-法" class="headerlink" title="方法二：HashMap 法"></a>方法二：HashMap 法</h3><p>虽然字符串总数比较多，但去重后不超过 300w，因此，可以考虑把所有字符串及出现次数保存在一个 HashMap 中，所占用的空间为 300w*(255+4)≈777M（其中，4 表示整数占用的 4 个字节）。由此可见，1G 的内存空间完全够用。</p><p>思路如下：</p><p>首先，遍历字符串，若不在 map 中，直接存入 map，value 记为 1；若在 map 中，则把对应的 value 加 1，这一步时间复杂度 O(N) 。</p><p>接着遍历 map，构建一个 10 个元素的小顶堆，若遍历到的字符串的出现次数大于堆顶字符串的出现次数，则进行替换，并将堆调整为小顶堆。</p><p>遍历结束后，堆中 10 个字符串就是出现次数最多的字符串。这一步时间复杂度 O(Nlog10) 。</p><h3 id="方法三：前缀树法"><a href="#方法三：前缀树法" class="headerlink" title="方法三：前缀树法"></a>方法三：前缀树法</h3><p>方法二使用了 HashMap 来统计次数，当这些字符串有大量相同前缀时，可以考虑使用前缀树来统计字符串出现的次数，树的结点保存字符串出现次数，0 表示没有出现。</p><p>思路如下：</p><p>在遍历字符串时，在前缀树中查找，如果找到，则把结点中保存的字符串次数加 1，否则为这个字符串构建新结点，构建完成后把叶子结点中字符串的出现次数置为 1。</p><p>最后依然使用小顶堆来对字符串的出现次数进行排序。</p><h2 id="3-方法总结-2"><a href="#3-方法总结-2" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>前缀树经常被用来统计字符串的出现次数。它的另外一个大的用途是字符串查找，判断是否有重复的字符串等。</p><h1 id="七、如何统计不同电话号码的个数？"><a href="#七、如何统计不同电话号码的个数？" class="headerlink" title="七、如何统计不同电话号码的个数？"></a>七、如何统计不同电话号码的个数？</h1><h2 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>已知某个文件内包含一些电话号码，每个号码为 8 位数字，统计不同号码的个数。</p><h2 id="2-解答思路-5"><a href="#2-解答思路-5" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>这道题本质还是求解数据重复的问题，对于这类问题，一般首先考虑位图法。</p><p>对于本题，8 位电话号码可以表示的号码个数为 108 个，即 1 亿个。我们每个号码用一个 bit 来表示，则总共需要 1 亿个 bit，内存占用约 12M。</p><p><strong>思路如下：</strong></p><p>申请一个位图数组，长度为 1 亿，初始化为 0。然后遍历所有电话号码，把号码对应的位图中的位置置为 1。遍历完成后，如果 bit 为 1，则表示这个电话号码在文件中存在，否则不存在。bit 值为 1 的数量即为 不同电话号码的个数。</p><h2 id="方法总结-1"><a href="#方法总结-1" class="headerlink" title="方法总结"></a>方法总结</h2><p>求解数据重复问题，记得考虑位图法。</p><h1 id="八、如何从-5-亿个数中找出中位数？"><a href="#八、如何从-5-亿个数中找出中位数？" class="headerlink" title="八、如何从 5 亿个数中找出中位数？"></a>八、如何从 5 亿个数中找出中位数？</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)/2 个数；当样本数为偶数时，中位数为 第 N/2 个数与第 1+N/2 个数的均值。</p><h2 id="解答思路-1"><a href="#解答思路-1" class="headerlink" title="解答思路"></a>解答思路</h2><p>如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN) 。这里使用其他方法。</p><h3 id="方法一：双堆法"><a href="#方法一：双堆法" class="headerlink" title="方法一：双堆法"></a>方法一：双堆法</h3><p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数小于等于小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。</p><p>若数据总数为偶数，当这两个堆建好之后，中位数就是这两个堆顶元素的平均值。当数据总数为奇数时，根据两个堆的大小，中位数一定在数据多的堆的堆顶。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxHeap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minHeap<span class="token punctuation">;</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token class-name">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size1 <span class="token operator">-</span> size2 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size2 <span class="token operator">-</span> size1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> size1 <span class="token operator">==</span> size2            <span class="token operator">?</span> <span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>size1 <span class="token operator">></span> size2 <span class="token operator">?</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法适用于数据量较小的情况。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了，下面介绍另一种方法。</p><h3 id="方法二：分治法"><a href="#方法二：分治法" class="headerlink" title="方法二：分治法"></a>方法二：分治法</h3><p>分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。</p><p>对于这道题，顺序读取这 5 亿个数字，对于读取到的数字 num，如果它对应的二进制中最高位为 1，则把这个数字写到 f1 中，否则写入 f0 中。通过这一步，可以把这 5 亿个数划分为两部分，而且 f0 中的数都大于 f1 中的数（最高位是符号位）。</p><p>划分之后，可以非常容易地知道中位数是在 f0 还是 f1 中。假设 f1 中有 1 亿个数，那么中位数一定在 f0 中，且是在 f0 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。</p><p>提示，5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 f1 有一亿个数，那么中位数就是 f0 中从第 1.5 亿个数开始的两个数求得的平均值。</p><p>对于 f0 可以用次高位的二进制继续将文件一分为二，如此划分下去，直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。</p><p>注意，当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。</p><h1 id="九、如何按照-query-的频度排序？"><a href="#九、如何按照-query-的频度排序？" class="headerlink" title="九、如何按照 query 的频度排序？"></a>九、如何按照 query 的频度排序？</h1><h2 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。</p><h2 id="2-解答思路-6"><a href="#2-解答思路-6" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。</p><h3 id="方法一：HashMap-法"><a href="#方法一：HashMap-法" class="headerlink" title="方法一：HashMap 法"></a>方法一：HashMap 法</h3><p>如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。</p><h3 id="方法二：分治法-1"><a href="#方法二：分治法-1" class="headerlink" title="方法二：分治法"></a>方法二：分治法</h3><p>分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。对于这道题，可以顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。</p><p>之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到另外一个单独文件中。</p><p>接着对所有文件按照 query 的次数进行排序，这里可以使用归并排序（由于无法把所有 query 都读入内存，因此需要使用外排序）。</p><h2 id="3-方法总结-3"><a href="#3-方法总结-3" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>内存若够，直接读入进行排序；</p><p>内存不够，先划分为小文件，小文件排好序后，整理使用外排序进行归并。</p><h1 id="十、如何找出排名前-500-的数？"><a href="#十、如何找出排名前-500-的数？" class="headerlink" title="十、如何找出排名前 500 的数？"></a>十、如何找出排名前 500 的数？</h1><h2 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有 20 个数组，每个数组有 500 个元素，并且有序排列。如何在这 20*500 个数中找出前 500 的数？</p><h2 id="2-解答思路-7"><a href="#2-解答思路-7" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>对于 TopK 问题，最常用的方法是使用堆排序。对本题而言，假设数组降序排列，可以采用以下方法：</p><p>首先建立大顶堆，堆的大小为数组的个数，即为 20，把每个数组最大的值存到堆中。</p><p>接着删除堆顶元素，保存到另一个大小为 500 的数组中，然后向大顶堆插入删除的元素所在数组的下一个元素。</p><p>重复上面的步骤，直到删除完第 500 个元素，也即找出了最大的前 500 个数。</p><p>为了在堆中取出一个数据后，能知道它是从哪个数组中取出的，从而可以从这个数组中取下一个值，可以把数组的指针存放到堆中，对这个指针提供比较大小的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author https://github.com/yanglbme */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataWithSource</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataWithSource</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 数值     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token comment">/**     * 记录数值来源的数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> source<span class="token punctuation">;</span>    <span class="token comment">/**     * 记录数值在数组中的索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DataWithSource</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * 由于 PriorityQueue 使用小顶堆来实现，这里通过修改     * 两个整数的比较逻辑来让 PriorityQueue 变成大顶堆     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">DataWithSource</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rowSize <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> columnSize <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 创建一个columnSize大小的数组，存放结果</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>columnSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataWithSource</span><span class="token punctuation">></span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将每个数组的最大一个元素放入堆中</span>            <span class="token class-name">DataWithSource</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataWithSource</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> columnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除堆顶元素</span>            <span class="token class-name">DataWithSource</span> d <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> columnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            d<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>d<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">setIndex</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> top <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30, 29, 25, 20, 19]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="十一、大数据中-TopK-问题的常用套路"><a href="#十一、大数据中-TopK-问题的常用套路" class="headerlink" title="十一、大数据中 TopK 问题的常用套路"></a>十一、大数据中 TopK 问题的常用套路</h1><p>对于海量数据到处理经常会涉及到 topK 问题。在设计数据结构和算法的时候，主要需要考虑的应该是当前算法（包括数据结构）跟给定情境（比如数据量级、数据类型）的适配程度，和当前问题最核心的瓶颈（如降低时间复杂度，还是降低空间复杂度）是什么。</p><p>首先，我们来举几个常见的 topK 问题的例子：</p><blockquote><p>给定 100 个 int 数字，在其中找出最大的 10 个；</p><p>给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字可以无序）；</p><p>给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字依次排序）；</p><p>给定 10 亿个不重复的 int 数字，在其中找出最大的 10 个；</p><p>给定 10 个数组，每个数组中有 1 亿个 int 数字，在其中找出最大的 10 个；</p><p>给定 10 亿个 string 类型的数字，在其中找出最大的 10 个（仅需要查 1 次）；</p><p>给定 10 亿个 string 类型的数字，在其中找出最大的 k 个（需要反复多次查询，其中 k 是一个随机数字）。</p></blockquote><p>上面这些问题看起来很相似，但是解决的方式却千差万别。</p><p>稍有不慎，就可能使得 topK 问题成为系统的瓶颈。不过也不用太担心，接下来我会总结几种常见的解决思路，遇到问题的时候，大家把这些基础思路融会贯通并且杂糅组合，即可做到见招拆招。</p><h2 id="1-堆排序法"><a href="#1-堆排序法" class="headerlink" title="1. 堆排序法"></a>1. 堆排序法</h2><p>这里说的是堆排序法，而不是快排或者希尔排序。虽然理论时间复杂度都是 O(nlogn)，但是堆排在做 topK 的时候有一个优势，就是可以维护一个仅包含 k 个数字的小顶堆（想清楚，为啥是小顶堆哦），当新加入的数字大于堆顶数字的时候，将堆顶元素剔除，并加入新的数字。</p><p>用 C++ 来说明，堆在 stl 中是 priority_queue（不是 set）。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> topK <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    priority_queue<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">,</span> greater<span class="token punctuation">&lt;</span><span class="token punctuation">></span><span class="token punctuation">></span></span> pq<span class="token punctuation">;</span>    <span class="token comment">// 小顶堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> auto<span class="token operator">&amp;</span> x <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> topK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果超出个数，则弹出堆顶（最小的）数据</span>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 输出依次为7,8,9</span>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-类似快排法"><a href="#2-类似快排法" class="headerlink" title="2. 类似快排法"></a>2. 类似快排法</h2><p>快排大家都知道，针对 topK 问题，可以对快排进行改进。仅对部分数据进行递归计算。</p><p>比如，在 100 个数字中，找最大的 10 个，第一次循环的时候，povit 被移动到了 80 的位置，则接下来仅需要在后面的 20 个数字中找最大的 10 个即可。</p><p>这样做的优势是，理论最优时间复杂度可以达到 O(n)，不过平均时间复杂度还是 O(nlogn)。需要说明的是，通过这种方式，找出来的最大的 k 个数字之间，是无序的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> povit <span class="token operator">=</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">partSort</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> povit <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> povit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> povit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">getMaxNumbers</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把求最大的k个数，转换成求最小的size-k个数字</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> size <span class="token operator">-</span> k<span class="token punctuation">;</span>    <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">ret</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    auto ret <span class="token operator">=</span> <span class="token function">getMaxNumbers</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>auto x <span class="token operator">:</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 输出7，8，9（理论上无序）</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-使用-bitmap"><a href="#3-使用-bitmap" class="headerlink" title="3. 使用 bitmap"></a>3. 使用 bitmap</h2><p>有时候 topK 问题会遇到数据量过大，内存无法全部加载。这个时候，可以考虑将数据存放至 bitmap 中，方便查询。</p><p>比如，给出 10 个 int 类型的数据，分别是【13，12，11，1，2，3，4，5，6，7】，int 类型的数据每个占据 4 个字节，那这个数组就占据了 40 个字节。</p><p>现在，把它们放到一个 16 个长度 bool 的 bitmap 中，结果就是【0，1，1，1，1，1，1，1，0，0，0，1，1，1，0，0】，在将空间占用降低至 4 字节的同时，也可以很方便的看出，最大的 3 个数字，分别是 11，12 和 13。</p><p>需要说明的是，bitmap 结合跳表一起使用往往有奇效。比如以上数据还可以记录成：从第 1 位开始，有连续 7 个 1；从第 11 位开始，有连续 3 个 1。这样做，空间复杂度又得到了进一步的降低。</p><p>这种做法的优势，当然是降低了空间复杂度。不过需要注意一点，bitmap 比较适合不重复且有范围（比如，数据均在 0 ～ 10 亿之间）的数据的查询。至于有重复数据的情况，可以考虑与 hash 等结构的混用。</p><h2 id="4-使用-hash"><a href="#4-使用-hash" class="headerlink" title="4. 使用 hash"></a>4. 使用 hash</h2><p>如果遇到了查询 string 类型数据的大小，可以考虑 hash 方法。</p><p>举个例子，10 个 string 数字【”1001”，”23”，”1002”，”3003”，”2001”，”1111”，”65”，”834”，”5”，”987”】找最大的 3 个。我们先通过长度进行 hash，得到长度最大为 4，且有 5 个长度为 4 的 string。接下来再通过最高位值做 hash，发现有 1 个最高位为”3”的，1 个为”2”的，3 个为”1”的。接下来，可以通过再设计 hash 函数，或者是循环的方式，在 3 个最高位为”1”的 string 中找到最大的一个，即可找到 3 个最值大的数据。</p><p>这种方法比较适合网址或者电话号码的查询。缺点就是如果需要多次查询的话，需要多次计算 hash，并且需要根据实际情况设计多个 hash 函数。</p><h2 id="5-字典树"><a href="#5-字典树" class="headerlink" title="5. 字典树"></a>5. 字典树</h2><p>字典树（trie）的具体结构和查询方式，不在这里赘述了，自行百度一下就有很多。这里主要说一下优缺点。</p><p>字典树的思想，还是通过前期建立索引信息，后期可以反复多次查询，并且后期增删数据也很方便。比较适合于需要反复多次查询的情况。</p><p>比如，反复多次查询字符序（例如：z&gt;y&gt;…&gt;b&gt;a）最大的 k 个 url 这种，使用字典树把数据存储一遍，就非常适合。既减少了空间复杂度，也加速了查询效率。</p><h2 id="6-混合查询"><a href="#6-混合查询" class="headerlink" title="6. 混合查询"></a>6. 混合查询</h2><p>以上几种方法，都是比较独立的方法。其实，在实际工作中，遇到更多的问题还是混合问题，这就需要我们对相关的内容，融会贯通并且做到活学活用。</p><p>我举个例子：我们的分布式服务跑在 10 台不同机器上，每台机器上部署的服务均被请求 10000 次，并且记录了个这 10000 次请求的耗时（耗时值为 int 数据），找出这 10*10000 次请求中，从高到低的找出耗时最大的 50 个。看看这个问题，很现实吧。我们试着用上面介绍的方法，组合一下来求解。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先，对每台机器上的 10000 个做类似快排，找出每台机器上 top50 的耗时信息。此时，单机上的这 50 条数据是无序的。</p><p>然后，再将 10 台机器上的 50 条数据（共 500 条）放到一起，再做一次类似快排，找到最大的 50 个（此时应该这 50 个应该是无序的）。</p><p>最后，对这 50 个数据做快排，从而得到最终结果。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>首先通过堆排，分别找出 10 台机器上耗时最高的 50 个数据，此时的这 50 个数据，已经是从大到小有序的了。</p><p>然后，我们依次取出 10 台机器中，耗时最高的 5 条放入小顶堆中。</p><p>最后，遍历 10 台机器上的数据，每台机器从第 6 个数据开始往下循环，如果这个值比堆顶的数据大，则抛掉堆顶数据并且把它加入，继续用下一个值进行同样比较。如果这个值比堆顶的值小，则结束当前循环，并且在下一台机器上做同样操作。</p><p>以上我介绍了两种方法，并不是为了说明哪种方法更好，或者时间复杂度更低。而是想说同样的事情有多种不同的解决方法，而且随着数据量的增加，可能会需要更多组合形式。在这个领域，数据决定了数据结构，数据结构决定了算法。</p><p>没有最好的方法，只有不断找寻更好的方法的程序员。适合的，才会是最好的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和拦截器</title>
      <link href="/2022/10/25/java/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/10/25/java/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-过滤器（Filter）"><a href="#1-过滤器（Filter）" class="headerlink" title="1. 过滤器（Filter）"></a>1. 过滤器（Filter）</h2><p>Servlet 中的过滤器 Filter 实现了 javax.servlet.Filter 接口的服务器端程序，主要用途是设置字符集（CharacterEncodingFilter）、控制权限、控制转向、用户是否已经登陆、有没有权限访问该页面等。</p><p>其工作原理是，只要你在 web.xml 文件配置好要拦截的客户端请求，它都会帮你拦截到请求。此时，其实你可以对请求或响应（request、response）统一设置编码；它随 web 应用启动而启动，只初始化一次，以后就可以拦截相关请求。只有当你的 web 应用停止或重新部署的时候才销毁。</p><ul><li>Filter 可以认为是 Servlet 的一种”加强版”。它主要用于对用户请求进行预处理，也可以对 HttpServletResponse 进行后处理，是个典型的处理链；</li><li>Filter 可以对用户请求生成响应，和 Servlet 相同；</li><li>处理流程：用户请求 -&gt; Filter 预处理 -&gt; Servlet 处理请求生成响应 -&gt; Filter 对响应进行后处理。</li></ul><h3 id="1-1-Filter-的用处"><a href="#1-1-Filter-的用处" class="headerlink" title="1.1 Filter 的用处"></a><strong>1.1 Filter 的用处</strong></h3><ul><li>在 HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest；</li><li>根据需要检查 HttpServletRequest，也可以修改 HttpServletRequest 头和数据；</li><li>在 HttpServletResponse 到达客户端之前，拦截 HttpServletResponse；</li><li>根据需要检查 HttpServletResponse，也可以修改 HttpServletResponse头和数据。</li></ul><h3 id="1-2-Filter-的种类"><a href="#1-2-Filter-的种类" class="headerlink" title="1.2 Filter 的种类"></a><strong>1.2 Filter 的种类</strong></h3><ul><li>用户授权的 Filter：Filter 负责检查用户请求，根据请求过滤用户非法请求；</li><li>日志 Filter：详细记录某些特殊的用户请求；</li><li>负责解码的 Filter：包括对非标准编码的请求解码；</li><li>能改变 XML 内容的 XSLT Filter 等。</li></ul><p>Filter 可以负责拦截多个请求或响应，一个请求或响应也可以被多个 Filter 拦截。</p><h3 id="1-3-创建-Filter-的步骤"><a href="#1-3-创建-Filter-的步骤" class="headerlink" title="1.3 创建 Filter 的步骤"></a><strong>1.3 创建 Filter 的步骤</strong></h3><ol><li>创建 Filter 处理类，并实现 javax.servlet.Filter 接口；</li><li>web.xml 文件中配置 Filter（或者使用 @WebFilter 注解）。</li></ol><p>javax.servlet.Filter 接口中定义了三个方法：</p><ul><li>void init(FilterConfig config) 用于完成 Filter 的初始化；</li><li>void destory() 用于 Filter 销毁前，完成某些资源的回收；</li><li>void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) 实现过滤功能。 </li></ul><p>doFilter 方法就是对每个请求及响应增加的额外处理。该方法可以实现对用户请求进行预处理（ServletRequest request），也可实现对服务器响应进行后处理(ServletResponse response）。它们的分界线为，是否调用了 chain.doFilter()。执行该方法之前，即对用户请求进行预处理；执行该方法之后，即对服务器响应进行后处理。</p><h2 id="2-拦截器（Interceptor）"><a href="#2-拦截器（Interceptor）" class="headerlink" title="2. 拦截器（Interceptor）"></a><strong>2. 拦截器（Interceptor）</strong></h2><p>拦截器是在面向切面编程中应用的，就是 service 或一个方法前/后调用一个方法。是基础 Java 的反射机制。拦截不是在 web.xml，而是在 AOP（Aspect-Oriented Programming）中用于某个方法或字段被访问之前，进行拦截。然后在之前或之后加入某些操作，甚至在抛出异常的时候做业务逻辑的操作。拦击器是 AOP 的一种实现策略。</p><h3 id="2-1-拦截器的实现方式"><a href="#2-1-拦截器的实现方式" class="headerlink" title="2.1 拦截器的实现方式"></a><strong>2.1 拦截器的实现方式</strong></h3><p>SpringMVC 中的 Interceptor 拦截请求是通过 HandlerInterceptor 来实现的。在 SpringMVC 中定义 Interceptor 主要有两种方式：</p><ul><li>实现 Spring 的 HandlerInterceptor 接口或者继承了实现 HandlerInterceptor 接口的类（比如 HandlerInterceptorAdapter）；</li><li>实现 Spring 的 WebRequestInterceptor 接口，或者继承了实现 WebRequestInterceptor 接口的类。</li></ul><p>Interceptor 中的方法：</p><p><strong>preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 方法</strong></p><p>顾名思义，该方法将在请求处理之前进行调用。</p><p>SpringMVC 中的 Interceptor 是链式调用。在一个应用中或者说是在一个请求中可以同时存在多个 Interceptor，每个 Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是 Interceptor 中的 preHandle 方法。</p><p>所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值 Boolean 类型的，当它返回为 false 时，表示请求结束，后续的 Interceptor 和Controller 都不会再执行；当返回值为 true 时就会继续调用下一个 Interceptor 的 preHandle 方法。如果已经是最后一个 Interceptor 的时候就会是调用当前请求的Controller 方法。</p><p><strong>postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 方法</strong></p><p>由 preHandle 方法的解释我们知道，这个方法包括后面要说到的 afterCompletion 方法都只能是在当前所属的 Interceptor 的 preHandle 方法的返回值为 true 时才能被调用。</p><p>postHandle 方法，顾名思义就是在当前请求进行处理之后，也就是 Controller 方法调用之后执行，但是它会在 DispatcherServlet 进行视图返回渲染之前被调用。所以，我们可以在这个方法中对 Controller 处理之后的 ModelAndView 对象进行操作。</p><p>postHandle 方法被调用的方向跟 preHandle 是相反的。也就是说，先声明的 Interceptor 的 postHandle 方法反而会后执行。这和 Struts2 里面的 Interceptor 的执行过程有点类似。Struts2 里面的 Interceptor 的执行过程也是链式的，只是在 Struts2 里面需要手动调用 ActionInvocation 的 invoke 方法来触发对下一个 Interceptor 或者是 Action 的调用，然后每一个 Interceptor 中在 invoke 方法调用之前的内容都是按照声明顺序执行的，而 invoke 方法之后的内容就是反向的。</p><p><strong>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex) 方法</strong></p><p>该方法也是需要当前对应的 Interceptor 的p reHandle 方法的返回值为 true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在 DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptorAdapter</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecuteTimeInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ExecuteTimeInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//before the actual handler will be executed</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>        <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"startTime"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//after the handler is executed</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"startTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//统计耗时</span>        <span class="token keyword">long</span> executeTime <span class="token operator">=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        <span class="token comment">//modified the exisitng modelAndView</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"executeTime"</span><span class="token punctuation">,</span>executeTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//log it</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> handler <span class="token operator">+</span> <span class="token string">"] executeTime : "</span> <span class="token operator">+</span> executeTime <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>非 SpringBoot 项目</strong></p><p>使用 mvc:interceptors 标签来声明需要加入到 SpringMVC 拦截器链中的拦截器。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.app.web.interceptor.AllInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.authorization.interceptor.SecurityInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.authorization.interceptor.SecuritySystemInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>可以利用 mvc:interceptors 标签声明一系列的拦截器，然后它们就可以形成一个拦截器链。拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的 preHandle 方法会先执行，然而它的 postHandle 方法和 afterCompletion 方法却会后执行。</p><p>在 mvc:interceptors 标签下声明 interceptor 主要有两种方式：</p><ul><li>直接定义一个 Interceptor 实现类的 bean 对象。使用这种方式声明的 Interceptor 拦截器将会对所有的请求进行拦截；</li><li>使用 mvc:interceptor 标签进行声明。使用这种方式进行声明的 Interceptor 可以通过 mvc:mapping 子标签来定义需要进行拦截的请求路径。</li></ul><p>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p><p><strong>Spring Boot 项目</strong></p><p>配置拦截器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebAppConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 配置拦截器     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 多个拦截器组成一个拦截器链</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecuteTimeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//API限流拦截</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">accessLimitAjaxInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">,</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">accessInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">,</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-2-拦截器（interceptor）使用"><a href="#2-2-拦截器（interceptor）使用" class="headerlink" title="2.2 拦截器（interceptor）使用"></a><strong>2.2 拦截器（interceptor）使用</strong></h3><ol><li>请求到达 DispatcherServlet；</li><li>DispatcherServlet 发送至 Interceptor，执行 preHandler；</li><li>请求到达 Controller；</li><li>请求结束后，执行 postHandler。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="3-过滤器（Filter）与-拦截器（Interceptor）的区别"><a href="#3-过滤器（Filter）与-拦截器（Interceptor）的区别" class="headerlink" title="3. 过滤器（Filter）与 拦截器（Interceptor）的区别"></a><strong>3. 过滤器（Filter）与 拦截器（Interceptor）的区别</strong></h2><p>Spring 的 Interceptor（拦截器）与 Servlet 的 Filter 有相似之处，比如二者都是 AOP 编程思想的体现，都能实现权限检查、日志记录等。</p><p>不同之处总结如下：</p><p><img src="%E5%8C%BA%E5%88%AB.png" alt="区别"></p><h3 id="3-1-执行顺序"><a href="#3-1-执行顺序" class="headerlink" title="3.1 执行顺序"></a><strong>3.1 执行顺序</strong></h3><p>用户请求 -&gt; 过滤前 -&gt; 拦截前 -&gt; Action处理 -&gt; 拦截后 -&gt; 过滤后 -&gt; 响应</p><p><img src="%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="执行顺序"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="4-过滤器（Filter）与-拦截器（Interceptor）常见用途"><a href="#4-过滤器（Filter）与-拦截器（Interceptor）常见用途" class="headerlink" title="4. 过滤器（Filter）与 拦截器（Interceptor）常见用途"></a><strong>4. 过滤器（Filter）与 拦截器（Interceptor）常见用途</strong></h2><ul><li>Authentication Filters</li><li>Logging and Auditing Filtersx</li><li>Image conversion Filters</li><li>Data compression Filters</li><li>Encryption Filters</li><li>Tokenizing Filters</li><li>Filters that trigger resource access events</li><li>XSL/T filters</li><li>Mime-type chain Filter</li></ul><p><strong>Request Filters</strong> 可以实现：</p><ul><li>执行安全检查</li><li>格式化请求头和主体 </li><li>审查或者记录日志</li><li>根据请求内容授权或者限制用户访问</li><li>根据请求频率限制用户访问</li></ul><p><strong>Response Filters</strong> 可以实现</p><ul><li>压缩响应内容：比如让下载的内容更小</li><li>追加或者修改响应</li><li>创建或者整体修改响应</li><li>根据地方不同修改响应内容</li></ul><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h2><p><strong>过滤器</strong></p><p>所谓过滤器顾名思义是用来过滤的。在 Java Web中，传入的 request、response 提前过滤掉一些信息，或者提前设置一些参数；然后再传入 Servlet 或者 Struts 的 action 进行业务逻辑。比如，过滤掉非法 URL（不是 login.do 的地址请求，如果用户没有登陆都过滤掉），或者在传入 Servlet 或者 Struts 的 action 前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。</p><p>Filter 流程是线性的， URL 传来之后，检查之后，可保持原来的流程继续向下执行，被下一个 filter、servlet 接收等。</p><p><strong>Java 的拦截器</strong></p><p>主要是用在插件上，扩展件上比如 Hibernate Spring Struts2等 有点类似面向切片的技术，在用之前先要在配置文件即 XML 文件里进行对应的声明。</p><p>拦截器（Interceptor）是基于 Java 的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter 能做的事情，拦截器都能做，而且可以在请求前、请求后执行，比较灵活。Filter 主要是针对 URL 地址做一个编码的事情、过滤掉没用的参数、安全校验（比如登录不登录之类），太细的话，还是建议用拦截器。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/2022/10/14/java/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/10/14/java/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="java命名规范"><a href="#java命名规范" class="headerlink" title="java命名规范"></a>java命名规范</h1><p>​    简洁清爽的代码风格应该是大多数工程师所期待的。在工作中笔者常常因为起名字而纠结，命名已经成为我工作中的拦路虎，夸张点可以说是编程5分钟，命名两小时！</p><p>​    每个公司都有不同的标准，目的是为了保持统一，减少沟通成本，提升团队研发效能。所以本文中是笔者结合阿里巴巴开发规范，以及工作中的见闻针对Java领域相关命名进行整理和总结，仅供参考。</p><h2 id="一、-Java中的命名规范"><a href="#一、-Java中的命名规范" class="headerlink" title="一、 Java中的命名规范"></a>一、 Java中的命名规范</h2><p>好的命名能体现出代码的特征，含义或者是用途，让阅读者可以根据名称的含义快速厘清程序的脉络。不同语言中采用的命名形式大相径庭，Java中常用到的命名形式共有三种，既首字母大写的UpperCamelCase，首字母小写的lowerCamelCase以及全部大写的并用下划线分割单词的UPPERCAMELUNSER_SCORE。通常约定，<strong>类一般采用大驼峰命名，方法和局部变量使用小驼峰命名，而大写下划线命名通常是常量和枚举中使用。</strong></p><table><thead><tr><th align="center">类型(名)</th><th align="center">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">全部小写 多个单词用中划线分隔‘-’</td><td align="center">spring-cloud</td></tr><tr><td align="center">包</td><td align="center">全部小写</td><td align="center">com.alibaba.fastjson</td></tr><tr><td align="center">类</td><td align="center">单词首字母大写</td><td align="center">Feature, FieldDeserializer</td></tr><tr><td align="center">变量</td><td align="center">首字母小写 多个单词组成时， 除首个单词 其他单词首字母都要大写</td><td align="center">password,  userName</td></tr><tr><td align="center">常量</td><td align="center">全部大写，多个单词，用’_’分隔</td><td align="center">CACHEEXPIREDTIME</td></tr><tr><td align="center">方法</td><td align="center">同变量</td><td align="center">read(),  getById(Long id)</td></tr></tbody></table><h2 id="二、-包命名"><a href="#二、-包命名" class="headerlink" title="二、 包命名"></a>二、 包命名</h2><p><strong>包名</strong> 统一使用<strong>小写</strong> ，<strong>点分隔符</strong> 之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace不需要使用任何分割）。包名统一使用单数形式，如果类命有复数含义，则可以使用复数形式。</p><p>包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。常见的前缀可以分为以下几种：</p><table><thead><tr><th align="center">前缀</th><th align="center">例</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">indi 或 onem</td><td align="center">indi.发起者名.项目名.模块名.……</td><td align="center">个体项目 个人发起，但非自己独自完成 可公开或私有项目， copyright主要属于发起者。</td></tr><tr><td align="center">pers</td><td align="center">pers.个人名.项目名.模块名.……</td><td align="center">个人项目 指个人发起，独自完成， 可分享的项目 copyright主要属于个人</td></tr><tr><td align="center">priv</td><td align="center">priv.个人名.项目名.模块名.……</td><td align="center">私有项目，指个人发起，独自完成 非公开的私人使用的项目， copyright属于个人。</td></tr><tr><td align="center">team</td><td align="center">team.团队名.项目名.模块名.……</td><td align="center">团队项目，指由团队发起 并由该团队开发的项目 copyright属于该团队所有</td></tr><tr><td align="center">顶级域名</td><td align="center">com.公司名.项目名.模块名.……</td><td align="center">公司项目 copyright由项目发起的公司所有</td></tr></tbody></table><h2 id="三、-类命名"><a href="#三、-类命名" class="headerlink" title="三、 类命名"></a>三、 类命名</h2><p><strong>类名使用大驼峰命名形式</strong> ，类命通常时<strong>名词或名词短语</strong> ，接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如Cloneable，Callable等，表示实现该接口的类有某种功能或能力。对于测试类则以它要测试的类开头，以Test结尾，如HashMapTest。</p><p>对于一些特殊特有名词缩写也可以使用全大写命名，比如XMLHttpRequest，不过笔者认为缩写三个字母以内都大写，超过三个字母则按照要给单词算。这个没有标准如阿里巴巴中fastjson用JSONObject作为类命，而google则使用JsonObjectRequest命名，对于这种特殊的缩写，原则是统一就好。</p><table><thead><tr><th align="left">属性(类)</th><th align="left">约束</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">抽象</td><td align="left">Abstract  或 Base 开头</td><td align="left">BaseUserService</td></tr><tr><td align="left">枚举</td><td align="left">Enum 作为后缀</td><td align="left">OSType</td></tr><tr><td align="left">工具</td><td align="left">Utils作为后缀</td><td align="left">StringUtils</td></tr><tr><td align="left">异常</td><td align="left">Exception结尾</td><td align="left">RuntimeException</td></tr><tr><td align="left">接口实现</td><td align="left">接口名+ Impl</td><td align="left">UserServiceImpl</td></tr><tr><td align="left">领域模型相</td><td align="left">/DO/DTO/VO/DAO</td><td align="left">正例：UserDAO 反例：UserDao</td></tr><tr><td align="left">设计模式相关</td><td align="left">Builder，Factory等</td><td align="left">当使用到设计模式时 要使用对应的设计模式作为后缀 如ThreadFactory</td></tr><tr><td align="left">处理特定功能</td><td align="left">Handler，Predicate Validator</td><td align="left">表示处理器，校验器，断言 这些类工厂还有配套的方法名 如handle，predicate，validate</td></tr><tr><td align="left">测试</td><td align="left">Test后缀</td><td align="left">UserServiceTest 表示用来测试UserService类的</td></tr><tr><td align="left">MVC分层</td><td align="left">Controller，Service ServiceImpl，DAO 后缀</td><td align="left">UserManageController UserManageDAO</td></tr></tbody></table><h2 id="四、-方法"><a href="#四、-方法" class="headerlink" title="四、 方法"></a>四、 方法</h2><p><strong>方法命名采用小驼峰的形式</strong> ，首字小写，往后的每个单词首字母都要大写。和类名不同的是，方法命名一般为<strong>动词或动词短语</strong> ，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p><h3 id="4-1-返回真伪值的方法"><a href="#4-1-返回真伪值的方法" class="headerlink" title="4.1 返回真伪值的方法"></a>4.1 返回真伪值的方法</h3><p>注：pre- prefix前缀，suf- suffix后缀，alo-alone 单独使用</p><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">is</td><td align="left">对象是否符合期待的状态</td><td align="left">isValid</td></tr><tr><td align="left">pre</td><td align="left">can</td><td align="left">对象<strong>能否执行</strong> 所期待的动作</td><td align="left">canRemove</td></tr><tr><td align="left">pre</td><td align="left">should</td><td align="left">调用方执行某个命令 或方法是<strong>好还是不好</strong> <strong>应不应该</strong>， 或者说<strong>推荐还是不推荐</strong></td><td align="left">shouldMigrate</td></tr><tr><td align="left">pre</td><td align="left">has</td><td align="left">对象<strong>是否持有</strong> 所期待的数据和属性</td><td align="left">hasObservers</td></tr><tr><td align="left">pre</td><td align="left">needs</td><td align="left">调用方<strong>是否需要</strong> 执行某个命令或方法</td><td align="left">needsMigrate</td></tr></tbody></table><h3 id="4-2-用来检查的方法"><a href="#4-2-用来检查的方法" class="headerlink" title="4.2 用来检查的方法"></a>4.2 用来检查的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">ensure</td><td align="left">检查是否为期待的状态 不是则抛出异常或返回error code</td><td align="left">ensureCapacity</td></tr><tr><td align="left">validate</td><td align="left">检查是否为正确的状态 不是则抛出异常或返回error code</td><td align="left">validateInputs</td></tr></tbody></table><h3 id="4-3-按需求才执行的方法"><a href="#4-3-按需求才执行的方法" class="headerlink" title="4.3 按需求才执行的方法"></a>4.3 按需求才执行的方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">suf</td><td align="left">IfNeeded</td><td align="left">需要的时候执行 不需要则什么都不做</td><td align="left">drawIfNeeded</td></tr><tr><td align="left">pre</td><td align="left">might</td><td align="left">同上</td><td align="left">mightCreate</td></tr><tr><td align="left">pre</td><td align="left">try</td><td align="left">尝试执行 失败时抛出异常 或是返回errorcode</td><td align="left">tryCreate</td></tr><tr><td align="left">suf</td><td align="left">OrDefault</td><td align="left">尝试执行 失败时返回默认值</td><td align="left">getOrDefault</td></tr><tr><td align="left">suf</td><td align="left">OrElse</td><td align="left">尝试执行 失败时返回 实际参数中指定的值</td><td align="left">getOrElse</td></tr><tr><td align="left">pre</td><td align="left">force</td><td align="left">强制尝试执行 error抛出异常或是返回值</td><td align="left">forceCreate,  forceStop</td></tr></tbody></table><h3 id="4-4-异步相关方法"><a href="#4-4-异步相关方法" class="headerlink" title="4.4 异步相关方法"></a>4.4 异步相关方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">blocking</td><td align="left">线程阻塞方法</td><td align="left">blockingGetUser</td></tr><tr><td align="left">suf</td><td align="left">InBackground</td><td align="left">执行在后台线程</td><td align="left">doInBackground</td></tr><tr><td align="left">suf</td><td align="left">Async</td><td align="left">异步方法</td><td align="left">sendAsync</td></tr><tr><td align="left">suf</td><td align="left">Sync</td><td align="left">同步方法</td><td align="left">sendSync</td></tr><tr><td align="left">pre / alo</td><td align="left">schedule</td><td align="left">Job和Tas k放入队列</td><td align="left">schedule,  scheduleJob</td></tr><tr><td align="left">pre / alo</td><td align="left">post</td><td align="left">同上</td><td align="left">postJob</td></tr><tr><td align="left">pre / alo</td><td align="left">execute</td><td align="left">执行异步 或同步方法</td><td align="left">execute, executeTask</td></tr><tr><td align="left">pre / alo</td><td align="left">start</td><td align="left">同上</td><td align="left">star, tstartJob</td></tr><tr><td align="left">pre / alo</td><td align="left">cancel</td><td align="left">停止异步方法</td><td align="left">cance, cancelJob</td></tr><tr><td align="left">pre / alo</td><td align="left">stop</td><td align="left">同上</td><td align="left">stop,stopJob</td></tr></tbody></table><h3 id="4-5-回调方法"><a href="#4-5-回调方法" class="headerlink" title="4.5 回调方法"></a>4.5 回调方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">on</td><td align="left">事件发生时执行</td><td align="left">onCompleted</td></tr><tr><td align="left">pre</td><td align="left">before</td><td align="left">事件发生前执行</td><td align="left">beforeUpdate</td></tr><tr><td align="left">pre</td><td align="left">pre</td><td align="left">同上</td><td align="left">preUpdate</td></tr><tr><td align="left">pre</td><td align="left">will</td><td align="left">同上</td><td align="left">willUpdate</td></tr><tr><td align="left">pre</td><td align="left">after</td><td align="left">事件发生后执行</td><td align="left">afterUpdate</td></tr><tr><td align="left">pre</td><td align="left">post</td><td align="left">同上</td><td align="left">postUpdate</td></tr><tr><td align="left">pre</td><td align="left">did</td><td align="left">同上</td><td align="left">didUpdate</td></tr><tr><td align="left">pre</td><td align="left">should</td><td align="left">确认事件 是否可以执行</td><td align="left">shouldUpdate</td></tr></tbody></table><h3 id="4-6-操作对象生命周期的方法"><a href="#4-6-操作对象生命周期的方法" class="headerlink" title="4.6 操作对象生命周期的方法"></a>4.6 操作对象生命周期的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">initialize</td><td align="left">初始化或延迟初始化使用</td><td align="left">initialize</td></tr><tr><td align="left">pause</td><td align="left">暂停</td><td align="left">onPause , pause</td></tr><tr><td align="left">stop</td><td align="left">停止</td><td align="left">onStop, stop</td></tr><tr><td align="left">abandon</td><td align="left">销毁的替代</td><td align="left">abandon</td></tr><tr><td align="left">destroy</td><td align="left">同上</td><td align="left">destroy</td></tr><tr><td align="left">dispose</td><td align="left">同上</td><td align="left">dispose</td></tr></tbody></table><h3 id="4-7-与集合操作相关的方法"><a href="#4-7-与集合操作相关的方法" class="headerlink" title="4.7 与集合操作相关的方法"></a>4.7 与集合操作相关的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">contains</td><td align="left">是包含指定对象相同的对象</td><td align="left">contains</td></tr><tr><td align="left">add</td><td align="left">添加</td><td align="left">addJob</td></tr><tr><td align="left">append</td><td align="left">添加</td><td align="left">appendJob</td></tr><tr><td align="left">insert</td><td align="left">插入到下标n</td><td align="left">insertJob</td></tr><tr><td align="left">put</td><td align="left">添加与key对应的元素</td><td align="left">putJob</td></tr><tr><td align="left">remove</td><td align="left">移除元素</td><td align="left">removeJob</td></tr><tr><td align="left">enqueue</td><td align="left">添加到队列的最末位</td><td align="left">enqueueJob</td></tr><tr><td align="left">dequeue</td><td align="left">从队列中头部取出并移除</td><td align="left">dequeueJob</td></tr><tr><td align="left">push</td><td align="left">添加到栈头</td><td align="left">pushJob</td></tr><tr><td align="left">pop</td><td align="left">从栈头取出并移除</td><td align="left">popJob</td></tr><tr><td align="left">peek</td><td align="left">从栈头取出但不移除</td><td align="left">peekJob</td></tr><tr><td align="left">find</td><td align="left">寻找符合条件的某物</td><td align="left">findById</td></tr></tbody></table><h3 id="4-8-与数据相关的方法"><a href="#4-8-与数据相关的方法" class="headerlink" title="4.8 与数据相关的方法"></a>4.8 与数据相关的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">create</td><td align="left">新创建</td><td align="left">createAccount</td></tr><tr><td align="left">new</td><td align="left">新创建</td><td align="left">newAccount</td></tr><tr><td align="left">from</td><td align="left">从既有的某物新建 或是从其他的数据新建</td><td align="left">fromConfig</td></tr><tr><td align="left">to</td><td align="left">转换</td><td align="left">toString</td></tr><tr><td align="left">update</td><td align="left">更新既有某物</td><td align="left">updateAccount</td></tr><tr><td align="left">load</td><td align="left">读取</td><td align="left">loadAccount</td></tr><tr><td align="left">fetch</td><td align="left">远程读取</td><td align="left">fetchAccount</td></tr><tr><td align="left">delete</td><td align="left">删除</td><td align="left">deleteAccount</td></tr><tr><td align="left">remove</td><td align="left">删除</td><td align="left">removeAccount</td></tr><tr><td align="left">save</td><td align="left">保存</td><td align="left">saveAccount</td></tr><tr><td align="left">store</td><td align="left">保存</td><td align="left">storeAccount</td></tr><tr><td align="left">commit</td><td align="left">保存</td><td align="left">commitChange</td></tr><tr><td align="left">apply</td><td align="left">保存或应用</td><td align="left">applyChange</td></tr><tr><td align="left">clear</td><td align="left">清除或是恢复到初始状态</td><td align="left">clearAll</td></tr><tr><td align="left">reset</td><td align="left">清除或是恢复到初始状态</td><td align="left">resetAll</td></tr></tbody></table><h3 id="4-9-成对出现的动词"><a href="#4-9-成对出现的动词" class="headerlink" title="4.9 成对出现的动词"></a>4.9 成对出现的动词</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">get获取</td><td align="left">set 设置</td></tr><tr><td align="left">add 增加</td><td align="left">remove 删除</td></tr><tr><td align="left">create 创建</td><td align="left">destory 移除</td></tr><tr><td align="left">start 启动</td><td align="left">stop 停止</td></tr><tr><td align="left">open 打开</td><td align="left">close 关闭</td></tr><tr><td align="left">read 读取</td><td align="left">write 写入</td></tr><tr><td align="left">load 载入</td><td align="left">save 保存</td></tr><tr><td align="left">create 创建</td><td align="left">destroy 销毁</td></tr><tr><td align="left">begin 开始</td><td align="left">end 结束</td></tr><tr><td align="left">backup 备份</td><td align="left">restore 恢复</td></tr><tr><td align="left">import 导入</td><td align="left">export 导出</td></tr><tr><td align="left">split 分割</td><td align="left">merge 合并</td></tr><tr><td align="left">inject 注入</td><td align="left">extract 提取</td></tr><tr><td align="left">attach 附着</td><td align="left">detach 脱离</td></tr><tr><td align="left">bind 绑定</td><td align="left">separate 分离</td></tr><tr><td align="left">view 查看</td><td align="left">browse 浏览</td></tr><tr><td align="left">edit 编辑</td><td align="left">modify 修改</td></tr><tr><td align="left">select 选取</td><td align="left">mark 标记</td></tr><tr><td align="left">copy 复制</td><td align="left">paste 粘贴</td></tr><tr><td align="left">undo 撤销</td><td align="left">redo 重做</td></tr><tr><td align="left">insert 插入</td><td align="left">delete 移除</td></tr><tr><td align="left">add 加入</td><td align="left">append 添加</td></tr><tr><td align="left">clean 清理</td><td align="left">clear 清除</td></tr><tr><td align="left">index 索引</td><td align="left">sort 排序</td></tr><tr><td align="left">find 查找</td><td align="left">search 搜索</td></tr><tr><td align="left">increase 增加</td><td align="left">decrease 减少</td></tr><tr><td align="left">play 播放</td><td align="left">pause 暂停</td></tr><tr><td align="left">launch 启动</td><td align="left">run 运行</td></tr><tr><td align="left">compile 编译</td><td align="left">execute 执行</td></tr><tr><td align="left">debug 调试</td><td align="left">trace 跟踪</td></tr><tr><td align="left">observe 观察</td><td align="left">listen 监听</td></tr><tr><td align="left">build 构建</td><td align="left">publish 发布</td></tr><tr><td align="left">input 输入</td><td align="left">output 输出</td></tr><tr><td align="left">encode 编码</td><td align="left">decode 解码</td></tr><tr><td align="left">encrypt 加密</td><td align="left">decrypt 解密</td></tr><tr><td align="left">compress 压缩</td><td align="left">decompress 解压缩</td></tr><tr><td align="left">pack 打包</td><td align="left">unpack 解包</td></tr><tr><td align="left">parse 解析</td><td align="left">emit 生成</td></tr><tr><td align="left">connect 连接</td><td align="left">disconnect 断开</td></tr><tr><td align="left">send 发送</td><td align="left">receive 接收</td></tr><tr><td align="left">download 下载</td><td align="left">upload 上传</td></tr><tr><td align="left">refresh 刷新</td><td align="left">synchronize 同步</td></tr><tr><td align="left">update 更新</td><td align="left">revert 复原</td></tr><tr><td align="left">lock 锁定</td><td align="left">unlock 解锁</td></tr><tr><td align="left">check out 签出</td><td align="left">check in 签入</td></tr><tr><td align="left">submit 提交</td><td align="left">commit 交付</td></tr><tr><td align="left">push 推</td><td align="left">pull 拉</td></tr><tr><td align="left">expand 展开</td><td align="left">collapse 折叠</td></tr><tr><td align="left">begin 起始</td><td align="left">end 结束</td></tr><tr><td align="left">start 开始</td><td align="left">finish 完成</td></tr><tr><td align="left">enter 进入</td><td align="left">exit 退出</td></tr><tr><td align="left">abort 放弃</td><td align="left">quit 离开</td></tr><tr><td align="left">obsolete 废弃</td><td align="left">depreciate 废旧</td></tr><tr><td align="left">collect 收集</td><td align="left">aggregate 聚集</td></tr></tbody></table><h2 id="五、-变量-amp-常量命名"><a href="#五、-变量-amp-常量命名" class="headerlink" title="五、 变量&amp;常量命名"></a>五、 变量&amp;常量命名</h2><h3 id="5-1-变量命名"><a href="#5-1-变量命名" class="headerlink" title="5.1 变量命名"></a>5.1 变量命名</h3><p>变量是指在程序运行中可以改变其值的量，包括成员变量和局部变量。变量名由多单词组成时，第一个单词的首字母小写，其后单词的首字母大写，俗称骆驼式命名法（也称驼峰命名法），如 computedValues，index、变量命名时，尽量简短且能清楚的表达变量的作用，命名体现具体的业务含义即可。</p><p>变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。pojo中的布尔变量，都不要加is(数据库中的布尔字段全都要加 is_ 前缀)。</p><h3 id="5-2-常量命名"><a href="#5-2-常量命名" class="headerlink" title="5.2 常量命名"></a>5.2 常量命名</h3><p>常量命名CONSTANT_CASE，一般采用全部大写（作为方法参数时除外），单词间用下划线分割。那么什么是常量呢？</p><p>常量是在作用域内保持不变的值，一般使用final进行修饰。一般分为三种，全局常量（public static final修饰），类内常量（private static final 修饰）以及局部常量（方法内，或者参数中的常量），局部常量比较特殊，通常采用小驼峰命名即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个demo **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**     * 局部常量(正例)     */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> USER_MESSAGE_CACHE_EXPIRE_TIME <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 局部常量(反例，命名不清晰）     */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MESSAGE_CACHE_TIME <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 全局常量     */</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ERROR_MESSAGE <span class="token operator">=</span> <span class="token string">" error message"</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 成员变量     */</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> currentUserId<span class="token punctuation">;</span>     <span class="token comment">/**     * 控制台打印 &#123;@code message&#125; 信息     *     * @param message 消息体，局部常量     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>常量一般都有自己的业务含义,<strong>不要害怕长度过长而进行省略或者缩写</strong> 。如，用户消息缓存过期时间的表示，那种方式更佳清晰，交给你来评判。</p><h2 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h2><ol><li>尽量不要使用拼音；<strong>杜绝拼音和英文混用</strong> 。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu</li><li>命名过程中尽量不要出现特殊的字符，常量除外。</li><li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li><li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li></ol><h2 id="六、-代码注释"><a href="#六、-代码注释" class="headerlink" title="六、 代码注释"></a>六、 代码注释</h2><h3 id="6-1-注释的原则"><a href="#6-1-注释的原则" class="headerlink" title="6.1 注释的原则"></a>6.1 注释的原则</h3><p>好的命名增加代码阅读性，代码的命名往往有严格的限制。而注释不同，程序员往往可以自由发挥，单并不意味着可以为所欲为之胡作非为。优雅的注释通常要满足三要素。</p><ol><li>Nothing is strange 没有注释的代码对于阅读者非常不友好，哪怕代码写的在清除，阅读者至少从心理上会有抵触，更何况代码中往往有许多复杂的逻辑，所以一定要写注释，不仅要记录代码的逻辑，还有说清楚修改的逻辑。</li><li>Less is more 从代码维护角度来讲，代码中的注释一定是精华中的精华。合理清晰的命名能让代码易于理解，对于逻辑简单且命名规范，能够清楚表达代码功能的代码不需要注释。滥用注释会增加额外的负担，更何况大部分都是废话。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据id获取信息【废话注释】getMessageById(id)</span></code></pre><ol><li>Advance with the time 注释应该随着代码的变动而改变，注释表达的信息要与代码中完全一致。通常情况下修改代码后一定要修改注释。</li></ol><h3 id="6-2-注释格式"><a href="#6-2-注释格式" class="headerlink" title="6.2 注释格式"></a>6.2 注释格式</h3><p>注释大体上可以分为两种，一种是javadoc注释，另一种是简单注释。javadoc注释可以生成JavaAPI为外部用户提供有效的支持javadoc注释通常在使用IDEA，或者Eclipse等开发工具时都可以自动生成，也支持自定义的注释模板，仅需要对对应的字段进行解释。参与同一项目开发的同学，尽量设置成相同的注释模板。</p><h4 id="a-包注释"><a href="#a-包注释" class="headerlink" title="a. 包注释"></a>a. 包注释</h4><p>包注释在工作中往往比较特殊，通过包注释可以快速知悉当前包下代码是用来实现哪些功能，强烈建议工作中加上，尤其是对于一些比较复杂的包，包注释一般在包的根目录下，名称统一为package-info.java。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 落地也质量检测 * 1. 用来解决什么问题 * 对广告主投放的广告落地页进行性能检测，模拟不同的系统，如Android，IOS等; 模拟不同的网络：2G，3G，4G，wifi等 * * 2. 如何实现 * 基于chrome浏览器，用chromedriver驱动浏览器，设置对应的网络，OS参数，获取到浏览器返回结果。 * * 注意：网络环境配置信息&#123;@link cn.mycookies.landingpagecheck.meta.NetWorkSpeedEnum&#125;目前使用是常规速度，可以根据实际情况进行调整 * * @author cruder * @time 2019/12/7 20:3 下午 */</span><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycookies<span class="token punctuation">.</span>landingpagecheck</span><span class="token punctuation">;</span></code></pre><h4 id="b-类注接"><a href="#b-类注接" class="headerlink" title="b. 类注接"></a>b. 类注接</h4><p>javadoc注释中，每个类都必须有注释。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Copyright (C), 2019-2020, Jann  balabala...** 类的介绍：这是一个用来做什么事情的类，有哪些功能，用到的技术.....** @author   类创建者姓名 保持对齐* @date     创建日期 保持对齐* @version  版本号 保持对齐*/</span></code></pre><p>在每个属性前面必须加上属性注释，通常有一下两种形式，至于怎么选择，你高兴就好，不过一个项目中要保持统一。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** 提示信息 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment">/** * 密码 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span></code></pre><h4 id="d-方法注释"><a href="#d-方法注释" class="headerlink" title="d. 方法注释"></a>d. 方法注释</h4><p>在每个方法前面必须加上方法注释，对于方法中的每个参数，以及返回值都要有说明。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 方法的详细说明，能干嘛，怎么实现的，注意事项...  *  * @param xxx      参数1的使用说明， 能否为null  * @return 返回结果的说明， 不同情况下会返回怎样的结果  * @throws 异常类型   注明从此类方法中抛出异常的说明  */</span></code></pre><h4 id="e-构造方法注释"><a href="#e-构造方法注释" class="headerlink" title="e. 构造方法注释"></a>e. 构造方法注释</h4><p>在每个构造方法前面必须加上注释，注释模板如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 构造方法的详细说明  *  * @param xxx      参数1的使用说明， 能否为null  * @throws 异常类型   注明从此类方法中抛出异常的说明  */</span></code></pre><p>而简单注释往往是需要工程师字节定义，在使用注释时应该注意一下几点：</p><ol><li>枚举类的各个属性值都要使用注释，枚举可以理解为是常量，通常不会发生改变，通常会被在多个地方引用，对枚举的修改和添加属性通常会带来很大的影响。</li><li>保持排版整洁，不要使用行尾注释；双斜杠和星号之后要用1个空格分隔。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 反例：不要使用行尾注释</span><span class="token comment">//反例：换行符与注释之间没有缩进</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// 正例：姓名</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">/** * 1. 多行注释 * * 2. 对于不同的逻辑说明，可以用空行分隔 */</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    无论是命名和注释，他们的目的都是为了让代码和工程师进行对话，增强代码的可读性，可维护性。优秀的代码往往能够见名知意，注释往往是对命名的补充和完善。命名太难了！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试</title>
      <link href="/2022/09/28/java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>/2022/09/28/java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="远程调试服务端端口配置"><a href="#远程调试服务端端口配置" class="headerlink" title="远程调试服务端端口配置"></a>远程调试服务端端口配置</h2><h4 id="正常jar包启动设置远程调试端口"><a href="#正常jar包启动设置远程调试端口" class="headerlink" title="正常jar包启动设置远程调试端口"></a>正常jar包启动设置远程调试端口</h4><h6 id="在启动命令里加入以下jvm参数，其中8082是远程调试端口号"><a href="#在启动命令里加入以下jvm参数，其中8082是远程调试端口号" class="headerlink" title="在启动命令里加入以下jvm参数，其中8082是远程调试端口号"></a>在启动命令里加入以下jvm参数，其中8082是远程调试端口号</h6><h6 id="Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-8082"><a href="#Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-8082" class="headerlink" title="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082"></a>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082</h6><h4 id="TAS启动设置远程调试端口"><a href="#TAS启动设置远程调试端口" class="headerlink" title="TAS启动设置远程调试端口"></a>TAS启动设置远程调试端口</h4><h6 id="在TAS文件夹下的jvm-ini文件里加入以下jvm参数，其中9978是远程调试端口号"><a href="#在TAS文件夹下的jvm-ini文件里加入以下jvm参数，其中9978是远程调试端口号" class="headerlink" title="在TAS文件夹下的jvm.ini文件里加入以下jvm参数，其中9978是远程调试端口号"></a>在TAS文件夹下的jvm.ini文件里加入以下jvm参数，其中9978是远程调试端口号</h6><h6 id="Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-9978"><a href="#Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-9978" class="headerlink" title="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9978"></a>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9978</h6><h2 id="远程调试客户端（idea-配置"><a href="#远程调试客户端（idea-配置" class="headerlink" title="远程调试客户端（idea)配置"></a>远程调试客户端（idea)配置</h2><h6 id="步骤：Run-gt-Edit-Configurations（图1）-gt-号-gt-Remote-JVM-Debug（图2）-gt-配置Remote信息（图2）。"><a href="#步骤：Run-gt-Edit-Configurations（图1）-gt-号-gt-Remote-JVM-Debug（图2）-gt-配置Remote信息（图2）。" class="headerlink" title="步骤：Run -&gt; Edit Configurations（图1）-&gt; +号-&gt; Remote JVM Debug（图2）-&gt; 配置Remote信息（图2）。"></a>步骤：Run -&gt; Edit Configurations（图1）-&gt; +号-&gt; Remote JVM Debug（图2）-&gt; 配置Remote信息（图2）。</h6><p><img src="%E5%9B%BE1.png" alt="图1"></p><p><img src="%E5%9B%BE2.png" alt="图2"></p><h6 id="Name：远程名称；"><a href="#Name：远程名称；" class="headerlink" title="Name：远程名称；"></a>Name：远程名称；</h6><h6 id="Debugger-mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。"><a href="#Debugger-mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。" class="headerlink" title="Debugger mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。"></a>Debugger mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。</h6><h6 id="Host：部署服务器Ip；"><a href="#Host：部署服务器Ip；" class="headerlink" title="Host：部署服务器Ip；"></a>Host：部署服务器Ip；</h6><h6 id="Port：远程调时端口号；"><a href="#Port：远程调时端口号；" class="headerlink" title="Port：远程调时端口号；"></a>Port：远程调时端口号；</h6><h6 id="Use-module-classpath-本地想要进行debug的项目"><a href="#Use-module-classpath-本地想要进行debug的项目" class="headerlink" title="Use module classpath: 本地想要进行debug的项目"></a>Use module classpath: 本地想要进行debug的项目</h6><h2 id="远程调试过程"><a href="#远程调试过程" class="headerlink" title="远程调试过程"></a>远程调试过程</h2><h4 id="1、启动远程debug模式"><a href="#1、启动远程debug模式" class="headerlink" title="1、启动远程debug模式"></a>1、启动远程debug模式</h4><h6 id="选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。"><a href="#选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。" class="headerlink" title="选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。"></a>选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。</h6><p><img src="%E5%9B%BE3.jpg" alt="图3" title="图3"></p><h6 id="启动成功后控制台显示信息"><a href="#启动成功后控制台显示信息" class="headerlink" title="启动成功后控制台显示信息"></a>启动成功后控制台显示信息</h6><p><img src="%E5%9B%BE4.png" alt="图4"></p><h4 id="2、断点设置"><a href="#2、断点设置" class="headerlink" title="2、断点设置"></a>2、断点设置</h4><h6 id="在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。"><a href="#在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。" class="headerlink" title="在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。"></a>在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。</h6><h6 id="在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。"><a href="#在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。" class="headerlink" title="在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。"></a>在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。</h6><p><img src="%E5%9B%BE5.jpg" alt="图5" title="图5"></p><h6 id="Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程"><a href="#Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程" class="headerlink" title="Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程"></a>Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程</h6><p><img src="%E5%9B%BE6.jpg" alt="图6" title="图6"></p><h4 id="3、查看参数值"><a href="#3、查看参数值" class="headerlink" title="3、查看参数值"></a>3、查看参数值</h4><h6 id="远程调试时可查看参数值或方法执行结果，有以下方式。"><a href="#远程调试时可查看参数值或方法执行结果，有以下方式。" class="headerlink" title="远程调试时可查看参数值或方法执行结果，有以下方式。"></a>远程调试时可查看参数值或方法执行结果，有以下方式。</h6><h6 id="右键-gt-Evalute-Expression-输入参数名或执行的方法查看对应信息"><a href="#右键-gt-Evalute-Expression-输入参数名或执行的方法查看对应信息" class="headerlink" title="右键-&gt;Evalute Expression 输入参数名或执行的方法查看对应信息"></a>右键-&gt;Evalute Expression 输入参数名或执行的方法查看对应信息</h6><p><img src="%E5%9B%BE7.png" alt="图7" title="图7"></p><h6 id="在控制台中的Variables下查看所有参数值"><a href="#在控制台中的Variables下查看所有参数值" class="headerlink" title="在控制台中的Variables下查看所有参数值"></a>在控制台中的Variables下查看所有参数值</h6><p><img src="%E5%9B%BE8.png" alt="图8" title="图8"></p><h6 id="光标悬停到参数上，显示当前变量信息"><a href="#光标悬停到参数上，显示当前变量信息" class="headerlink" title="光标悬停到参数上，显示当前变量信息"></a>光标悬停到参数上，显示当前变量信息</h6><p><img src="%E5%9B%BE9.png" alt="图9" title="图9"></p><h4 id="4、修改参数值"><a href="#4、修改参数值" class="headerlink" title="4、修改参数值"></a>4、修改参数值</h4><h6 id="在调试中可修改错误的参数值，有以下方式。"><a href="#在调试中可修改错误的参数值，有以下方式。" class="headerlink" title="在调试中可修改错误的参数值，有以下方式。"></a>在调试中可修改错误的参数值，有以下方式。</h6><h6 id="右键-gt-Evalute-Expression-输入参数名等于xxx，可重新给参数赋值"><a href="#右键-gt-Evalute-Expression-输入参数名等于xxx，可重新给参数赋值" class="headerlink" title="右键-&gt;Evalute Expression 输入参数名等于xxx，可重新给参数赋值"></a>右键-&gt;Evalute Expression 输入参数名等于xxx，可重新给参数赋值</h6><p><img src="%E5%9B%BE10.png" alt="图10" title="图10"></p><h6 id="在Variables中选中需要修改的参数，右键-gt-Set-Value-修改参数值。"><a href="#在Variables中选中需要修改的参数，右键-gt-Set-Value-修改参数值。" class="headerlink" title="在Variables中选中需要修改的参数，右键 -&gt; Set Value 修改参数值。"></a>在Variables中选中需要修改的参数，右键 -&gt; Set Value 修改参数值。</h6><p><img src="%E5%9B%BE11.png" alt="图11" title="图11"></p><h4 id="5、调试过程中添加代码"><a href="#5、调试过程中添加代码" class="headerlink" title="5、调试过程中添加代码"></a>5、调试过程中添加代码</h4><h6 id="添加代码：鼠标右键点击-gt-Add-lnline-Watch，输入添加的代码，如下图。"><a href="#添加代码：鼠标右键点击-gt-Add-lnline-Watch，输入添加的代码，如下图。" class="headerlink" title="添加代码：鼠标右键点击 -&gt; Add lnline Watch，输入添加的代码，如下图。"></a>添加代码：鼠标右键点击 -&gt; Add lnline Watch，输入添加的代码，如下图。</h6><p><img src="%E5%9B%BE12.png" alt="图12" title="图12"><br><img src="%E5%9B%BE13.png" alt="图13" title="图13"></p><h6 id="删除调试过程中添加的代码：Variables-gt-lnline-Watches-gt-Remove-All-Watches-删除所有添加的代码，Variables-gt-lnline-Watches-gt-选中删除的代码-gt-Remove-Watch-删除选中的代码"><a href="#删除调试过程中添加的代码：Variables-gt-lnline-Watches-gt-Remove-All-Watches-删除所有添加的代码，Variables-gt-lnline-Watches-gt-选中删除的代码-gt-Remove-Watch-删除选中的代码" class="headerlink" title="删除调试过程中添加的代码：Variables -&gt; lnline Watches-&gt; Remove All Watches 删除所有添加的代码，Variables -&gt; lnline Watches -&gt; 选中删除的代码 -&gt; Remove Watch 删除选中的代码"></a>删除调试过程中添加的代码：Variables -&gt; lnline Watches-&gt; Remove All Watches 删除所有添加的代码，Variables -&gt; lnline Watches -&gt; 选中删除的代码 -&gt; Remove Watch 删除选中的代码</h6><p><img src="%E5%9B%BE14.png" alt="图14" title="图14"></p><h4 id="6、调试过程中抛出异常"><a href="#6、调试过程中抛出异常" class="headerlink" title="6、调试过程中抛出异常"></a>6、调试过程中抛出异常</h4><h6 id="在运行中抛出异常：Frames-gt-选中要抛出异常代码的线程-gt-点击右键选中Throw-Exception-gt-添加抛出异常代码。"><a href="#在运行中抛出异常：Frames-gt-选中要抛出异常代码的线程-gt-点击右键选中Throw-Exception-gt-添加抛出异常代码。" class="headerlink" title="在运行中抛出异常：Frames -&gt; 选中要抛出异常代码的线程 -&gt; 点击右键选中Throw Exception -&gt; 添加抛出异常代码。"></a>在运行中抛出异常：Frames -&gt; 选中要抛出异常代码的线程 -&gt; 点击右键选中Throw Exception -&gt; 添加抛出异常代码。</h6><p><img src="%E5%9B%BE15.png" alt="图15" title="图15"><br><img src="%E5%9B%BE16.png" alt="图16" title="图16"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop 实战</title>
      <link href="/2022/08/29/java/SpringAop%E5%AE%9E%E6%88%98/"/>
      <url>/2022/08/29/java/SpringAop%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-AOP-实战"><a href="#Spring-AOP-实战" class="headerlink" title="Spring AOP 实战"></a>Spring AOP 实战</h2><p>看了上面这么多的理论知识, 不知道大家有没有觉得枯燥哈. 不过不要急, 俗话说理论是实践的基础, 对 Spring AOP 有了基本的理论认识后, 我们来看一下下面几个具体的例子吧.<br>下面的几个例子是我在工作中所遇见的比较常用的 Spring AOP 的使用场景, 我精简了很多有干扰我们学习的注意力的细枝末节, 以力求整个例子的简洁性.</p><p>下面几个 Demo 的源码都可以在我的 <a href="https://github.com/yongshun/some_java_code">Github</a> 上下载到.</p><h3 id="HTTP-接口鉴权"><a href="#HTTP-接口鉴权" class="headerlink" title="HTTP 接口鉴权"></a>HTTP 接口鉴权</h3><p>首先让我们来想象一下如下场景: 我们需要提供的 HTTP RESTful 服务, 这个服务会提供一些比较敏感的信息, 因此对于某些接口的调用会进行调用方权限的校验, 而某些不太敏感的接口则不设置权限, 或所需要的权限比较低(例如某些监控接口, 服务状态接口等).<br>实现这样的需求的方法有很多, 例如我们可以在每个 HTTP 接口方法中对服务请求的调用方进行权限的检查, 当调用方权限不符时, 方法返回错误. 当然这样做并无不可, 不过如果我们的 api 接口很多, 每个接口都进行这样的判断, 无疑有很多冗余的代码, 并且很有可能有某个粗心的家伙忘记了对调用者的权限进行验证, 这样就会造成潜在的 bug.<br>那么除了上面的所说的方法外, 还有没有别的比较优雅的方式来实现呢? 当然有啦, 不然我在这啰嗦半天干嘛呢, 它就是我们今天的主角: <code>AOP</code>.</p><p>让我们来提炼一下我们的需求:</p><ol><li>可以定制地为某些指定的 HTTP RESTful api 提供权限验证功能.</li><li>当调用方的权限不符时, 返回错误.</li></ol><p>根据上面所提出的需求, 我们可以进行如下设计:</p><ol><li>提供一个特殊的注解 <code>AuthChecker</code>, 这个是一个方法注解, 有此注解所标注的 Controller 需要进行调用方权限的认证.</li><li>利用 Spring AOP, 以 <strong>@annotation</strong> 切点标志符来匹配有注解 <code>AuthChecker</code> 所标注的 joinpoint.</li><li>在 advice 中, 简单地检查调用者请求中的 Cookie 中是否有我们指定的 token, 如果有, 则认为此调用者权限合法, 允许调用, 反之权限不合法, 范围错误.</li></ol><p>根据上面的设计, 我们来看一下具体的源码吧.<br>首先是 <code>AuthChecker</code> 注解的定义:<br><strong>AuthChecker.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AuthChecker</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p><code>AuthChecker</code> 注解是一个方法注解, 它用于注解 RequestMapping 方法.</p><p>有了注解的定义, 那我们再来看一下 aspect 的实现吧:<br><strong>HttpAopAdviseDefine.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo1.AuthChecker)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">checkAuth</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查用户所传递的 token 是否合法</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"错误, 权限不合法!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"user_token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个 aspect 中, 我们首先定义了一个 pointcut, 以 <strong>@annotation</strong> 切点标志符来匹配有注解 <code>AuthChecker</code> 所标注的 joinpoint, 即:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo1.AuthChecker)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>然后再定义一个 advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义 advise</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">checkAuth</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查用户所传递的 token 是否合法</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"错误, 权限不合法!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当被 <code>AuthChecker</code> 注解所标注的方法调用前, 会执行我们的这个 advice, 而这个 advice 的处理逻辑很简单, 即从 HTTP 请求中获取名为 <code>user_token</code> 的 cookie 的值, 如果它的值是 <code>123456</code>, 则我们认为此 HTTP 请求合法, 进而调用 <code>joinPoint.proceed()</code> 将 HTTP 请求转交给相应的控制器处理; 而如果<code>user_token</code> cookie 的值不是 <code>123456</code>, 或为空, 则认为此 HTTP 请求非法, 返回错误.</p><p>接下来我们来写一个模拟的 HTTP 接口:<br><strong>DemoController.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/http/alive"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">alive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"服务一切正常"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AuthChecker</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/http/user_info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">callSomeInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"调用了 user_info 接口."</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意到上面我们提供了两个 HTTP 接口, 其中 接口 <strong>/aop/http/alive</strong> 是没有 <code>AuthChecker</code> 标注的, 而 <strong>/aop/http/user_info</strong> 接口则用到了 <code>@AuthChecker</code> 标注. 那么自然地, 当请求了 <strong>/aop/http/user_info</strong> 接口时, 就会触发我们所设置的权限校验逻辑.</p><p>接下来我们来验证一下, 我们所实现的功能是否有效吧.<br>首先在 Postman 中, 调用 <strong>/aop/http/alive</strong> 接口, 请求头中不加任何参数:</p><p><img src="https://image-static.segmentfault.com/112/902/1129027773-582720e2b5b69_fix732"></p><p>可以看到, 我们的 HTTP 请求完全没问题.</p><p>那么再来看一下请求 <strong>/aop/http/user_info</strong> 接口会怎样呢:</p><p><img src="https://image-static.segmentfault.com/248/422/2484227282-582720eac8c86_fix732"></p><p>当我们请求 <strong>/aop/http/user_info</strong> 接口时, 服务返回一个权限异常的错误, 为什么会这样呢? 自然就是我们的权限认证系统起了作为: 当一个方法被调用并且这个方法有 <code>AuthChecker</code> 标注时, 那么首先会执行到我们的 <code>around advice</code>, 在这个 advice 中, 我们会校验 HTTP 请求的 cookie 字段中是否有携带 <code>user_token</code> 字段时, 如果没有, 则返回权限错误.<br>那么为了能够正常地调用 <strong>/aop/http/user_info</strong> 接口, 我们可以在 Cookie 中添加 <strong>user_token=123456</strong>, 这样我们可以愉快的玩耍了:</p><p><img src="https://image-static.segmentfault.com/215/554/2155548086-582720f1f1474_fix732"></p><blockquote><p><code>注意</code>, Postman 默认是不支持 Cookie 的, 所以为了实现添加 Cookie 的功能, 我们需要安装 Postman 的 <code>interceptor</code> 插件. 安装方法可以看<a href="https://www.getpostman.com/docs/interceptor_cookies">官网的文章</a></p></blockquote><h4 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo1">HTTP 接口鉴权</a></p><h3 id="方法调用日志"><a href="#方法调用日志" class="headerlink" title="方法调用日志"></a>方法调用日志</h3><p>第二个 AOP 实例是记录一个方法调用的log. 这应该是一个很常见的功能了.<br>首先假设我们有如下需求:</p><ol><li>某个服务下的方法的调用需要有 log: 记录调用的参数以及返回结果.</li><li>当方法调用出异常时, 有特殊处理, 例如打印异常 log, 报警等.</li></ol><p>根据上面的需求, 我们可以使用 before advice 来在调用方法前打印调用的参数, 使用 after returning advice 在方法返回打印返回的结果. 而当方法调用失败后, 可以使用 after throwing advice 来做相应的处理.<br>那么我们来看一下 aspect 的实现:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(NeedLogService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeParam</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---Before method &#123;&#125; invoke, param: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"retVal"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeResult</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> retVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---After method &#123;&#125; invoke, result: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"exception"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoke exception: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第一步, 自然是定义一个 <code>pointcut</code>, 以 <strong>within</strong> 切点标志符来匹配类 <code>NeedLogService</code> 下的所有 joinpoint, 即:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(NeedLogService)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来根据我们前面的设计, 我们分别定义了三个 advice, 第一个是一个 before advice:</p><pre class="language-none"><code class="language-none">@Before(&quot;pointcut()&quot;)public void logMethodInvokeParam(JoinPoint joinPoint) &#123;    logger.info(&quot;---Before method &#123;&#125; invoke, param: &#123;&#125;---&quot;, joinPoint.getSignature().toShortString(), joinPoint.getArgs());&#125;</code></pre><p>它在一个符合要求的 joinpoint 方法调用前执行, 打印调用的方法名和调用的参数.</p><p>第二个是 after return advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"retVal"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeResult</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> retVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---After method &#123;&#125; invoke, result: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 advice 会在方法调用成功后打印出方法名还反的参数.</p><p>最后一个是 after throw advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"exception"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoke exception: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 advice 会在指定的 joinpoint 抛出异常时执行, 打印异常的信息.</p><p>接下来我们再写两个 Service 类:<br><strong>NeedLogService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NeedLogService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NeedLogService: logMethod invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NeedLogService: exceptionMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Something bad happened!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>NormalService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NormalService: someMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>根据我们 pointcut 的规则, 类 NeedLogService 下的所有方法都会被织入 advice, 而类 NormalService 则不会.</p><p>最后我们分别调用这几个方法:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    needLogService<span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token string">"xys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        needLogService<span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Ignore</span>    <span class="token punctuation">&#125;</span>    normalService<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们可以看到有如下输出:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Before</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> param<span class="token operator">:</span> <span class="token punctuation">[</span>xys<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NeedLogService</span><span class="token operator">:</span> logMethod invoked<span class="token punctuation">,</span> param<span class="token operator">:</span> xys<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">After</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token punctuation">[</span>xys<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Before</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> param<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NeedLogService</span><span class="token operator">:</span> exceptionMethod invoked<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span>method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> invoke exception<span class="token operator">:</span> <span class="token class-name">Something</span> bad happened<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NormalService</span><span class="token operator">:</span> someMethod invoked<span class="token operator">--</span><span class="token operator">-</span></code></pre><p>根据 log, 我们知道, NeedLogService.logMethod 执行的前后确实有 advice 执行了, 并且在 NeedLogService.exceptionMethod 抛出异常后, <code>logMethodInvokeException</code> 这个 advice 也被执行了. 而由于 pointcut 的匹配规则, 在 <code>NormalService</code> 类中的方法则不会织入 advice.</p><h4 id="完整源码-1"><a href="#完整源码-1" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo2">方法调用日志</a></p><h3 id="方法耗时统计"><a href="#方法耗时统计" class="headerlink" title="方法耗时统计"></a>方法耗时统计</h3><p>作为程序员, 我们都知道服务监控对于一个服务能够长期稳定运行的重要性, 因此很多公司都有自己内部的监控报警系统, 或者是使用一些开源的系统, 例如小米的 Falcon 监控系统.</p><p>那么在程序监控中, AOP 有哪些用武之地呢? 我们来假想一下如下场景:</p><blockquote><p>有一天, leader 对小王说, “小王啊, 你负责的那个服务不太稳定啊, 经常有超时发生! 你有对这些服务接口进行过耗时统计吗?”<br>耗时统计? 小王嘀咕了, 小声的回答到: “还没有加呢.”<br>leader: “你看着办吧, 我明天要看到各个时段的服务接口调用的耗时分布!”<br>小王这就犯难了, 虽然说计算一个方法的调用耗时并不是一个很难的事情, 但是整个服务有二十来个接口呢, 一个一个地添加统计代码, 那还不是要累死人了.<br>看着同事一个一个都下班回家了, 小王眉头更加紧了. 不过此时小王灵机一动: “噫, 有了!”.<br>小王想到了一个好方法, 立即动手, 吭哧吭哧地几分钟就搞定了.</p></blockquote><p>那么小王的解决方法是什么呢? 自然是我们的主角 <code>AOP</code> 啦.</p><p>首先让我们来提炼一下需求:</p><ol><li>为服务中的每个方法调用进行调用耗时记录.</li><li>将方法调用的时间戳, 方法名, 调用耗时上报到监控平台</li></ol><p>有了需求, 自然设计实现就很简单了. 首先我们可以使用 around advice, 然后在方法调用前, 记录一下开始时间, 然后在方法调用结束后, 记录结束时间, 它们的时间差就是方法的调用耗时.</p><p>我们来看一下具体的 aspect 实现:</p><p><strong>ExpiredAopAdviseDefine.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpiredAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(SomeService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">methodInvokeExpiredTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始</span>        <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 结束</span>        <span class="token comment">// 上报到公司监控平台</span>        <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token keyword">long</span> expiredTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoked, expired time: &#123;&#125; ms---"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> expiredTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>aspect 一开始定义了一个 <code>pointcut</code>, 匹配 <code>SomeService</code> 类下的所有的方法.<br>接着呢, 定义了一个 around advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">methodInvokeExpiredTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始</span>    <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 结束</span>    <span class="token comment">// 上报到公司监控平台</span>    <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>advice 中的代码也很简单, 它使用了 Spring 提供的 StopWatch 来统计一段代码的执行时间. 首先我们先调用 <strong>stopWatch.start()</strong> 开始计时, 然后通过 <code>pjp.proceed()</code> 来调用我们实际的服务方法, 当调用结束后, 通过 <strong>stopWatch.stop()</strong> 来结束计时.</p><p>接着我们来写一个简单的服务, 这个服务提供一个 <strong>someMethod</strong> 方法用于模拟一个耗时的方法调用:<br><strong>SomeService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: someMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 模拟耗时任务</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样当 <code>SomeService</code> 类下的方法调用时, 我们所提供的 advice 就会被执行, 因此就可以自动地为我们统计此方法的调用耗时, 并自动上报到监控系统中了.<br>看到 <code>AOP</code> 的威力了吧, 我们这里仅仅使用了寥寥数语就把一个需求完美地解决了, 并且还与原来的业务逻辑完全解耦, 扩展及其方便.</p><h4 id="完整源码-2"><a href="#完整源码-2" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo3">方法耗时统计</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的几个简单例子, 我们对 <code>Spring AOP</code> 的使用应该有了一个更为深入的了解了. 其实 Spring AOP 的使用的地方不止这些, 例如 Spring 的 <code>声明式事务</code> 就是在 AOP 之上构建的. 读者朋友也可以根据自己的实际业务场景, 合理使用 Spring AOP, 发挥它的强大功能!</p><h2 id="Spring问题汇总"><a href="#Spring问题汇总" class="headerlink" title="Spring问题汇总"></a>Spring问题汇总</h2><h3 id="同一个类中调用另一个方法没有触发Spring-AOP"><a href="#同一个类中调用另一个方法没有触发Spring-AOP" class="headerlink" title="同一个类中调用另一个方法没有触发Spring AOP"></a>同一个类中调用另一个方法没有触发Spring AOP</h3><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>考虑如下一个例子:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyMonitor</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo4.MyMonitor)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeParam</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---Before method &#123;&#125; invoke, param: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: hello invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@MyMonitor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: test invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootAppliMyion</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAopDemo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SomeService</span> someService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringAppliMyion</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyAopDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        someService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个例子中, 我们定义了一个注解 <code>MyMonitor</code>, 这个是一个方法注解, 我们的期望是当有此注解的方法被调用时, 需要执行指定的切面逻辑, 即执行 <code>MyAopAdviseDefine.logMethodInvokeParam</code> 方法.</p><p>在 SomeService 类中, 方法 test() 被 <code>MyMonitor</code> 所注解, 因此调用 test() 方法时, 应该会触发 logMethodInvokeParam 方法的调用. 不过有一点我们需要注意到, 我们在 MyAopDemo 测试例子中, 并没有直接调用 SomeService.test() 方法, 而是调用了 SomeService.hello() 方法, 在 hello 方法中, 调用了同一个类内部的 SomeService.test() 方法. 按理说, test() 方法被调用时, 会触发 AOP 逻辑, 但是在这个例子中, 我们并没有如愿地看到 MyAopAdviseDefine.logMethodInvokeParam 方法的调用, 这是为什么呢?</p><p>这是由于 Spring AOP (包括动态代理和 CGLIB 的 AOP) 的限制导致的. Spring AOP 并不是扩展了一个类(目标对象), 而是使用了一个代理对象来包装目标对象, 并拦截目标对象的方法调用. 这样的实现带来的影响是: 在目标对象中调用自己类内部实现的方法时, 这些调用并不会转发到代理对象中, 甚至代理对象都不知道有此调用的存在.</p><p>即考虑到上面的代码中, 我们在 MyAopDemo.aopTest() 中, 调用了 <code>someService.hello(&quot;abc&quot;)</code>, 这里的 someService bean 其实是 Spring AOP 所自动实例化的一个代理对象, 当调用 hello() 方法时, 先进入到此代理对象的同名方法中, 然后在代理对象中执行 AOP 逻辑(因为 hello 方法并没有注入 AOP 横切逻辑, 因此调用它不会有额外的事情发生), 当代理对象中执行完毕横切逻辑后, 才将调用请求转发到目标对象的 hello() 方法上. 因此当代码执行到 hello() 方法内部时, 此时的 <code>this</code> 其实就不是代理对象了, 而是目标对象, 因此再调用 SomeService.test() 自然就没有 AOP 效果了.</p><p>简单来说, 在 MyAopDemo 中所看到的 someService 这个 bean 和在 SomeService.hello() 方法内部上下文中的 <code>this</code> 其实代表的不是同一个对象(可以通过分别打印两者的 hashCode 以验证), 前者是 Spring AOP 所生成的代理对象, 而后者才是真正的目标对象(SomeService 实例).</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>弄懂了上面的分析, 那么解决这个问题就十分简单了. 既然 test() 方法调用没有触发 AOP 逻辑的原因是因为我们以目标对象的身份(target object) 来调用的, 那么解决的关键自然就是以代理对象(proxied object)的身份来调用 test() 方法.<br>因此针对于上面的例子, 我们进行如下修改即可:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SomeService</span> self<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: hello invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@CatMonitor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: test invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面展示的代码中, 我们使用了一种很 subtle 的方式, 即将 SomeService bean 注入到 self 字段中(这里再次强调的是, SomeService bean 实际上是一个代理对象, 它和 this 引用所指向的对象并不是同一个对象), 因此我们在 hello 方法调用中, 使用 <code>self.test()</code> 的方式来调用 test() 方法, 这样就会触发 AOP 逻辑了.</p><h4 id="Spring-AOP-导致的-Transactional-不生效的问题"><a href="#Spring-AOP-导致的-Transactional-不生效的问题" class="headerlink" title="Spring AOP 导致的 @Transactional 不生效的问题"></a>Spring AOP 导致的 @Transactional 不生效的问题</h4><p>这个问题同样地会影响到 <code>@Transactional</code> 注解的使用, 因为 @Transactional 注解本质上也是由 AOP 所实现的.</p><p>例如我在 stackoverflow 上看到的一个类似的问题: <a href="http://stackoverflow.com/questions/3423972/spring-transaction-method-call-by-the-method-within-the-same-class-does-not-wo">Spring @Transaction method call by the method within the same class, does not work?</a><br>这里也记录下来以作参考.</p><p>那个哥们遇到的问题如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// call DAO layer and adds to database.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUsers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>getUserName<span class="token punctuation">,</span> user<span class="token punctuation">.</span>getPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>他在 <code>addUser</code> 方法上使用 <code>@Transactional</code> 来使用事务功能, 然后他在外部服务中, 通过调用 <code>addUsers</code> 方法批量添加用户. 经过了上面的分析后, 现在我们就可知道其实这里添加注解是不会启动事务功能的, 因为 AOP 逻辑整个都没生效嘛.</p><p>解决这个问题的方法有两个, 一个是使用 AspectJ 模式的事务实现:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aspectj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>另一个就是和我们刚才在上面的例子中的解决方式一样:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> self<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSelf</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> self<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>self <span class="token operator">=</span> self<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// call DAO layer and adds to database.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUsers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            self<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>getUserName<span class="token punctuation">,</span> user<span class="token punctuation">.</span>getPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务详解</title>
      <link href="/2022/08/28/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/08/28/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="详解Java-Quartz-Job-Scheduling"><a href="#详解Java-Quartz-Job-Scheduling" class="headerlink" title="详解Java Quartz Job Scheduling"></a>详解Java Quartz Job Scheduling</h1><p>​    Quartz Job Scheduling是基于Java实现的成熟的企业级作业调度组件。笔者最近所做的项目正好用到了Quartz来实现定时任务的调度，在使用过程中对Quartz不甚了解，于是趁此闲暇机会，学习了Quartz官方教程和《Quartz Job Scheduling Framework》。并形成此篇详解Java Quartz Job Scheduling。</p><h2 id="一、-Hello-Quartz"><a href="#一、-Hello-Quartz" class="headerlink" title="一、 Hello Quartz"></a>一、 Hello Quartz</h2><p>本节通过一个Hello Quartz的示例，来介绍Quartz中的核心概念。这个示例先打印”Hello Quartz!”，再以10秒频率打印当前系统时间：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * HelloJob是一个简单的job，用于打印指定内容 * * Created by zhuyiquan90 on 2018/8/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// JobDetail</span>        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// JobDataMap</span>        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobDetail</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Scheduler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SchedulerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Trigger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">StdSchedulerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token static">newJob</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token static">simpleSchedule</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token static">newTrigger</span></span><span class="token punctuation">;</span><span class="token comment">/** * HelloQuartz是一个简单的Quartz调度器 * &lt;p> * Created by zhuyiquan90 on 2018/8/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从Scheduler工厂获取一个Scheduler的实例</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 重用HelloJob，实现不同实例             */</span>            <span class="token comment">// 注册jobDetail1，打印"Hello Quartz!"，第5秒钟执行一次</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注册jobDetail2，打印当前系统时间，每10秒钟执行一次</span>            <span class="token class-name">JobDetail</span> jobDetail2 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job2"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail2<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger2 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger2"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail2<span class="token punctuation">,</span> trigger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果如下：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">1</span> triggersHello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.468</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job2'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">1</span> triggers<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">28.468</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job2'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">28.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span></code></pre><p>​    <strong>Scheduler</strong>（调度器）是Quartz框架的心脏。Scheduler的生命周期始于通过SchedulerFactory工厂类创建实例，终于调用shutdown() 方法。Scheduler不仅可以用于新增、移除、列举Jobs和Triggers，还可以执行调度相关操作，比如暂停Trigger、恢复Trigger等。需要注意的是，直到调用start()方法时，Scheduler才正式开始执行job和trigger。<br>​    <strong>Job</strong>（作业）是指执行一些作业的特定的Java类。Job必须实现 org.quartz.Job接口，这个接口要求在Job中实现execute()方法。当 Quartz 调用 execute() 方法，会传递一个 JobExecutionContext 上下文变量，里面封装有 Quartz 的运行时环境和当前正执行的 Job。JobExecutionContext可以被用来访问 JobDetail 类，JobDetail 类持有Job的详细信息，包括为Job实例指定的名称，Job 所属组，Job 是否被持久化(易失性)。JobDetail又持有一个指向JobDataMap的引用。JobDataMap中包含Job配置的自定义属性。<br>​    <strong>Trigger</strong>（触发器）用于触发Job的执行。最常用的类型包括 SimpleTrigger和CronTrigger。</p><p>下面针对Quartz的核心框架展开详述。</p><h2 id="二、Quartz框架核心"><a href="#二、Quartz框架核心" class="headerlink" title="二、Quartz框架核心"></a>二、Quartz框架核心</h2><h3 id="2-1-Scheduler"><a href="#2-1-Scheduler" class="headerlink" title="2.1 Scheduler"></a>2.1 Scheduler</h3><p>​    客户端与Scheduler交互是通过<code>org.quartz.Scheduler</code>接口的。这个 Scheduler 的实现，在这种情况下，是一个代理，对其中方法调用会传递到<code>QuartzScheduler</code>实例上。QuartzScheduler对于客户端是不可见的，并且也不存在与此实例的直接交互。QuartzScheduler处在框架根的位置，它是一个引擎驱动着整个框架。<br>​    Scheduler主要包括<code>StdScheduler</code>（Quartz默认的Scheduler）和<code>RemoteScheduler</code>（带有RMI功能的Scheduler）。<br>​    Quartz提供了<code>org.quartz.SchedulerFactory</code>接口来创建Scheduler实例。SchedulerFactory包括两种类型<code>org.quartz.impl.DirectoSchedulerFactory</code> 和 <code>org.quartz.impl.StdSchedulerFactory</code>。</p><p><img src="Scheduler%E6%A1%86%E6%9E%B6%E5%9B%BE"></p><h4 id="2-1-1-使用DirectSchedulerFactory创建实例"><a href="#2-1-1-使用DirectSchedulerFactory创建实例" class="headerlink" title="2.1.1 使用DirectSchedulerFactory创建实例"></a>2.1.1 使用DirectSchedulerFactory创建实例</h4><p>​    DirectSchedulerFactory通过编程式的方式来创建Scheduler实例。一般包括三个基本步骤。首先，你必须用静态方法 <code>getInstance()</code> 获取到工厂的实例。当你持有了工厂的实例之后，你必须调用其中的一个 <code>createXXX</code> 方法去初始化它。第三步也就是最后一步是通过工厂的 <code>getScheduler()</code> 方法拿到 Scheduler 的实例。</p><p>​    代码实例如下：    </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Initialize the Scheduler Factory with 10 threads</span>    factory<span class="token punctuation">.</span><span class="token function">createVolatileScheduler</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Get a scheduler from the factory</span>    <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Start the scheduler running</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler starting up..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Do something</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>采用编程式来创建实例你需要硬编码所有的scheduler配置，这无疑是很有挑战性的。所以请<strong>慎用DirectoSchedulerFactory</strong>。</p><h4 id="2-1-2-使用StdSchedulerFactory创建实例"><a href="#2-1-2-使用StdSchedulerFactory创建实例" class="headerlink" title="2.1.2 使用StdSchedulerFactory创建实例"></a>2.1.2 使用StdSchedulerFactory创建实例</h4><p><code>StdSchedulerFactory</code>通过声明式的方式来创建Scheduler实例。它依赖于一系列的属性配置。比如</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就是以默认的配置文件<code>quartz.properties</code>来实例化scheduler。一个简单的quartz.properties配置如下所示。Quartz配置参考详见第七节。</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#===============================================================     </span><span class="token comment">#Configure Main Scheduler Properties     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">QuartzScheduler      </span><span class="token key attr-name">org.quartz.scheduler.instanceId</span> <span class="token punctuation">=</span> <span class="token value attr-value">AUTO     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure ThreadPool     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span>  <span class="token value attr-value">5      </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5      </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.SimpleThreadPool     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure JobStore     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.RAMJobStore     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure Plugins     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.class</span> <span class="token value attr-value">=      </span><span class="token key attr-name">org.quartz.plugins.xml.JobInitializationPlugin</span> <span class="token value attr-value">     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.overWriteExistingJobs</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.failOnFileNotFound</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.validating</span><span class="token punctuation">=</span><span class="token value attr-value">false  </span></code></pre><h4 id="2-1-3-管理-Scheduler实例"><a href="#2-1-3-管理-Scheduler实例" class="headerlink" title="2.1.3 管理 Scheduler实例"></a>2.1.3 管理 Scheduler实例</h4><h6 id="启动Scheduler"><a href="#启动Scheduler" class="headerlink" title="启动Scheduler"></a>启动Scheduler</h6><p>启动Scheduler通过<code>start()</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Create an instance of the Scheduler  </span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Start the scheduler  </span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h5 id="临时暂停Scheduler"><a href="#临时暂停Scheduler" class="headerlink" title="临时暂停Scheduler"></a>临时暂停Scheduler</h5><p>临时暂停调度的方式分为<code>standBy()</code>和<code>pauseAll()</code>两种。两者的区别如下。</p><p><strong>standby()：</strong></p><blockquote><p>Temporarily halts the Scheduler’s firing of Triggers.<br>void standby() throws SchedulerException Temporarily halts the Scheduler’s firing of Triggers.</p><p>When start() is called (to bring the scheduler out of stand-by mode),<br>trigger misfire instructions will NOT be applied during the execution<br>of the start() method - any misfires will be detected immediately<br>afterward (by the JobStore’s normal process).</p><p>The scheduler is not destroyed, and can be re-started at any time.</p></blockquote><p><strong>pauseAll() ：</strong></p><blockquote><p>void pauseAll() throws SchedulerException Pause all triggers - similar to calling<br>pauseTriggerGroup(group) on every group, however, after using this<br>method resumeAll() must be called to clear the scheduler’s state of<br>‘remembering’ that all new triggers will be paused as they are added.</p><p><strong>When resumeAll() is called (to un-pause), trigger misfire instructions WILL be applied.</strong></p></blockquote><p>说明standby()需要再次调用start()恢复调度，trigger misfire（触发未执行调度）策略在start()执行过程中将不会直接执行；pauseAll()需要调用resumeAll()恢复调度，所有trigger misfire策略将被立即执行。</p><h5 id="终止Scheduler"><a href="#终止Scheduler" class="headerlink" title="终止Scheduler"></a>终止Scheduler</h5><p>终止调度的方式是<code>shutdown()</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> waitForJobsToComplete<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span>  </code></pre><p>​    上面那两个方法唯一不同之处是其中一个方法可接受一个 boolean 型参数，表示是否让当前正在进行的 Job 正常执行完成才停止 Scheduler。无参的 shutdown() 方法相当于调用 shutdown(false)。<br>​    以上，start()，standBy()，pauseAll()，shutdown()等原子操作都是 <code>QuartzScheduler</code>完成的，后续会有专门文章对<code>QuartzScheduler</code>（Quartz框架的根本）进行源码剖析。</p><h3 id="2-2-Job"><a href="#2-2-Job" class="headerlink" title="2.2 Job"></a>2.2 Job</h3><p>​    如第一节所述，HelloJob引用了 org.quartz.Job 接口，并实现了execute() 方法。Scheduler决定运行HelloJob的时机，JobExecutionContext用于记录Job上下文，execute()执行异常抛出JobExecutionException。<br>Job如何注册到Scheduler中？如何定义Job实例的属性和配置？执行过程中如何追踪Job的状态？下面还有一些我们必须了解的关于Job的特征。</p><h4 id="2-2-1-JobDetail"><a href="#2-2-1-JobDetail" class="headerlink" title="2.2.1 JobDetail"></a>2.2.1 JobDetail</h4><p>​    从第一节的例子，我们可以看到不是直接把Job对象注册到Scheduler，实际注册的是一个JobDetail实例。这样做的好处是，针对某一类的Job，仅需要构造一个Job class，比如文件操作类Job，通过创建多个JobDetail实例来完成不同的调度任务。<br>JobDetail实例通过org.quartz.JobBuilder构造。我们将JobDetail注册到Scheduler，通过newJob()，Scheduler知道所要执行的具体Job。每一次Scheduler执行，在调用execute()方法前，会创建一个新的实例。当执行完毕，相关的job实例会被丢弃，对应的堆内存会被回收。换句话说，Job是无状态的（在最新的版本中，StatefulJob已经废弃）。因此我们需要使用JobDataMap来传递数据。</p><h4 id="2-2-2-JobDataMap"><a href="#2-2-2-JobDataMap" class="headerlink" title="2.2.2 JobDataMap"></a>2.2.2 JobDataMap</h4><p>我们能使用 org.quartz.JobDataMap 来定义 Job 的状态。JobDataMap 是JobDetail的一部分。可以向 JobDataMap 中存入键/值对，那些数据对可在你的 Job 类中传递和进行访问。<br>Trigger中也可以使用JobDataMap，这在一个Job应用于多个Triggers的场景下非常使用于参数传递。最终JobExecutionContext上下文中传递的JobDataMap是JobDetail和Trigger的并集，通过getMergedJobDataMap()获取。<br>注意，对同一key，如果在JobDetail和Trigger中都有使用，后来者会覆盖先来者。如下面的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getMergedJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello JobDetal!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trigger<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Trigger!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.646</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job1'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.652</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">0</span> triggers<span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.653</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Trigger<span class="token operator">!</span></code></pre><p>最后，Job的持久化是通过JobStore实现的，我们将在第三节详细介绍。</p><h3 id="2-3-Trigger"><a href="#2-3-Trigger" class="headerlink" title="2.3 Trigger"></a>2.3 Trigger</h3><p>​    主要使用的Quartz Trigger是org.quartz.SimpleTrigger和org.quartz.CronTrigger。</p><h4 id="2-3-1-使用SimpleTrigger部署Job"><a href="#2-3-1-使用SimpleTrigger部署Job" class="headerlink" title="2.3.1 使用SimpleTrigger部署Job"></a>2.3.1 使用SimpleTrigger部署Job</h4><p>​    SimpleTrigger 对于设置和使用是最为简单的一种 Quartz Trigger。它是为那种需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行 n 次的 Job 所设计的。</p><h5 id="2-3-1-1-代码示例"><a href="#2-3-1-1-代码示例" class="headerlink" title="2.3.1.1 代码示例"></a>2.3.1.1 代码示例</h5><p>构建一个指定时刻执行的触发器：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SimpleTrigger</span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleTrigger</span><span class="token punctuation">)</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>myStartTime<span class="token punctuation">)</span> <span class="token comment">// some Date</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span> <span class="token comment">// identify job with name, group strings</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个指定时刻以10秒为频率执行10次的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger3"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>myTimeToStartFiring<span class="token punctuation">)</span>  <span class="token comment">// if a start time is not given (if this line were omitted), "now" is implied</span>    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// note that 10 repeats will give a total of 11 firings</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJob<span class="token punctuation">)</span> <span class="token comment">// identify job with handle to its JobDetail itself                   </span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个在5分钟后执行一次的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleTrigger</span><span class="token punctuation">)</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger5"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">futureDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">IntervalUnit</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// use DateBuilder to create a date in the future</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJobKey<span class="token punctuation">)</span> <span class="token comment">// identify job with its JobKey</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个现在执行，每5分钟执行一次，22点结束的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger7"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">withIntervalInMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span><span class="token function">dateOf</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个下一个整点执行，每2小时执行一次的永久触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger8"</span><span class="token punctuation">)</span> <span class="token comment">// because group is not specified, "trigger8" will be in the default group</span>   <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">evenHourDate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// get the next even-hour (minutes and seconds zero ("00:00"))</span>   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// note that in this example, 'forJob(..)' is not called</span>   <span class="token comment">//  - which is valid if the trigger is passed to the scheduler along with the job  </span>   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-3-1-2-trigger-misfire策略"><a href="#2-3-1-2-trigger-misfire策略" class="headerlink" title="2.3.1.2 trigger misfire策略"></a>2.3.1.2 trigger misfire策略</h5><p>misfire是指触发器错过触发时间（firing time），scheduler被关闭或者Quartz线程池中没有可以完成工作的工作线程都会导致trigger misfire。不同类型的trigger针对misfire情况的处理策略也不同，SimpleTrigger的misfire策略包括：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 立即执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_FIRE_NOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 立即执行，并累计到已经执行次数，如果结束时间已经过了，则不会再执行。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 立即执行，并累计到未执行次数，如果结束时间已经过了，则不会再执行。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 告诉Quartz在下一次执行时间再次开始执行，并累计到未执行次数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 告诉Quartz在下一次执行时间再次开始执行，并累计到已经执行次数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p>SimpleTrigger的misfire默认策略是Trigger.MISFIRE_INSTRUCTION_SMART_POLICY。这种策略会根据不同情况选择不同处理，源码如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>instr <span class="token operator">==</span> <span class="token class-name">Trigger</span><span class="token punctuation">.</span>MISFIRE_INSTRUCTION_SMART_POLICY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRepeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_FIRE_NOW<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRepeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> REPEAT_INDEFINITELY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// if (getRepeatCount() > 0)</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span></code></pre><h4 id="2-3-2-使用CronTrigger部署Job"><a href="#2-3-2-使用CronTrigger部署Job" class="headerlink" title="2.3.2 使用CronTrigger部署Job"></a>2.3.2 使用CronTrigger部署Job</h4><p>CronTrigger 是基于 Unix 类似于 cron 的表达式，允许设定非常复杂的触发时间表。Cron表达式由七个子表达式组成的字符串，它描述了不同的调度细节。这些子表达式是用空格分隔的，并表示：秒、分钟、小时、天、月、星期几、年（可选项）。</p><h5 id="2-3-2-1-Cron表达式"><a href="#2-3-2-1-Cron表达式" class="headerlink" title="2.3.2.1 Cron表达式"></a>2.3.2.1 Cron表达式</h5><p>Quartz Cron 表达式支持七个域：</p><table><thead><tr><th>名称</th><th>是否必须</th><th>允许值</th><th>允许特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>时</td><td>是</td><td>0-23</td><td>, - * /</td></tr><tr><td>日</td><td>是</td><td>1月31日</td><td>, - * ? / L W C</td></tr><tr><td>月</td><td>是</td><td>1-12 或 JAN-DEC</td><td>, - * /</td></tr><tr><td>周</td><td>是</td><td>1-7 或 SUN-SAT</td><td>, - * ? / L C #</td></tr><tr><td>年</td><td>否</td><td>空 或 1970-2099</td><td>, - * /</td></tr></tbody></table><p>其中</p><ul><li>“,” ：表示指定多个值</li><li>“-”：表示指定一个范围的值</li><li>“*”：表示整个时间段</li><li>“/”：表示指定一个值的增加幅度。n/m表示从n开始，每次增加m</li><li>“?”：表示不确定的值</li><li>“L”：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li><li>“W”：指定离给定日期最近的工作日(周一到周五)。LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li><li>“#”：用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为 6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。</li></ul><p>每个17点开始，每隔5分钟过10秒执行。比如17:00:10 pm，17:05:10 pm</p><blockquote><p>10 0/5 17 * * ?</p></blockquote><p>每个周三和周五，10:30，11:30，12:30，13:30执行</p><blockquote><p>0 30 10-13 ? * WED,FRI</p></blockquote><p>每个月最后一个星期一，12:00:00执行</p><blockquote><p>0 0 12 ? * 2L</p></blockquote><h5 id="2-3-2-2-代码示例"><a href="#2-3-2-2-代码示例" class="headerlink" title="2.3.2.2 代码示例"></a>2.3.2.2 代码示例</h5><p>代码示例如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span><span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedul</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0 0/2 8-17 * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h5 id="2-3-2-3-trigger-misfire策略"><a href="#2-3-2-3-trigger-misfire策略" class="headerlink" title="2.3.2.3 trigger misfire策略"></a>2.3.2.3 trigger misfire策略</h5><p>下面是CronTrigger处理misfire的策略。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 以错过的第一个频率时间立刻开始执行,重做错过的所有频率周期后</span><span class="token comment">// 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 不触发立即执行，等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_DO_NOTHING <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 以当前时间为触发频率立刻触发一次执行，然后按照Cron频率依次执行    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  </code></pre><p>同样，CronTrigger默认也采用Trigger.MISFIRE_INSTRUCTION_SMART_POLICY策略：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>instr <span class="token operator">==</span> MISFIRE_INSTRUCTION_SMART_POLICY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//instr  == 0</span>            instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW<span class="token punctuation">;</span><span class="token comment">//instr = 1</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定CronTrigger使用立即执行的misfire策略</span><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0 0/2 8-17 * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMisfireHandlingInstructionFireAndProceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-3-3-使用Quartz-Calendar排除指定日期"><a href="#2-3-3-使用Quartz-Calendar排除指定日期" class="headerlink" title="2.3.3 使用Quartz Calendar排除指定日期"></a>2.3.3 使用Quartz Calendar排除指定日期</h4><p>Quartz 的 Calender 专门用于屏闭一个时间区间，使 Trigger 在这个区间中不被触发。Quartz包括了多种类型的Calender：</p><table><thead><tr><th>Calender 名称</th><th>类</th><th>用法</th></tr></thead><tbody><tr><td>BaseCalender</td><td>org.quartz.impl.calendar.BaseCalender</td><td>为高级的 Calender 实现了基本的功能，实现了 org.quartz.Calender 接口</td></tr><tr><td>DailyCalendar</td><td>org.quartz.impl.calendar.DailyCalendar</td><td>您可以使用此日历来排除营业时间（上午8点 - 5点）每天。  每个DailyCalendar仅允许指定单个时间范围，并且该时间范围可能不会跨越每日边界（即，您不能指定从上午8点至凌晨5点的时间范围）。  如果属性invertTimeRange为false（默认），则时间范围定义触发器不允许触发的时间范围。  如果invertTimeRange为true，则时间范围被反转 - 也就是排除在定义的时间范围之外的所有时间</td></tr><tr><td>WeeklyCalendar</td><td>org.quartz.impl.calendar.WeeklyCalendar</td><td>排除星期中的一天或多天，例如，可用于排除周末</td></tr><tr><td>MonthlyCalendar</td><td>org.quartz.impl.calendar.MonthlyCalendar</td><td>排除月份中的数天，例如，可用于排除每月的最后一天</td></tr><tr><td>AnnualCalendar</td><td>org.quartz.impl.calendar.AnnualCalendar</td><td>排除年中一天或多天</td></tr><tr><td>HolidayCalendar</td><td>org.quartz.impl.calendar.HolidayCalendar</td><td>特别的用于从 Trigger 中排除节假日</td></tr><tr><td>CronCalendar</td><td>org.quartz.impl.calendar.CronCalendar</td><td>日历的这种实现排除了由给定的CronExpression表达的时间集合。 例如，您可以使用此日历使用表达式“* * 0-7,18-23？*  *”每天排除所有营业时间（上午8点至下午5点）。  如果CronTrigger具有给定的cron表达式并且与具有相同表达式的CronCalendar相关联，则日历将排除触发器包含的所有时间，并且它们将彼此抵消</td></tr></tbody></table><p>下面看一个简单实例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Add the holiday calendar to the schedule</span><span class="token class-name">AnnualCalendar</span> holidays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnualCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fourth of July (July 4) Independence Day Of USA</span><span class="token class-name">Calendar</span> fourthOfJuly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>fourthOfJuly<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// halloween (Oct 31)</span><span class="token class-name">Calendar</span> halloween <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>halloween<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// christmas (Dec 25)</span><span class="token class-name">Calendar</span> christmas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>christmas<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// tell the schedule about our holiday calendar</span>sched<span class="token punctuation">.</span><span class="token function">addCalendar</span><span class="token punctuation">(</span><span class="token string">"holidays"</span><span class="token punctuation">,</span> holidays<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// schedule a job to run hourly, starting on halloween</span><span class="token comment">// at 10 am</span><span class="token class-name">Date</span> runDate <span class="token operator">=</span> <span class="token function">dateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleTrigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>runDate<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>                        <span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">modifiedByCalendar</span><span class="token punctuation">(</span><span class="token string">"holidays"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三、存储和持久化"><a href="#三、存储和持久化" class="headerlink" title="三、存储和持久化"></a>三、存储和持久化</h2><p>​    Quartz通过JobStore提供一种数据存储机制。JobStore有多种类型：基于内存的RAMJobStore（非持久化），、基于数据库的JDBCJobStore（持久化）、基于分布式缓存的TerracottaJobStore（持久化）。我们在定义SchedulerFactory时，在配置文件中要声明使用的JobStore类型来生成shceduler实例。千万不要直接在代码中定义JobStore实例，正确的做法是在幕后（通过配置的方式）来使用JobStore。</p><h3 id="3-1-RAMJobStore"><a href="#3-1-RAMJobStore" class="headerlink" title="3.1 RAMJobStore"></a>3.1 RAMJobStore</h3><p>​    org.quartz.simple.RAMJobStore是默认的Quartz的JobStore方式。SchedulerFactory初始化时没有指定JobStore，则默认使用RAMJobStore。同时，RAMJobStore基于内存，也是数据访问性能最佳的JobStore。当然，缺点也是显而易见的，因为不可持久化，所以RAMJobStore中的数据时易失的。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>RAMJobStore</span></code></pre><p>​    RAMJobStore通过两种方式来加载数据。一种是直接硬编码这些数据到你的代码中，比如上文示例代码中的Job信息、Tigger信息等，一旦有任何变化，代码都需要重新编译。另一种是基于插件 JobInitializationPlugin，这种方式的优点是，当有改变时只需要对这个 XML 文件作改动，不用改代码，不用重编译。</p><h3 id="3-2-JDBCJobStore"><a href="#3-2-JDBCJobStore" class="headerlink" title="3.2 JDBCJobStore"></a>3.2 JDBCJobStore</h3><p>JDBCJobStore通过关系型数据库存储相关数据。其优点是数据持久化，同时为分布式Quartz提供了可能性。JDBCJobStore支持大部分关系型数据库包括： Oracle, PostgreSQL, MySQL, MS SQLServer, HSQLDB，DB2等。首先，要创建一系列用于存储数据的表：</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>QRTZ_CALENDARS</td><td>以 Blob 类型存储 Quartz 的 Calendar 信息</td></tr><tr><td>QRTZ_CRON_TRIGGERS</td><td>存储 Cron Trigger，包括 Cron 表达式和时区信息</td></tr><tr><td>QRTZ_FIRED_TRIGGERS</td><td>存储与已触发的 Trigger 相关的状态信息，以及相联 Job 的执行信息</td></tr><tr><td>QRTZ_PAUSED_TRIGGER_GRPS</td><td>存储已暂停的 Trigger 组的信息</td></tr><tr><td>QRTZ_SCHEDULER_STATE</td><td>存储少量的有关 Scheduler 的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)</td></tr><tr><td>QRTZ_LOCKS</td><td>存储程序的非观锁的信息(假如使用了悲观锁)</td></tr><tr><td>QRTZ_JOB_DETAILS</td><td>存储每一个已配置的 Job 的详细信息</td></tr><tr><td>QRTZ_JOB_LISTENERS</td><td>存储有关已配置的 JobListener 的信息</td></tr><tr><td>QRTZ_SIMPLE_TRIGGERS</td><td>存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</td></tr><tr><td>QRTZ_BLOG_TRIGGERS</td><td>Trigger 作为 Blob 类型存储(用于 Quartz 用户用 JDBC 创建他们自己定制的 Trigger 类型，JobStore  并不知道如何存储实例的时候)</td></tr><tr><td>QRTZ_TRIGGER_LISTENERS</td><td>存储已配置的 TriggerListener 的信息</td></tr><tr><td>QRTZ_TRIGGERS</td><td>存储已配置的 Trigger 的信息</td></tr></tbody></table><p>​    有关QRTZ表的具体用法将在第六章分布式集群实现中详述。</p><h4 id="3-2-1-配置JobStoreTX"><a href="#3-2-1-配置JobStoreTX" class="headerlink" title="3.2.1 配置JobStoreTX"></a>3.2.1 配置JobStoreTX</h4><p>​    表创建完成后，需要决定应用需要的事务类型。Quartz来管理事务的话，使用JobStoreTX；如果希望应用容器来管理事务（比如JBoss或者Tomcat），可以使用JobStoreCMT。这里选择使用JobStoreTX，继续展开。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span></span>JobStoreTX</span></code></pre><h4 id="3-2-2-配置驱动代理"><a href="#3-2-2-配置驱动代理" class="headerlink" title="3.2.2 配置驱动代理"></a>3.2.2 配置驱动代理</h4><p>​    Quartz 指定 DriverDelegate 来与给定数据库进行通信。顾名思义，从 Scheduler 通过 JobStore 对数据库的调用是委托给一个预配置的 DriverDelegate 实例。这个代理承担起所有与 JDBC driver 的通信。所有的 DriverDelegate 类都继承自 org.quartz.impl.jdbcjobstore.StdDriverDelegate 类。Mysql可以直接使用StdDriverDelegate。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span>driverDelegateClass <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span></span>StdDriverDelegate</span></code></pre><h4 id="3-2-3-配置数据源"><a href="#3-2-3-配置数据源" class="headerlink" title="3.2.3 配置数据源"></a>3.2.3 配置数据源</h4><p>数据源配置可以指定为应用服务器配置的默认数据源，也可以单独配置，比如：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 指定数据源</span><span class="token key attr-name">org.quartz.jobStore.dataSource</span> <span class="token punctuation">=</span> <span class="token value attr-value">myDS</span><span class="token comment"># JDBC 驱动类的全限名</span><span class="token key attr-name">org.quartz.dataSource.myDS.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.jdbc.Driver  </span><span class="token comment"># 连接到你的数据库的 URL(主机，端口等)</span><span class="token key attr-name">org.quartz.dataSource.myDS.URL</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:jtds:sqlserver://localhost:1433/quartz  </span><span class="token comment"># 用于连接你的数据库的用户名</span><span class="token key attr-name">org.quartz.dataSource.myDS.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token comment"># 用于连接你的数据库的密码</span><span class="token key attr-name">org.quartz.dataSource.myDS.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">myPassword  </span><span class="token comment"># DataSource 在连接接中创建的最大连接数</span><span class="token key attr-name">org.quartz.dataSource.myDS.maxConnections</span> <span class="token punctuation">=</span> <span class="token value attr-value">10 </span><span class="token comment"># 一个可选的 SQL 查询字串，DataSource 用它来侦测并替换失败/断开的连接</span><span class="token key attr-name">org.quartz.dataSource.NAME.validationQuary</span><span class="token punctuation">=</span> <span class="token value attr-value">SELECT 1 </span></code></pre><h4 id="3-2-4-配置数据库表的前缀"><a href="#3-2-4-配置数据库表的前缀" class="headerlink" title="3.2.4 配置数据库表的前缀"></a>3.2.4 配置数据库表的前缀</h4><p>​    表前缀的目的是在某些情况下，你也许需要创建多套的 Quartz 数据库表。在这时候，你就需要改变每一套表的前缀。比如JOB_QRTZ_，则表名是JOB_QRTZ_CALENDARS。</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">org.quartz.jobStore.tablePrefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">JOB_QRTZ_</span></code></pre><h4 id="3-2-5-其他配置"><a href="#3-2-5-其他配置" class="headerlink" title="3.2.5 其他配置"></a>3.2.5 其他配置</h4><p>可用于设置 JobStoreTX 的其他配置属性：</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>org.quartz.jobStore.userProperties</td><td>FALSE</td><td>设置为true时表示JobDataMap中的value存放的类型必须是String类型，这样保证不用让更复杂的对象以序列化的形式存入 BLOB  列中。一方面提高性能，另一方面避免序列化问题</td></tr><tr><td>org.quartz.jobStore.misfireThreshold</td><td>60000</td><td>Scheduler对Trigger-misfire的忍耐时间，超过阈值则认为是misfire</td></tr><tr><td>org.quartz.jobStore.isClustered</td><td>FALSE</td><td>设置为 true 打开集群特性。分布式Quartz场景下，这个属性就必须设置为 true</td></tr><tr><td>org.quartz.jobStore.clusterCheckinInterval</td><td>15000</td><td>定义了Scheduler 实例检入到数据库中的频率(单位：毫秒).Scheduler  检查是否其他的实例到了它们应当检入的时候未检入；这能指出一个失败的 Scheduler 实例，且当前 Scheduler  会以此来接管任何执行失败并可恢复的 Job</td></tr><tr><td>org.quartz.jobStore.maxMisfiresToHandleAtATime</td><td>20</td><td>JobStore 能处理的错过触发的 Trigger 的最大数量。处理太多很快会导致数据库表被锁定过长的时间，这样就妨碍了触发别的(还未错过触发)  trigger 执行的性能</td></tr><tr><td>org.quartz.jobStore.dontSetAutoCommitFalse</td><td>FALSE</td><td>false表示调用setAutoCommit(false)，true表示不调用setAutoCommit(false)</td></tr><tr><td>org.quartz.jobStore.selectWithLockSQL</td><td>SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE</td><td>排他锁操作，必须是一个排他锁语句。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换</td></tr><tr><td>org.quartz.jobStore.selectWithLockSQL</td><td>SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE</td><td>行级排他锁，必须是一个排他锁语句。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换</td></tr><tr><td>org.quartz.jobStore.txIsolationLevelSerializable</td><td>FALSE</td><td>值为 true 时告知 Quartz调用JDBC连接的  setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 方法</td></tr></tbody></table><h3 id="3-3-TerracottaJobStore"><a href="#3-3-TerracottaJobStore" class="headerlink" title="3.3 TerracottaJobStore"></a>3.3 TerracottaJobStore</h3><p>​    TerracottaJobStore支持在分布式内存缓存服务器Terracotta中存储数据。其优势在于<strong>性能介于RAMJobStore和JDBCJobStore之间，同时提供了诸如负载均衡和故障切换的集群功能，保证了分布式Quartz的高可用。</strong><br>​    </p><p>​    启用TerracottaJobStore的简单配置如下：</p><pre class="language-java" data-language="java"><code class="language-java"># 指定<span class="token class-name">TerracottaJobStore</span>org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>terracotta<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span>TerracottaJobStore</span># 主机和端口标识要连接的<span class="token class-name">Terracotta</span>服务器的位置org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span>tcConfigUrl <span class="token operator">=</span> localhost<span class="token operator">:</span><span class="token number">9510</span></code></pre><p>​    具体使用可以参考<a href="http://www.terracotta.org/quartz">http://www.terracotta.org/quartz</a> 这里不做展开。</p><h3 id="3-4-自建JobStore"><a href="#3-4-自建JobStore" class="headerlink" title="3.4 自建JobStore"></a>3.4 自建JobStore</h3><p>​    可以自己根据需要创建新的JobStore，必须实现org.quartz.spi.JobStore接口。JobStore 接口有 40 个方法，它要求任何 JobStore 实现都必须实现这些方法，你的也一样。你如何实现那些方法完全依赖于你正构建的 JobStore 的类型。那不是说你的 JobStore 将只能有 40 个方法；这仅仅是接口需要的最小数量。这 40 个方法体现 JobStore 和 Scheduler 之间的公共契约。<br>让我们拣出其中一个方法来简短的讨论它。我们就选 JobStore 接口方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span></code></pre><p>​    Scheduler调用JobStore的SchedulerStarted() 方法去通知 JobStore Scheduler 已经启动了。如果你看了 RAMJobStore 的实现，你能发现它在这个方法实现中什么也没做：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">&#123;</span>    <span class="token comment">// nothing to do</span><span class="token punctuation">&#125;</span></code></pre><p>然而，假如你去看那两个 JobStore 的实现，你会看到在 Scheduler 在首次启动时进行了一些工作：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClustered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          clusterManagementThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          clusterManagementThread<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token function">recoverJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerConfigException</span><span class="token punctuation">(</span><span class="token string">"Failure occurred during job recovery."</span><span class="token punctuation">,</span> se<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      misfireHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MisfireHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      misfireHandler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </code></pre><p>提供方式来创建新的JobStore是非常有意义的，这样我们可以考虑通过其他数据库、文件系统、甚至是内存来存储Quartz中的数据。</p><h2 id="四、实现Quartz监听器"><a href="#四、实现Quartz监听器" class="headerlink" title="四、实现Quartz监听器"></a>四、实现Quartz监听器</h2><p>​    Quartz的监听器用于当任务调度中你所关注事件发生时，能够及时获取这一事件的通知。Quartz监听器主要有JobListener、TriggerListener、SchedulerListener三种，顾名思义，分别表示任务、触发器、调度器对应的监听器。监听器可以分为全局和非全局：全局监听器能够接收到所有的Job/Trigger的事件通知，而非全局监听器只能接收到在其上注册的Job或Trigger的事件，不在其上注册的Job或Trigger则不会进行监听。</p><h3 id="4-1-JobListener"><a href="#4-1-JobListener" class="headerlink" title="4.1 JobListener"></a>4.1 JobListener</h3><p>监听Job 在其生命周期中产生的某些关键事件时，需要实现org.quartz.JobListener接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobListener</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * getName() 方法返回一个字符串用以说明 JobListener 的名称     * 对于注册为全局的监听器，getName() 主要用于记录日志，     * 对于由特定 Job 引用的 JobListener，注册在 JobDetail 上的监听器名称必须匹配从监听器上 getName() 方法的返回值     */</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 将要被执行时调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 即将被执行，但又被 TriggerListener 否决了时调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 被执行之后调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token class-name">JobExecutionException</span> jobException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>结合前面给出一个简单示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleJobListener</span> <span class="token keyword">implements</span> <span class="token class-name">JobListener</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SimpleJobListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" listener name is:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" is going to be executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" was vetoed and not executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">JobExecutionException</span> jobException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" was executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从Scheduler工厂获取一个Scheduler的实例</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个指定任务job1的Job Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 is going to be executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 was executed</code></pre><p>​    我们可以通过addJobListener() 注册一个非全局监听器，针对指定任务，也可以调用任务组；通过Scheduler 调用 addGlobalJobListener() 方法注册为一个全局的 JobListener。如果 Scheduler 不能根据名称找到监听器，它会抛出一个 SchedulerException 异常。<br>​    加入一个非全局 JobListener 的步骤必须是依序完成。JobListener 必须首先加入到 Scheduler 中。接着，JobListener 才能够设置给 JobDetail 对象。之后，你就能使用 scheduleJob() 方法安全的把 JobDetail 加入到 Scheduler 中。</p><h3 id="4-2-TriggerListener"><a href="#4-2-TriggerListener" class="headerlink" title="4.2 TriggerListener"></a>4.2 TriggerListener</h3><p>实现org.quartz.TriggerListener接口可以监听Trigger 实例生命周期。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TriggerListener</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**     * getName() 方法返回一个字符串用以说明 TriggerListener 的名称     * 对于非全局的 TriggerListener，在 addTriggerListener() 方法中给定的名称必须与监听器的 getName() 方法返回值相匹配     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 当与监听器相关联的 Trigger 被触发，Job 上的 execute() 方法将要被执行时，Scheduler 就调用这个方法     * 在全局 TriggerListener 情况下，这个方法为所有 Trigger 被调用     */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>           <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 在 Trigger 触发后，Job 将要被执行时由 Scheduler 调用这个方法     * TriggerListener 给了一个选择去否决 Job 的执行。假如这个方法返回 true，这个 Job 将不会为此次 Trigger 触发而得到执行     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">vetoJobExecution</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>            <span class="token class-name">JobExecutidonContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是在 Trigger 错过触发时     * 如这个方法的 JavaDoc 所指出的，你应该关注此方法中持续时间长的逻辑：在出现许多错过触发的 Trigger 时，长逻辑会导致骨牌效应。你应当保持这上方法尽量的小     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerMisfired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Trigger 被触发并且完成了 Job 的执行时，Scheduler 调用这个方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerComplete</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>            <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token keyword">int</span> triggerInstructionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </code></pre><p>结合给出一个简单示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleTriggerListener</span> <span class="token keyword">implements</span> <span class="token class-name">TriggerListener</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" was fired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">vetoJobExecution</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" was not vetoed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerMisfired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" misfired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerComplete</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token class-name">CompletedExecutionInstruction</span> triggerInstructionCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" is complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.147</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 was fired<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.147</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 was <span class="token keyword">not</span> vetoed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 is going to be executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 was executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 is complete</code></pre><p>​    同样我们可以指定一个任务组的triggerscheduler.getListenerManager().addTriggerListener(new SimpleTriggerListener(“SimpleTrigger”), GroupMatcher.groupEquals(“group”));也可以调用 addGloabelTriggerListener()注册一个全局的 TriggerListener。<br>针对于前面的非全局 JobListener 提到的相同的警告可以应用到这里来；你必须在把它设置给 Trigger 实例并存储了 Trigger 之前把 TriggerListener 加入到 Scheduler 中。</p><h3 id="4-3-SchedulerListener"><a href="#4-3-SchedulerListener" class="headerlink" title="4.3 SchedulerListener"></a>4.3 SchedulerListener</h3><p>org.quartz.SchedulerListener 接口包含了一系列的回调方法，它们会在 Scheduler 的生命周期中有关键事件发生时被调用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SchedulerListener</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**     * Scheduler 在有新的 JobDetail 部署时调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobScheduled</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 在有 JobDetail 卸载时调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobUnscheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span> <span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 当一个 Trigger 来到了再也不会触发的状态时调用这个方法     * 除非这个 Job 已设置成了持久性，否则它就会从 Scheduler 中移除     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFinalized</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是发生在一个 Trigger 或 Trigger 组被暂停时     * 假如是 Trigger 组的话，triggerName 参数将为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersPaused</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span> <span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是发生成一个 Trigger 或 Trigger 组从暂停中恢复时     * 假如是 Trigger 组的话，triggerName 参数将为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersResumed</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span><span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 当一个或一组 JobDetail 暂停时调用这个方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsPaused</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 当一个或一组 Job 从暂停上恢复时调用这个方法     * 假如是一个 Job 组，jobName 参数将为 null     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsResumed</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 在 Scheduler 的正常运行期间产生一个严重错误时调用这个方法     * 你可以使用 SchedulerException 的 getErrorCode() 或者 getUnderlyingException() 方法或获取到特定错误的更详尽的信息     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerError</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">SchedulerException</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * Scheduler 调用这个方法用来通知 SchedulerListener Scheduler 将要被关闭     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> </code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleSchedulerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Scheduler 创建后是在 Job 注册之前被启动的。这就使得在 Job 部署时 jobScheduled() 方法能得到调用</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个指定任务的Job Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个局部的Trigger Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">(</span><span class="token string">"SimpleTrigger"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">TriggerKey</span><span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"shut down scheduler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.401</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler has been started<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.411</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> group<span class="token punctuation">.</span>job1 is added<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.411</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> job1 has been scheduled<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 was fired<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 was not vetoed<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span>  listener name is<span class="token operator">:</span><span class="token class-name">SimpleJobListener</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span> job1 is going <span class="token keyword">to</span> <span class="token namespace">be</span> executed<span class="token class-name">Hello</span> <span class="token class-name">Quartz</span><span class="token operator">!</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span>  listener name is<span class="token operator">:</span><span class="token class-name">SimpleJobListener</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span> job1 was executed<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 is complete<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> <span class="token class-name">Trigger</span> is finished <span class="token keyword">for</span> job1<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> group<span class="token punctuation">.</span>job1 is deleted<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED shutting down<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED paused<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler is in standby mode<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler is being shutdown<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler has been shutdown<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED shutdown complete<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>HelloQuartz</span> <span class="token operator">-</span> shut down scheduler</code></pre><p>同样，注意addSchedulerListener在示例中放置的位置，否则因为执行顺序问题，有些事件将无法捕获。</p><h2 id="五、Quartz远程调用"><a href="#五、Quartz远程调用" class="headerlink" title="五、Quartz远程调用"></a>五、Quartz远程调用</h2><p>Quartz RMI的目的是为不同客户端提供更好的定时任务调度服务。</p><h3 id="5-1-创建Quartz-RMI服务端"><a href="#5-1-创建Quartz-RMI服务端" class="headerlink" title="5.1 创建Quartz RMI服务端"></a>5.1 创建Quartz RMI服务端</h3><p>首先创建Quartz RMI的服务端。</p><h4 id="5-1-1-配置服务端启动参数"><a href="#5-1-1-配置服务端启动参数" class="headerlink" title="5.1.1 配置服务端启动参数"></a>5.1.1 配置服务端启动参数</h4><p>RMI 服务端必要的属性包括：</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>org.quartz.scheduler.rmi.export</td><td>FALSE</td><td>假如你要使 Quartz 调度作为一个可用的 RMI 对象，这个标记必须设置为 true</td></tr><tr><td>org.quartz.scheduler.rmi.registryHost</td><td>localhost</td><td>这是运行 RMI 注册表所在的主机</td></tr><tr><td>org.quartz.scheduler.rmi.registryPort</td><td>1099</td><td>这是 RMI 注册服务监听所用的端口号(通常是1099)</td></tr><tr><td>org.quartz.scheduler.rmi.createRegistry</td><td>never</td><td>这项决定了 Quartz 是否会创建 RMI 注册服务。如果你不希望 Quartz 创建注册服务就设置为 false 或 never。如果是希望  Quartz 首先尝试去使用已存在的注册服务，如果失败的话自行创建一个就设置为 true 或 as_needed。假如注册服务创建好了，它会使用给定的  registryPort 绑定到所给的 registryHost 上</td></tr><tr><td>org.quartz.scheduler.rmi.serverPort</td><td>-1</td><td>这是 Quartz 调度器服务所绑定的端口号，在其中监听到来的连接。默认，RMI 服务会随机选择一个端口号作为调度器绑定到 RMI 注册服务的端口</td></tr></tbody></table><p>用于 Quartz RMI 服务端的 quartz.properties 文件样例如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#==============================================================     </span><span class="token comment"># Configure Main Scheduler Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">RMIScheduler     </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure RMI Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.rmi.export</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryHost</span> <span class="token punctuation">=</span> <span class="token value attr-value">localhost      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryPort</span> <span class="token punctuation">=</span> <span class="token value attr-value">1099      </span><span class="token key attr-name">org.quartz.scheduler.rmi.serverPort</span> <span class="token punctuation">=</span> <span class="token value attr-value">0      </span><span class="token key attr-name">org.quartz.scheduler.rmi.createRegistry</span> <span class="token punctuation">=</span> <span class="token value attr-value">true    </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure ThreadPool     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.SimpleThreadPool      </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span> <span class="token value attr-value">10      </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5     </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure JobStore     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.jobStore.misfireThreshold</span> <span class="token punctuation">=</span> <span class="token value attr-value">60000      </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.RAMJobStore   </span></code></pre><h4 id="5-1-2-创建服务端启动类"><a href="#5-1-2-创建服务端启动类" class="headerlink" title="5.1.2 创建服务端启动类"></a>5.1.2 创建服务端启动类</h4><p>​    为启动 Quartz RMI 服务端，你必须创建一个启动类，该类从工厂中获取到调度器实例，然后运行这个调度器。<br>​    首先，为清晰起见，我们把 quartz.properties 文件更名为 server.properties，这时候要告诉 Quartz RMI 服务端去加载新命名的文件而不是默认的 quartz.properties 文件。更改文件名会让我们调试问题变得容易些。这样，我们可以确保 Quartz 加载的是正确的设置文件。<br>​    第二个改变是：我们加载了一个新的安全管理器(SecurityManager)，以便能够赋予 RMI 服务端必须的权限。<br>​    </p><p>代码示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzRMIServer</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">QuartzRMIServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// Use this properties file instead of quartz.properties     </span>          <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"org.quartz.properties"</span><span class="token punctuation">,</span>                    <span class="token string">"server.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// RMI with Quartz requires a special security manager     </span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token keyword">new</span>                        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span>RMISecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token comment">// Get a reference to the Scheduler     </span>          <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span>                    <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">/*               * Due to the server.properties file, our Scheduler will              * be exported to RMI Registry automatically.              */</span>              scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Quartz RMI Server started at "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RMI Clients may now access it. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    <span class="token string">"The scheduler will run until you type \"exit\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">BufferedReader</span> rdr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                         <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Type 'exit' to shutdown server: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rdr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler is shutting down..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler has been stopped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">QuartzRMIServer</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuartzRMIServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               example<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   </code></pre><p>​    在代码示例中，安装了 RMISecurityManager 之后，通过工厂方法获得调度器实例，并调用它的 start() 方法。服务端是设计成在控制台运行的，因此一旦调度器启动之后，直至用户在控制台上键入 exit 。接着调度器被关闭也不再为远程的客户端提供服务了。<br>除了要使用 RMISecurityManager，我们注意到用不着在代码中做任何特别的事情，就能让 Quartz 调度器作为一个远程调度器来用。那些全是托server.properties 文件的福所致。当调度器被创建后，假如属性文件告诉它这么做，调度器就会把自己导出并注册到 RMI 注册服务器上，并使之可被远程调用。</p><h4 id="5-1-3-使用RMI注册服务"><a href="#5-1-3-使用RMI注册服务" class="headerlink" title="5.1.3 使用RMI注册服务"></a>5.1.3 使用RMI注册服务</h4><p>​    当属性 org.quartz.scheduler.rmi.createRegistry设置为 true 或者 always时，Quartz 会自动启动注册服务。<br>​    你也可以选择在命令行下使用 Java 的 rmiregistry 命令来运行注册服务。假如你要通过命令行启动注册服务，要确保你启动时所用的端口号要与属性文件所指定的一致。要从命令行启动，你应先进入到 <JAVA_HOME>/bin 目录下，然后键入如下命令：<code>rmiregistry &lt;port&gt;</code>。</p><h3 id="5-2-创建Quartz-RMI客户端"><a href="#5-2-创建Quartz-RMI客户端" class="headerlink" title="5.2 创建Quartz RMI客户端"></a>5.2 创建Quartz RMI客户端</h3><h4 id="5-2-1-配置客户端启动参数"><a href="#5-2-1-配置客户端启动参数" class="headerlink" title="5.2.1 配置客户端启动参数"></a>5.2.1 配置客户端启动参数</h4><p>Quartz RMI 客户端所必须的属性：</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>org.quartz.scheduler.rmi.registryHost</td><td>localhost</td><td>这是运行 RMI 注册服务所在的主机</td></tr><tr><td>org.quartz.scheduler.rmi.registryPort</td><td>1099</td><td>这是运行 RMI 注册服务所监听的端口(通常是 1099)</td></tr><tr><td>org.quartz.scheduler.rmi.proxy</td><td>FALSE</td><td>假如你希望连接到远程服务端的调度器，设置 org.quartz.scheduler.rmi.proxy 标志为 true。你同时必须指定 RMI  注册服务进程的主机和端口号</td></tr></tbody></table><p>​    为了能让客户端定位到服务对象，它需要知道 RMI 注册服务运行在哪里，以便能查找到远程对象。org.quartz.scheduler.rmi.registryHost 和 org.quartz.scheduler.rmi.registryPort 属性必须是运行着 RMI 注册服务的主机和端口。假如你配置了 Quartz RMI 服务端自动启动注册服务，那么 RMI 注册服务器与 RMI 服务端就是同在一个机器上的。<br>​    因为你想要客户端能联系到远程调度器去部署 Job，你必须设置属性 org.quartz.scheduler.rmi.proxy 为 true。<br>​    一个用于 Quartz RMI 客户端的 quartz.properties 文件例子：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#=============================================================     </span><span class="token comment"># Configure Main Scheduler Properties     </span><span class="token comment">#=============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">RMIScheduler     </span><span class="token comment">#org.quartz.scheduler.instanceId = AUTO     </span><span class="token comment">#==============================================================     </span><span class="token comment">#Configure RMI Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryHost</span><span class="token punctuation">=</span><span class="token value attr-value">localhost      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryPort</span><span class="token punctuation">=</span><span class="token value attr-value">1099      </span><span class="token key attr-name">org.quartz.scheduler.rmi.proxy</span><span class="token punctuation">=</span> <span class="token value attr-value">true  </span></code></pre><p>注意，<strong>属性 org.quartz.scheduler.instanceName 在 RMI 客户端和服务端必须一致。不然，客户将无法在注册服务中查找到服务对象，会收一个客户端无法获取到远程调度器句柄的异常。</strong></p><h4 id="5-2-2-创建RMI客户端类"><a href="#5-2-2-创建RMI客户端类" class="headerlink" title="5.2.2 创建RMI客户端类"></a>5.2.2 创建RMI客户端类</h4><p>通过远程调度器部署一个 Job 的 Quartz RMI 客户端的例子。我们把 quartz.properties 文件更名为 client.properties 并且告诉客户端从更名后的文件中加载属性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMITestClient</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">RMITestClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Use this properties file instead of quartz.properties      </span>          <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"org.quartz.properties"</span><span class="token punctuation">,</span>                      <span class="token string">"client.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Get a reference to the remote scheduler      </span>          <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span>                     <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Define the job to add      </span>          <span class="token class-name">JobDetail</span> job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDetail</span><span class="token punctuation">(</span><span class="token string">"remotelyAddedJob"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                          <span class="token class-name">SimpleJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JobDataMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Your remotely added job has executed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                job<span class="token punctuation">.</span><span class="token function">setJobDataMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CronTrigger</span> trigger <span class="token operator">=</span>                     <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"remotelyAddedTrigger"</span><span class="token punctuation">,</span>                        <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"remotelyAddedJob"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token keyword">new</span>                             <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"/5 * * ? * *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// schedule the remote job      </span>         scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Remote job scheduled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">RMITestClient</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RMITestClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               example<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    </code></pre><p>工厂类是依据我们告诉它所加载的 client.properties 文件知道这么做的。明确的讲就是，设置了 RMI 属性导引着工厂类创建了一个远程调度器：org.quartz.scheduler.rmi.proxy = true</p><h2 id="六、Quartz集群"><a href="#六、Quartz集群" class="headerlink" title="六、Quartz集群"></a>六、Quartz集群</h2><p>集群化使Quartz满足了高可用，可扩展性强的企业级部署需要。本节主要讲Quartz的数据库集群化方式。开启Quartz集群包括3个步骤：</p><ol><li>配置每个节点的 quartz.properties 文件，支持集群化</li><li>将Scheduler信息装在数据库</li><li>启动每个Quartz节点</li></ol><h3 id="6-1-集群实例的配置"><a href="#6-1-集群实例的配置" class="headerlink" title="6.1 集群实例的配置"></a>6.1 集群实例的配置</h3><p>集群实例的 quartz.properties 文件示例如下所示</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#==============================================================  </span><span class="token comment">#Configure Main Scheduler Properties  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">TestScheduler1  </span><span class="token key attr-name">org.quartz.scheduler.instanceId</span> <span class="token punctuation">=</span> <span class="token value attr-value">AUTO </span><span class="token comment">#==============================================================  </span><span class="token comment">#Configure ThreadPool  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.Simple ThreadPool  </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span> <span class="token value attr-value">5  </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5  </span><span class="token comment">#==============================================================  </span><span class="token comment">#Configure JobStore  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.jobStore.misfireThreshold</span> <span class="token punctuation">=</span> <span class="token value attr-value">60000  </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.impl.jdbcjobstore.JobStoreTX  </span><span class="token key attr-name">org.quartz.jobStore.driverDelegateClass</span> <span class="token value attr-value">=  </span><span class="token key attr-name">org.quartz.impl.jdbcjobstore.MSSQLDelegate</span> <span class="token value attr-value"> </span><span class="token key attr-name">org.quartz.jobStore.tablePrefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">QRTZ_  </span><span class="token key attr-name">org.quartz.jobStore.dataSource</span> <span class="token punctuation">=</span> <span class="token value attr-value">myDS  </span><span class="token key attr-name">org.quartz.jobStore.isClustered</span> <span class="token punctuation">=</span> <span class="token value attr-value">true  </span><span class="token key attr-name">org.quartz.jobStore.clusterCheckinInterval</span> <span class="token punctuation">=</span> <span class="token value attr-value">20000  </span><span class="token comment">#==============================================================  </span><span class="token comment">#Non-Managed Configure Datasource  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.dataSource.myDS.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">net.sourceforge.jtds.jdbc.Driver  </span><span class="token key attr-name">org.quartz.dataSource.myDS.URL</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:jtds:sqlserver://localhost:1433/quartz  </span><span class="token key attr-name">org.quartz.dataSource.myDS.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token key attr-name">org.quartz.dataSource.myDS.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token key attr-name">org.quartz.dataSource.myDS.maxConnections</span> <span class="token punctuation">=</span> <span class="token value attr-value">10  </span></code></pre><p>​    每一个实例有两个属性应该配置org.quartz.scheduler.instanceName和org.quartz.scheduler.instanceId，用在 JDBC JobStore 中和数据库来唯一标识实例。集群下实例 ID 建议使用 AUTO，防止重复后导致Quartz 集群将不能正常工作。<br>通过设置 org.quartz.jobStore.isClustered 属性为 true，你就告诉了 Scheduler 实例要它参与到一个集群当中。这一属性会贯穿于调度框架的始终，用于修改集群环境中操作的默认行为。<br>​    <code>org.quartz.jobStore.clusterCheckinInterval</code> 属性定义了Scheduler 实例检入到数据库中的频率(毫秒为单位)。Scheduler 检查是否其他的实例到了它们应当检入的时候未检入；这能指出一个失败的 Scheduler 实例，且当前 Scheduler 会以此来接管任何执行失败并可恢复的 Job。通过检入操作，Scheduler 也会更新自身的状态记录。<br>​    数据库集群化方式的JobStore选择可以是JobStoreTX 或 JobStoreCMT。同时如第三节说的配置数据源及其他合理属性。</p><h3 id="6-2-集群调度详解"><a href="#6-2-集群调度详解" class="headerlink" title="6.2 集群调度详解"></a>6.2 集群调度详解</h3><p>​    参考 <a href="https://www.cnblogs.com/yangyudexiaobai/p/4422665.html">quartz定时任务框架调度机制解析</a></p><p>​    Quartz集群调度是以数据库作为枢纽，各个节点并不感知其他节点的存在,只是通过数据库来进行间接的沟通。</p><p>​    quartz运行时由QuartzSchedulerThread类作为主体，循环执行调度流程。JobStore作为中间层，按照quartz的并发策略执行数据库操作，完成主要的调度逻辑。JobRunShellFactory负责实例化JobDetail对象，将其放入线程池运行。LockHandler负责获取LOCKS表中的数据库悲观锁。</p><p><img src="Quartz%E9%9B%86%E7%BE%A4%E8%B0%83%E5%BA%A6%E6%B5%81%E7%A8%8B.jpg" alt="Quartz集群调度流程"></p><p>​    整个quartz对任务调度的时序大致如下</p><p><img src="Quartz%E9%9B%86%E7%BE%A4%E8%B0%83%E5%BA%A6%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt="Quartz集群调度时序图"></p><p>梳理一下其中的流程,可以表示为：</p><p>0.调度器线程run()</p><p>1.获取待触发trigger</p><blockquote><p>1.1数据库LOCKS表TRIGGER_ACCESS行加锁<br>1.2读取JobDetail信息<br>1.3读取trigger表中触发器信息并标记为”已获取”<br>1.4commit事务,释放锁</p></blockquote><p>2.触发trigger</p><blockquote><p>2.1数据库LOCKS表STATE_ACCESS行加锁<br>2.2确认trigger的状态<br>2.3读取trigger的JobDetail信息<br>2.4读取trigger的Calendar信息<br>2.5更新trigger信息<br>2.6commit事务,释放锁</p></blockquote><p>3实例化并执行Job</p><blockquote><p>3.1从线程池获取线程执行JobRunShell的run方法</p></blockquote><p>​    </p><p>​    可以看到,这个过程中有两个相似的过程:同样是对数据表的更新操作,同样是在执行操作前获取锁 操作完成后释放锁.这一规则可以看做是quartz解决集群问题的核心思想.<br>​    进一步解释这条规则就是:一个调度器实例在执行涉及到分布式问题的数据库操作前,首先要获取QUARTZ2_LOCKS表中对应当前调度器的行级锁,获取锁后即可执行其他表中的数据库操作,随着操作事务的提交,行级锁被释放,供其他调度器实例获取.<br>集群中的每一个调度器实例都遵循这样一种严格的操作规程,那么对于同一类调度器来说,每个实例对数据库的操作只能是串行的.而不同名的调度器之间却可以并行执行.</p><h3 id="6-3-Quartz-集群-Cookbook"><a href="#6-3-Quartz-集群-Cookbook" class="headerlink" title="6.3 Quartz 集群 Cookbook"></a>6.3 Quartz 集群 Cookbook</h3><p>本节记录Quartz集群的细节问题。</p><h4 id="指派-Job-给集群中特定的实例"><a href="#指派-Job-给集群中特定的实例" class="headerlink" title="指派 Job 给集群中特定的实例"></a>指派 Job 给集群中特定的实例</h4><p>目前不支持指派一个Job到集群中特定的节点。假如你需要这种行为，你可以创建一个非集群的 Quartz 应用与集群中的节点并行运行。注意，不要让非集群的实例指向到集群所用的同一套数据库表。不然你会得到不可预知的结果。</p><h4 id="在集群中的每一个节点上运行-Job"><a href="#在集群中的每一个节点上运行-Job" class="headerlink" title="在集群中的每一个节点上运行 Job"></a>在集群中的每一个节点上运行 Job</h4><p>正如前面所回答的，当前还没有一种方式能让某一个 Job 实例在集群中的每一个节点上都运行。最好的办法是使用一个非集群的实例与集群的每一个节点并行运行，并且要使用独立的一套数据库表或单独的 JobInitializationPlugin 和 RAMJobStore 用到的 XML 文件。</p><h5 id="在不同的机器上运行节点"><a href="#在不同的机器上运行节点" class="headerlink" title="在不同的机器上运行节点"></a>在不同的机器上运行节点</h5><p>Quartz 实际并不关心你是在相同的还是不同的机器上运行节点。当集群是放置在不同的机器上时，通常称之为水平集群。节点是跑在同一台机器是，称之为垂直集群。对于垂直集群，存在着单点故障的问题。这对高可用性的应用来说是个坏消息，因为一旦机器崩溃了，所有的节点也就被有效的终止了。</p><h4 id="使用时间同步服务"><a href="#使用时间同步服务" class="headerlink" title="使用时间同步服务"></a>使用时间同步服务</h4><p>当你在是在不同的机器上运行 Quartz 集群时，时钟应当要同步，以免出现离奇且不可预知的行为。我们已经提及过，假如时钟没能够同步，Scheduler 实例将对其他节点的状态产生混乱。有几种简单的方法来保证时钟何持同步，而且也没有理由不这么做。<br>最简单的同步计算机时钟的方式是使用某一个 Internet 时间服务器(Internet Time Server ITS)。关于如何基于其中一个国际可接受标准来设置你的时钟的信息请看 <a href="http://tf.nist.gov/service/its.html%E3%80%82">http://tf.nist.gov/service/its.html。</a></p><h4 id="从集群获取正在执行的-Job-列表"><a href="#从集群获取正在执行的-Job-列表" class="headerlink" title="从集群获取正在执行的 Job 列表"></a>从集群获取正在执行的 Job 列表</h4><p>当前，如果不直接进到数据库的话，还没有一个简单的方式来得到集群中所有正在执行的 Job 列表。如果你请求一个 Scheduler 实例，你将只能得到在那个实例上正运行 Job 的列表。你可以写一些访问数据库 JDBC 代码来从适当的表中获取信息。当然，这是用的 Quartz 之外的方法，但确是能解决问题的。另一个方法是使用 Quartz 的 RMI 特性来依次连接到每一个节点，并从中查询到当前正在执行的 Job。</p><h4 id="让集群和非集群实例一起运行"><a href="#让集群和非集群实例一起运行" class="headerlink" title="让集群和非集群实例一起运行"></a>让集群和非集群实例一起运行</h4><p>非集群环境不要使用与集群应用相同的一套数据库表；否则将得到不可预知的结果，集群和非集群的 Job 都会遇到问题。</p><h4 id="在集群环境中使用全局监听器"><a href="#在集群环境中使用全局监听器" class="headerlink" title="在集群环境中使用全局监听器"></a>在集群环境中使用全局监听器</h4><p>在集群环境中，你仍然可以使用 Job 和 Trigger 监听器。唯一的问题是哪一个 Scheduler 实例将收到方法回调。<br>要记住这个最简单的方法是：Job 或 Trigger 是在哪个 Scheduler 实例上执行的，通知的就是这个 Scheduler 实例上的监听器。因为 Job 和 Trigger 只会在单个节点上执行，也就只会通知那个节点上的监听器。</p><p>到此Java Quartz Job Scheduling基础的内容已经完成，但对Quartz的学习还远远没有结束，比如类似Terracotta Quartz这种分布式缓存实现Quartz集群，比如Quartz与Spring Boot框架结合的使用。未完待续…</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>《Quartz Job Scheduling Framework v1.0.0》<br><a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/">http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/</a> Quartz Job Scheduler Tutorials<br><a href="https://www.cnblogs.com/mengrennwpu/p/7191229.html">https://www.cnblogs.com/mengrennwpu/p/7191229.html</a> Quartz使用(4) - Quartz监听器Listerner<br><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html">https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html</a> Quartz集群原理及配置应用<br><a href="https://www.cnblogs.com/yangyudexiaobai/p/4422665.html">https://www.cnblogs.com/yangyudexiaobai/p/4422665.html</a> quartz定时任务框架调度机制解析</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作命令</title>
      <link href="/2022/08/17/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/08/17/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><p>操作系统 Operating System 简称 OS，通俗讲就是一款软件，不过和一般的软件不同，操作系统是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他的软件都必须在操作系统的支持下才能运行。</p><h2 id="Linux-文件系统"><a href="#Linux-文件系统" class="headerlink" title="Linux 文件系统"></a>Linux 文件系统</h2><ul><li><p><strong>/var：</strong>包含在正常操作中被改变的文件、假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。</p></li><li><p><strong>/home：</strong> 包含用户的文件：参数设置文件、个性化文件、文档、数据、EMALL、缓存数据等，每增加一个用户，系统就会根据其用户名在 home 目录下新建和其他用户同名的文件夹，用于保存其用户配置。</p></li><li><p><strong>/proc：</strong>包含虚幻的文件，他们实际上并不存在于磁盘上，也不占用任何空间（用 ls-l 可以显示它们的大小）当查看这些文件时，实际上是在访问存在内存中的信息，这些信息用于访问系统。</p></li><li><p><strong>/bin：</strong>包含系统启动时需要的执行文件（二进制），这些文件可以被普通用户使用。</p></li><li><p><strong>/etc：</strong>为操作系统的配置文件目录（防火墙、启动项）</p></li><li><p><strong>/root：</strong>为系统管理员（也叫超级用户或根用户）的 Home 目录。</p></li><li><p><strong>/dev：</strong>为设备目录，Linux下设备被当成文件，这样一来硬件被抽象化、便于读写、网络共享以及需要临时装载到文件系统中，正常情况下，设备会有一个独立的子目录，这些设备的内容会出现在独立的子目录下。</p></li></ul><h1 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h1><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><ul><li><p>df -h ：查看硬盘剩余容量</p><pre class="language-bash" data-language="bash"><code class="language-bash">df（英文全拼：disk free） 命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。</code></pre></li></ul><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><ul><li><p>du -sh * ，du -h –max-depth=1 ：查看当前目录下每项大小</p><pre class="language-bash" data-language="bash"><code class="language-bash">du<span class="token punctuation">(</span>disk usage<span class="token punctuation">)</span>命令用于显示目录或文件所占用的磁盘空间。-h或--human-readable 以K，M，G为单位，提高信息的可读性。-s或--summarize 仅显示总计。--max-depth<span class="token operator">=</span><span class="token operator">&lt;</span>目录层数<span class="token operator">></span> 超过指定层数的目录后，予以忽略。</code></pre></li></ul><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ul><li>rm -rf 文件夹 ：删除文件夹</li><li>rm edu_* ：删除edu开头的所有文件</li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><ul><li>free -m 内存</li></ul><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><ul><li>netstat -tunlp|grep [端口号]  根据端口查进程号</li><li>ps -ef|grep [进程号] 根据进程号查相关进程信息</li></ul><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li><p>find [搜索范围路径] -name [文件名/文件夹名] 可用*来模糊查询</p></li><li><p>rm -rf [文件名/文件夹名] 删除文件 注意：绝对不要用<code>/*</code>删除文件</p></li><li><p>tail -200f XXX.log 实时查看</p></li><li><p>tar zxvf xx.tar.gz  解压文件</p></li></ul><h2 id="复制和移动"><a href="#复制和移动" class="headerlink" title="复制和移动"></a>复制和移动</h2><h3 id="文件复制命令cp"><a href="#文件复制命令cp" class="headerlink" title="文件复制命令cp"></a>文件复制命令cp</h3><p><strong>命令格式：</strong></p><blockquote><p>cp [-adfilprsu] 源文件(source) 目标文件(destination)</p><p>cp [option] source1 source2 source3 …  directory</p><p>即： cp  [options] sourcedir  destdir</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-a</strong>  :  是指archive的意思，也说是指复制所有的目录</p><p><strong>-d</strong>  :  若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</p><p><strong>-f</strong>  :  强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</p><p><strong>-i</strong>  :  若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</p><p><strong>-l</strong>  :  建立硬连接(hard link)的连接文件，而非复制文件本身</p><p><strong>-p</strong>  :  与文件的属性一起复制，而非使用默认属性</p><p><strong>-r</strong>  :  递归复制，用于目录的复制操作</p><p><strong>-s</strong>  :  复制成符号连接文件(symbolic link)，即“快捷方式”文件</p><p><strong>-u</strong>  :  若目标文件比源文件旧，更新目标文件</p></blockquote><p><strong>cp命令案例：</strong></p><blockquote><p><strong>cp  /etc/sys.conf  /home/</strong></p><p>​    将/etc/sys.conf文件复制到home目录下</p><p><strong>cp /test1/file1 /test3/file2</strong></p><p>​    将/test1目录下的file1复制到/test3目录，并将文件名改为file2</p><p><strong>cp -r test/ /home/</strong></p><p>​    将当前目录”test/“以及其所有文件复制到home目录下</p><p><strong>cp -r test/ nettest</strong></p><p>​    将当前目录”test/“下的所有文件复制到新目录“newtest”下</p><p><strong>cp -a /etc/ /home</strong></p><p>​    将”/etc/“目录以及所有文件和子目录以及延伸的（保留链接、文件属性）复制到/home目录下</p></blockquote><h3 id="文件移动命令mv"><a href="#文件移动命令mv" class="headerlink" title="文件移动命令mv"></a>文件移动命令mv</h3><p><strong>命令格式：</strong></p><blockquote><p>mv [-fiv] source destination</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-f</strong>  :  force，强制直接移动而不询问</p><p><strong>-i</strong>  :  若目标文件(destination)已经存在，就会询问是否覆盖</p><p><strong>-u</strong>  :  若目标文件已经存在，且源文件比较新，才会更新</p></blockquote><p><strong>mv命令案例：</strong></p><blockquote><p>mv /test1/file1 /test3/file2</p><p>​    表示将test1目录下的file1复制到test3 目录，并将文件名改为file2</p><p>mv * ../</p><p>​     表示Linux当前目录所有文件移动到上一级目录</p></blockquote><h3 id="文件删除命令rm"><a href="#文件删除命令rm" class="headerlink" title="文件删除命令rm"></a>文件删除命令rm</h3><p><strong>命令格式：</strong></p><blockquote><p>rm [fir] 文件或目录</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-f</strong>  :  强制删除</p><p><strong>-i</strong>  :  交互模式，在删除前询问用户是否操作</p><p><strong>-r</strong>  :  递归删除，常用在目录的删除</p></blockquote><h4 id="rm命令案例："><a href="#rm命令案例：" class="headerlink" title="rm命令案例："></a>rm命令案例：</h4><blockquote><p><strong>rm -i /test/file1</strong></p><p>表示删除/test目录下的file1文件</p></blockquote><h2 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h2><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r local_folder remote_username@remote_ip:remote_folder </code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> local_file remote_username@remote_ip:remote_folder<span class="token function">scp</span> local_file remote_username@remote_ip:remote_file</code></pre><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><h3 id="tar-Tape-Archive，磁带归档的缩写）"><a href="#tar-Tape-Archive，磁带归档的缩写）" class="headerlink" title="tar(Tape Archive，磁带归档的缩写）"></a>tar(Tape Archive，磁带归档的缩写）</h3><p>用于归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用 gzip 或者 bzip2 等技术进行压缩。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre class="language-sh" data-language="sh"><code class="language-sh">tar &lt;选项&gt; &lt;文件或目录&gt;</code></pre><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><pre class="language-sh" data-language="sh"><code class="language-sh">--delete : 从tar包中删除某个文件-r, --append : 将文件追加到tar归档文件中-t, --list : 列出tar归档文件中包含的文件或目录-u, --update : 将已更新的文件追加到tar归档文件中-x, --extract, --get : 释放tar归档文件中文件及目录-C, --directory&#x3D;DIR : 执行归档动作前变更工作目录到 目标DIR-f, --file&#x3D;ARCHIVE : 指定 (将要创建或已存在的) 归档文件名-j, --bip2 : 对归档文件使用 bzip2 压缩-J, --xz : 对归档文件使用 xz 压缩-p, --preserve-permissions : 保留原文件的访问权限-v, --verbose : 显示命令整个执行过程-z, gzip : 对归档文件使用 gzip 压缩</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-sh" data-language="sh"><code class="language-sh">tar -cvf mytest.tar &#x2F;etc&#x2F; &#x2F;root&#x2F;anaconda-ks.cfg  #创建一个 tar 文件，将 &#x2F;etc&#x2F; 目录和 &#x2F;root&#x2F;anaconda-ks.cfg 文件打包进去tar -tvf mytest.tar  # 列出归档文件中的内容tar -rvf mytest.tar original-ks.cfg# 追加某文件到归档(tar)文件中tar -xvf mytest.tar #释放tar归档至当前所在目录tar -xvf mytest.tar -C testdir02 #释放 tar 文件到指定目录tar -zcpvf myarchive.tar.gz &#x2F;etc&#x2F; &#x2F;opt&#x2F; #注-zcpvf顺序不能变 创建并压缩归档文件tar -zxpvf myarchive.tgz -C &#x2F;tmp&#x2F; #解压 .tar.gz</code></pre><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><ul><li><p>查看防火墙状态</p><pre class="language-sh" data-language="sh"><code class="language-sh"># centos7service iptables status# centos8service firewalld statusfirewall-cmd --state</code></pre></li><li><p>添加端口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#centos7</span>/sbin/iptables -I INPUT -p tcp --dport <span class="token number">8080</span> -j  <span class="token comment">#添加8080端口</span><span class="token comment">#centos8</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp --permanent <span class="token comment">#放行8080端口</span>--permanent <span class="token comment">#永久生效，没有此参数，重启后失效</span></code></pre></li><li><p>查看开放的端口</p><pre class="language-sh" data-language="sh"><code class="language-sh">firewall-cmd --list-all</code></pre></li><li><p>重启防火墙</p><pre class="language-sh" data-language="sh"><code class="language-sh"># centos7systemctl start iptables.service  #开启防火墙systemctl stop iptables  #关闭防火墙# centos8systemctl stop firewalld.service #（关闭防火墙）systemctl start firewalld.service #（开启防火墙）systemctl disable firewalld.service #（禁止防火墙自启动）systemctl enable firewalld.service #（防火墙随系统开启启动）firewall-cmd –-reload# 设置只允许某个ip访问特定的端口firewall-cmd --permanent --add-rich-rule&#x3D;&quot;rule family&#x3D;&quot;ipv4&quot; source address&#x3D;&quot;127.0.0.1&quot; port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;8888&quot; accept&quot;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 安装</title>
      <link href="/2022/08/14/gradle%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/14/gradle%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Gradle-安装前的准备"><a href="#Gradle-安装前的准备" class="headerlink" title="Gradle 安装前的准备"></a>Gradle 安装前的准备</h2><p>Gradle 可以安装在 Linux，macOS，Windows 等主流操作系统，唯一的要求就是操作系统上已经安装了 Java JDK 7 及以上版本。可以通过 java -version 验证是否满足条件，以下是我的例子：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> java -versionjava version <span class="token string">"1.8.0_152"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_152-b16<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.152</span>-b16, mixed mode<span class="token punctuation">)</span></code></pre><h2 id="第一种安装方式"><a href="#第一种安装方式" class="headerlink" title="第一种安装方式"></a>第一种安装方式</h2><h3 id="1-访问官网下载最新版安装包"><a href="#1-访问官网下载最新版安装包" class="headerlink" title="1. 访问官网下载最新版安装包"></a>1. <a href="https://link.ld246.com/forward?goto=https://gradle.org/releases">访问官网</a>下载最新版安装包</h3><p>官方提供以下 2 种压缩包可供下载</p><ul><li>binary-only (如果不需要源码、文档，选择下载这个压缩包就够了)</li><li>complete (包含文档及源码)</li></ul><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><p>以下操作以 gradle 4.9 版本为例</p><h4 id="2-1-Linux-amp-macOS-用户"><a href="#2-1-Linux-amp-macOS-用户" class="headerlink" title="2-1. Linux &amp; macOS 用户"></a>2-1. Linux &amp; macOS 用户</h4><p>将下载的压缩包解压到任意你想要存放的位置，如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> /opt/gradle<span class="token operator">></span> <span class="token function">unzip</span> -d /opt/gradle gradle-4.9-bin.zip<span class="token operator">></span> <span class="token function">ls</span> /opt/gradle/gradle-4.9LICENSE  NOTICE  bin  getting-started.html  init.d  lib  media</code></pre><h4 id="2-2-Windows-用户"><a href="#2-2-Windows-用户" class="headerlink" title="2-2. Windows 用户"></a>2-2. Windows 用户</h4><p>将下载的压缩包解压到任意你想要存放的位置，如：</p><blockquote><p>在 c 盘新建一个 Gradle 目录</p><p>将下载回来的压缩包解压到 c:\Gradle 下</p><p>最终路径格式 c:\Gradle\gradle-4.9</p></blockquote><h3 id="3-配置系统环境变量"><a href="#3-配置系统环境变量" class="headerlink" title="3. 配置系统环境变量"></a>3. 配置系统环境变量</h3><p>为了更方便的使用 gradle 命令，我们需要将 gradle 安装目录下的 bin 文件夹路径加入到 path 环境变量</p><h4 id="3-1-Linux-amp-macOS-用户"><a href="#3-1-Linux-amp-macOS-用户" class="headerlink" title="3-1. Linux &amp; macOS 用户"></a>3-1. Linux &amp; macOS 用户</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/opt/gradle/gradle-4.9/bin</code></pre><h4 id="3-2-Windows-用户"><a href="#3-2-Windows-用户" class="headerlink" title="3-2. Windows 用户"></a>3-2. Windows 用户</h4><blockquote><p>右击 我的电脑 → 属性 → 高级系统配置 → 环境变量 → 系统变量</p><p>找到 Path 变量 → 编辑</p><p>将 C:\Gradle\gradle-4.9\bin 添加进去</p><p>保存，退出</p></blockquote><p>至此，Gradle 已经成功安装到自己的机器，并可以方便的调用 gradle 命令执行各种操作了</p><p>下面👇介绍另外一种更方便、高效的安装方法，只需执行一条命令就能完成 Gradle 的安装</p><h2 id="第二种安装方式"><a href="#第二种安装方式" class="headerlink" title="第二种安装方式"></a>第二种安装方式</h2><p>通过包管理软件快速安装 gradle</p><h3 id="1-macOS-用户"><a href="#1-macOS-用户" class="headerlink" title="1. macOS 用户"></a>1. macOS 用户</h3><h4 id="通过-Homebrew-安装"><a href="#通过-Homebrew-安装" class="headerlink" title="通过 Homebrew 安装"></a>通过 <a href="https://link.ld246.com/forward?goto=http://brew.sh/">Homebrew</a> 安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gradle</code></pre><h3 id="2-Windows-用户"><a href="#2-Windows-用户" class="headerlink" title="2. Windows 用户"></a>2. Windows 用户</h3><h4 id="2-1-通过-Scoop-安装"><a href="#2-1-通过-Scoop-安装" class="headerlink" title="2-1. 通过 Scoop 安装"></a>2-1. 通过 <a href="https://link.ld246.com/forward?goto=http://scoop.sh/">Scoop</a> 安装</h4><p>一款灵感来自 Homebrew 的 Windows 系统包管理软件</p><pre class="language-bash" data-language="bash"><code class="language-bash">scoop <span class="token function">install</span> gradle</code></pre><h4 id="2-2-通过-Chocolatey-安装"><a href="#2-2-通过-Chocolatey-安装" class="headerlink" title="2-2. 通过 Chocolatey 安装"></a>2-2. 通过 <a href="https://link.ld246.com/forward?goto=https://chocolatey.org/">Chocolatey</a> 安装</h4><p>另一款 Windows 系统包管理软件</p><pre class="language-bash" data-language="bash"><code class="language-bash">choco <span class="token function">install</span> gradle</code></pre><h3 id="3-Linux-用户"><a href="#3-Linux-用户" class="headerlink" title="3. Linux 用户"></a>3. Linux 用户</h3><h4 id="3-1-通过-SDKMAN-安装"><a href="#3-1-通过-SDKMAN-安装" class="headerlink" title="3-1. 通过 SDKMAN! 安装"></a>3-1. 通过 <a href="https://link.ld246.com/forward?goto=http://sdkman.io/">SDKMAN!</a> 安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">skd <span class="token function">install</span> gradle</code></pre><h2 id="验证-Gradle-是否安装成功"><a href="#验证-Gradle-是否安装成功" class="headerlink" title="验证 Gradle 是否安装成功"></a>验证 Gradle 是否安装成功</h2><p>打开命令行工具输入以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">gradle -v</code></pre><p>应该看到类似输出，以我在 macOS 系统为例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">------------------------------------------------------------Gradle <span class="token number">4.9</span>------------------------------------------------------------ Build time:   <span class="token number">2018</span>-07-16 08:14:03 UTCRevision:     efcf8c1cf533b03c70f394f270f46a174c738efcGroovy:       <span class="token number">2.4</span>.12Ant:          Apache Ant<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> version <span class="token number">1.9</span>.11 compiled on March <span class="token number">23</span> <span class="token number">2018</span>JVM:          <span class="token number">1.8</span>.0_152 <span class="token punctuation">(</span>Oracle Corporation <span class="token number">25.152</span>-b16<span class="token punctuation">)</span>OS:           Mac OS X <span class="token number">10.13</span>.4 x86_64</code></pre><p>详见 Gradle 官方 <a href="https://link.ld246.com/forward?goto=https://docs.gradle.org/current/userguide/installation.html">安装文档</a></p>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2022/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一直想搭建一个自己的博客网站，自己在网上找了一些框架，最终准备使用hexo搭建一个。</p><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并可通过修改主题，让你的博客丰富多彩。</p><h1 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h1><p>详细可参考 <a href="https://hexo.io/zh-cn/docs">Hexo官方文档</a></p><p><strong>目录结构</strong></p><ul><li>概述</li><li>搭建Hexo<ul><li>安装Git</li><li>安装Node.js</li><li>添加国内镜像源</li><li>安装Hexo</li><li>模板设置</li><li>Front-matter 选项详解</li><li>最全示例</li><li>配置修改</li><li>连接Github与本地</li><li>发布文章</li></ul></li><li>个性化主题<ul><li>更换主题</li><li>新建页面</li><li>配置修改</li><li>代码高亮</li><li>搜索</li><li>修改打赏的二维码图片</li><li>修改页脚</li></ul></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载 <a href="https://git-scm.com/download/win">Git</a>。</p><p>安装选项还是全部默认</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.js</a>，最新版的Node.js可前往<a href="https://nodejs.org/en/download/">Node官网</a></p><p>安装选项全部默认。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，出现版本号，那么就安装成功了。</p><h3 id="设置全局和缓存路径-选做"><a href="#设置全局和缓存路径-选做" class="headerlink" title="设置全局和缓存路径(选做)"></a>设置全局和缓存路径(选做)</h3><p>默认情况下，我们在执行<code>npm install -g XXXX</code>下载全局包时，这个包的默认存放路径位<code>C:\Users\username\AppData\Roaming\npm\node_modules下</code>，可以通过<code>CMD</code>指令<code>npm root -g</code>查看</p><pre class="language-sh" data-language="sh"><code class="language-sh">C:\Users\liaijie\AppData\Roaming\npm\node_modules</code></pre><p>但是有时候我们不想让全局包放在这里，我们可以自定义存放目录,在<code>CMD</code>窗口执行以下两条命令修改默认路径（推荐）：</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm config set prefix &quot;D:\node\node_global&quot;npm config set cache &quot;D:\node\node_cache&quot;</code></pre><p>或者打开<code>c:\node\node_modules\npm\.npmrc</code>文件，修改如下：</p><pre class="language-sh" data-language="sh"><code class="language-sh">prefix &#x3D;D:\node\node_globalcache &#x3D; D:\node\node_cache</code></pre><p>​    以上操作表示，修改全局包下载目录为<code>C:\node\node_global</code>,缓存目录为<code>C:\node\node_cache</code>,并会自动创建<code>node_global</code>目录，而<code>node_cache</code>目录是缓存目录，会在你下载全局包时自动创建。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org</code></pre><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如<code>D:\blog</code>目录下。</p><p>使用定位到该目录下，输入下面的指令安装Hexo。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>可能会有几个报错，无视它。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>   <span class="token comment"># 初始化文件夹</span>$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>  $ <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装必备的组件</span></code></pre><p>之后就可以输入<code>hexo s</code>启动服务，效果如下：</p><p><img src="01.png"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><p>Hexo常用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g  <span class="token comment"># 生成博客网页文件</span>hexo s  <span class="token comment"># 本地预览博客</span>hexo d  <span class="token comment"># 上传网页文件到github</span></code></pre><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>为新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>date<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---</code></pre><p>建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>date<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>type<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>layout<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>---</code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown  <span class="token punctuation">---</span></code></pre><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">_config.yml<span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><p>详细可参考 <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a> 。    </p><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><p>修改配置文件<code>_config.yml</code></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment"># title</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token comment"># 二级标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token comment"># 描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token comment"># 关键字</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token comment"># 作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token comment"># 你的网站地址</span></code></pre><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"myname"</span><span class="token function">git</span> config --global user.email <span class="token string">"email@qq.com"</span></code></pre><p>用户名和邮箱根据你注册<strong>github的信息</strong>自行修改。</p><p>然后生成密钥SSH key：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"email@qq.com"</span> <span class="token comment"># 会把公钥和私钥生成到~/.ssh文件夹下</span></code></pre><p>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随意。</p><p>将公钥id_rsa.pub复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="02.png"></p><p>新建一个username.github.io的项目，然后修改根目录下的<code>_config.yml</code>文件。</p><p>修改最后一行的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:username/username.github.io.git  branch: master</code></pre><p><strong>repository修改为你自己的github项目地址</strong>。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>首先在博客根目录下执行命令<code>npm i hexo-deployer-git</code> 安装一个deploy。</p><p>输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>打开<code>D:\blog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上，这时在github.io仓库就可以看到该文章了。</p><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><h1 id="个性化主题"><a href="#个性化主题" class="headerlink" title="个性化主题"></a>个性化主题</h1><p>本次个性化设置主要针对的是<code>matery</code>主题。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>详细介绍参考<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code>（看文件夹名）</p><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token number">404</span>date<span class="token operator">:</span> <span class="token number">2022</span><span class="token number">-07</span><span class="token number">-10</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>type<span class="token operator">:</span> <span class="token string">"404"</span>layout<span class="token operator">:</span> <span class="token string">"404"</span>description<span class="token operator">:</span> <span class="token string">"你来到了没有知识的荒原 :("</span>---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h4><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&lt;%- __('myCV') %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &lt;%- page.content %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h2 id="配置修改-1"><a href="#配置修改-1" class="headerlink" title="配置修改"></a>配置修改</h2><p>修改配置文件 <code>/themes/matery/_config.yml</code> 。 </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.</span><span class="token key atrule">indexbtn</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xx<span class="token comment"># 首页 banner 中的第二行个人信息配置，留空即不启用</span><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/xx  <span class="token key atrule">email</span><span class="token punctuation">:</span> xx@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">12345678</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># true、false</span><span class="token key atrule">githubLink</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xx<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token comment"># 目录</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 其他参考官方文档 </span></code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><p>如果配置不生效，执行下<code>hexo clean</code>  后再启动hexo。</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h2 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h2><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片</p><h2 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h2><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。</p><p>修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h3><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sitetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="修改不蒜子初始化计数"><a href="#修改不蒜子初始化计数" class="headerlink" title="修改不蒜子初始化计数"></a>修改不蒜子初始化计数</h3><p>在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 50ms周期检测函数</span>        <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化首次数据</span>        <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加上初始数据 </span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止检测</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后把上面几行有段代码：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %></code></pre><p>修改为：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>        人次,<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %></code></pre><p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p><h2 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h2><p>主题自带了gitalk插件，只需要去github官网配置即可。</p><p>首先打开<a href="https://github.com/settings/applications/new">github</a>申请一个应用，要填四个东西：</p><pre class="language-none"><code class="language-none">Application name &#x2F;&#x2F;应用名称，随便填Homepage URL &#x2F;&#x2F;填自己的博客地址Application description &#x2F;&#x2F;应用描述，随便填Authorization callback URL &#x2F;&#x2F;填自己的博客地址</code></pre><p>然后点击注册，会出现两个字符串<code>Client ID</code>和<code>Client Secret</code>，这个要复制出来。</p><p>然后去主题的配置文件<code>_config.yml</code>下修改<code>gitalk</code>处：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> 你的github用户名  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你的github用户名.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串  <span class="token key atrule">admin</span><span class="token punctuation">:</span> 你的github用户名</code></pre><p>以后写文章的时候，只要在文章页面登陆过github，就会自动创建评论框，<strong>记得每次写完文章后打开博客文章页面一下</strong>。</p><p>gitalk总有跨域的问题，后期看情况解决。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无</title>
      <link href="/2022/08/10/other/%E6%97%A0/"/>
      <url>/2022/08/10/other/%E6%97%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="真实"><a href="#真实" class="headerlink" title="真实"></a>真实</h2><table><thead><tr><th align="center">序号</th><th align="center">姓名</th><th align="center">身份证</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">梁丰珍</td><td align="center">22072420051012342X</td><td align="center">222303196602137449</td></tr><tr><td align="center">2</td><td align="center">刘彦雷</td><td align="center">131127199610155496</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">邵环旭</td><td align="center">210782199910041614</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">姜福杰</td><td align="center">210522197608055015</td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">付伟月</td><td align="center">232302198608212715</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">单保增</td><td align="center">130432199201010153</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">张榛</td><td align="center">210711199604214032</td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">胡金城</td><td align="center">130681198911083211</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">魏鹏</td><td align="center">220283199807133511</td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">王凤来</td><td align="center">410927199308087015</td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">陈中原</td><td align="center">411082198906014619</td><td align="center"></td></tr><tr><td align="center">12</td><td align="center">陈江涛</td><td align="center">130581199905193974</td><td align="center"></td></tr><tr><td align="center">13</td><td align="center">周少鹏</td><td align="center">433030198007110016</td><td align="center"></td></tr><tr><td align="center">14</td><td align="center">韩闯闯</td><td align="center">410522199405017250</td><td align="center"></td></tr></tbody></table><h2 id="网上数据"><a href="#网上数据" class="headerlink" title="网上数据"></a>网上数据</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
