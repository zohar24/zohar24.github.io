<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬虫与发爬虫策略</title>
      <link href="/2022/12/27/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/"/>
      <url>/2022/12/27/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h1><p>爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并将数据抓取下来，然后使用一定的规则提取有价值的数据。说白了就是使用任何技术手段，批量获取网站信息的一种方式。</p><h1 id="爬虫是正经爬虫流不流氓我不知道"><a href="#爬虫是正经爬虫流不流氓我不知道" class="headerlink" title="爬虫是正经爬虫流不流氓我不知道"></a>爬虫是正经爬虫流不流氓我不知道</h1><p>爬虫需要遵守法律，程序员不仅要学会保护好自己头发还有自己。</p><p>Robots 协议（也称爬虫协议，机器人协议）是互联网爬虫的一项公认的道德规范，全称是“网络爬虫排除标准（Robots exclusion protocol）”，这个协议用来告诉引擎，哪些页面是可以抓取的，哪些不可以，常见的查看robots协议的方法是在网址后+“/robots.txt’。也可以使用 <a href="http://www.wetools.com/robots-tester">在线监测robots协议工具</a> 查看。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>爬虫技术这里就不多说了，我们这里多聊聊策略，想了解爬虫框架这里可以参考一下 <a href="http://zohar24.github.io/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/">主流爬虫框架比对</a>。</p><h1 id="爬虫策略"><a href="#爬虫策略" class="headerlink" title="爬虫策略"></a>爬虫策略</h1><ol><li><p>深度优先遍历策略</p><p> 深度优先遍历策略是指网络爬虫会从起始页开始，一个链接一个链接跟踪下去，处理完这条线路的链接之后，在再转入下一个起始页，继续跟踪链接。</p></li><li><p>广度优先遍历策略</p><p> 广度优先策略是按照树的层次进行搜索，如果此层没有搜索完成，不会进入下一层搜索。即首先完成一个层次的搜索，其次在进行下一层次，也称之为分层处理。</p></li><li><p>部分PageRank的策略</p><p> PageRank算法的思想：对于已经下载的网页，连同待抓取URL队列的URL，形成网页集合，计算每个页面的PageRank值（PageRank算法参考：PageRank算法 - 从原理到实现），计算完之后，将待抓取队列中的URL按照网页级别的值的大小排列，并按照顺序依次抓取网址页面。</p></li><li><p>OPIC策略策略</p><p> 基本思路：在算法开始前，给所有页面一个相同的初始现金（现金）当下载了某个页面P之后，将P的现金分摊给所有从P中分析出的链接，并且将P的现金清空。对于待抓取URL队列中的所有页面按照现金数进行排序。<br>与PageRank的的的的区别在于：PageRank的的的每次需要迭代计算，而OPIC策略不需要迭代过程所以计算速度远远快与PageRank的的的，适合实时计算使用。</p></li><li><p>大站优先策略</p><p> 以网站为单位来选题网页重要性，对于待爬取URL队列中的网页，根据所属网站归类，如果哪个网站等待下载的页面最多，则优先下载这些链接，其本质思想倾向于优先下载大型网站。因为大型网站往往包含更多的页面。鉴于大型网站往往是著名企业的内容，其网页质量一般较高，所以这个思路虽然简单，但是有一定依据。实验表明这个算法效果也要略优先于宽度优先遍历策略。</p></li></ol><h1 id="反爬虫策略"><a href="#反爬虫策略" class="headerlink" title="反爬虫策略"></a>反爬虫策略</h1><ol><li><p>基于IP反爬虫(IP限制频次)</p><p> 日志进行分析时有时会发现同一时间段内某一个或某几个IP访问量特别大，由于爬虫是通过程序来自动化爬取页面信息的，因此其单位时间的请求量较大，且相邻请求时间间隔较为固定，这时就基本可以判断此类行为系爬虫所为，此时即可在服务器上对异常IP进行封锁。</p></li><li><p>通过Header反爬虫(User-Agent + Referer检测)</p><p> User-Agent是请求头域之一，服务器从User-Agent对应的值中是被客户端的使用信息。<br> User-Agent的角色就是客户端的身份标识。很多的爬虫请求头就是默认的一些很明显的爬虫头python-requests/2.18.4，诸如此类，当发现携带有这类headers的数据包，直接拒绝访问，返回403错误。<br> 除了User-Agent之外，可利用的头域还有Host和Referer。这种验证请求头信息中特定头域的方式既可以有效地屏蔽长期无人维护的爬虫程序，也可以将一些爬虫初学者发出的网络请求拒之门外。</p></li><li><p>基于用户行为反爬虫</p><p> 日志进行分析时用户在长时间内循环某一个操作，且相邻请求时间间隔较为固定，这时就基本可以判断此类行为系爬虫所为。此时即可在服务器上对异常IP和用户进行封锁。</p></li><li><p>iframe嵌入</p><p> 核心数据展示在iframe标签内，能够动态扩展页面，重要的是可根据逻辑动态改变页面内容。</p></li><li><p>Cookie限制(登录限制)</p><p> Cookie限制指的是服务器通过校验请求头中的Cookie值来区分正常用户和爬虫程序的手段，服务器对每一个访问网页的人都会给其一个Cookie，有的扫描爬虫单纯为了爬取链接，并不会对Cookie进行处理和响应。<br> 当某个Cookie访问超过某一个阀值时，就对其进行封禁，过一段时间再放出来。也可以把Cookie和JavaScript结合起来实现反爬虫从而提高爬虫难度，这种手段被广泛应用在Web应用中。</p></li><li><p>验证码限制</p><p> 当某一用户访问次数过多后，就自动让请求跳转到一个验证码页面，只有在输入正确的验证码或指定操作之后才能继续访问网站。此限制使用最为广泛。</p></li><li><p>js加密(通过js加密请求参数、解密加密的数据来反爬)</p><p> 由 JavaScript 改变 HTML DOM 导致页面内容发生变化的现象称为动态渲染。<br> 由于编程语言没有像浏览器一样内置JavaScript解释器和渲染引擎，所以动态渲染是天然的反爬虫手段。<br> 网页开发者将重要信息放在网页中但不写入html标签中，而浏览器会自动渲染<code>&lt;script&gt;</code>标签中的js代码将信息展现在浏览器当中，而爬虫是不具备执行js代码的能力，所以无法将js事件产生的信息读取出来。</p></li><li><p>CSS偏移反爬虫(CSS偏移反爬虫指的是利用CSS样式将乱序的文字排版为人类正常阅读的顺序)。</p><p> 这种方法是利用 CSS 样式将乱序的文字排版为人类正常阅读顺序的行为。<br> 如果不细心观察，爬虫工程师很容易被爬取结果糊弄。这种混淆方法和图片伪装一样，并不会影响用户阅读。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反爬虫系统最终总是能破解，只是时间问题。这句话是什么意思呢？其实这句话你可以这么理解：反爬虫系统，对于爬虫来说，相当于一个单机游戏。单机游戏，总有通关的一天。也许是明天，也许是后天，也许是下个月、半年？但是总是过得去的。甚至你可以上上下下左右左右BABA嘛。那么什么游戏不能通关呢？没错，网络游戏不能通关，它可以无休止地升级下去。<br>你装备刚毕业，他改版了。就这样，一直下去，等于没有破解。就像一些模拟战争游戏抢要塞一样，刚抢完没多久，过期了，又要重抢。这就等于没怎么抢到手。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主流爬虫框架对比</title>
      <link href="/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
      <url>/2022/12/17/%E7%88%AC%E8%99%AB/%E4%B8%BB%E6%B5%81%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p><strong>目前的主流爬虫框架包括:</strong></p><table><thead><tr><th><strong>JAVA</strong></th><th><strong>Python</strong></th><th><strong>PHP</strong></th><th><strong>C#</strong></th><th><strong>C/C++</strong></th></tr></thead><tbody><tr><td>apache Nutch2</td><td>scraty</td><td>phpspider</td><td>DotnetSpider</td><td>open-source-search-engine</td></tr><tr><td>webmagic</td><td>Crawlery</td><td>Beanbun</td><td>NwebCrawler</td><td>Cobweb</td></tr><tr><td>Heritriix</td><td>Portia</td><td>PHPCrawl</td><td>SmartSpider</td><td>upton</td></tr><tr><td>webCollector</td><td>PySpider</td><td>php seienium</td><td>Abot</td><td>wombat</td></tr><tr><td>crawler4j</td><td>grab</td><td></td><td>xNet</td><td>Spidr</td></tr><tr><td>Spiderman</td><td>cola</td><td></td><td>AngleSharp</td><td>Larbin</td></tr><tr><td>SeimiCrawler</td><td>python seienium</td><td></td><td>HtmlAgilityPack</td><td></td></tr><tr><td>jsoup</td><td></td><td></td><td>CSQuery</td><td></td></tr><tr><td>java seienium</td><td></td><td></td><td></td><td></td></tr><tr><td>htmlmunit</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="一-Python"><a href="#一-Python" class="headerlink" title="一. Python"></a><strong>一. Python</strong></h1><h2 id="1-Scrapy"><a href="#1-Scrapy" class="headerlink" title="1. Scrapy"></a><strong>1. Scrapy</strong></h2><p>Python开发的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。<em><strong>但对于稍微复杂一点的页面，如 weibo 的页面信息，这个框架就满足不了需求了。</strong></em></p><p>Scrapy使用了Twisted（其主要对手是Tornado）异步网络框架来处理网络通讯，该网络框架可以加快我们的下载速度，并且包含了各种中间件接口，可以灵活的完成各种需求。</p><p><strong>优点:</strong></p><p>1）scrapy 是异步的，可以灵活调节并发量</p><p>2）采取可读性更强的 xpath 代替正则，速度快</p><p>3）写 middleware,方便写一些统一的过滤器</p><p>4）同时在不同的 url 上爬行</p><p>5）支持 shell 方式，方便独立调试</p><p>6）通过管道的方式存入数据库，灵活，可保存为多种形式</p><p><strong>缺点：</strong></p><p>1）无法用它完成分布式爬取</p><p>2）自身去重效果差，消耗内存，且不能持久化</p><p>3）对于需要执行js才能获取数据的网页，爱莫能助</p><p>4）兼容了下载图片与视频，但是可用性比较差</p><p>5）自身扩展的log模块，不好用，经常需要自定义</p><p>6）基于 twisted 框架，运行中的 exception 是不会干掉 reactor（反应器），并且异步框架出错后 是不会停掉其他任务的，数据出错后难以察觉，预警系统简单的使用邮件，很不友好</p><p><strong>scrapy的扩展件：</strong></p><p>scrapy_redis解决分布式爬取;</p><p>scrapy_redis通过redis实现调度器的队列和指纹集合，完成分布式和去重。</p><p>scrapy_redis_bloomfilter，基于Redis的Bloomfilter去重，并将其扩展到Scrapy框架，实现持久化去重，上亿或十亿级别的去重功能。</p><p>scrapy-splash ,整合了javascript，可以在scrapy当中执行js，获取数据，解析。</p><h2 id="2-Crawley"><a href="#2-Crawley" class="headerlink" title="2. Crawley"></a><strong>2. Crawley</strong></h2><p>Crawley可以高速爬取对应网站的内容，支持关系和非关系数据库，数据可以导出为JSON、XML等。</p><p>crawley也是使用python开发出来的一款爬虫框架，该框架致力于改变人们从互联网中提取数据的方式，让大家可以更高效地从互联网中爬取对应内容。</p><p>crawley框架的主要特点有：</p><p>1）高速爬取对应网站内容</p><p>2）可以将爬取到内容轻松地存储到数据库中，比如：postgres，mysql，oracle，sqlite等数据库</p><p>3）可以将爬取到的数据导出为json，xml等格式</p><p>4）支持非关系型数据库，比如：mongodb，couchdb等</p><p>5）支持使用<a href="https://so.csdn.net/so/search?q=%E5%91%BD%E4%BB%A4%E8%A1%8C&spm=1001.2101.3001.7020">命令行</a>工具</p><p>6）可以使用你喜欢的工具提取数据，比如使用xpath或者pyquery等工具</p><p>7）支持使用cookie登陆并访问哪些只有登陆才能够访问的网页</p><p>项目地址：<a href="http://project.crawley-cloud.com/">http://project.crawley-cloud.com/</a></p><h2 id="3-Portia"><a href="#3-Portia" class="headerlink" title="3. Portia"></a><strong>3. Portia</strong></h2><p>可视化爬取网站内容.</p><p>Portia是一个开源可视化爬虫工具，可让您在不需要任何编程知识的情况下爬取网站！简单地注释您感兴趣的页面，Portia将创建一个蜘蛛来从类似的页面提取数据。</p><p>portia框架是一款允许没有任何编程基础的用户可视化地爬取网页的爬虫框架，给出你要爬取的网页中感兴趣的数据内容，通过portia框架，可以将你所需要的信息从相似的网页中自动提取出来。</p><p>项目地址：<a href="https://github.com/scrapinghub/portia">https://github.com/scrapinghub/portia</a></p><h2 id="4-Newpaper"><a href="#4-Newpaper" class="headerlink" title="4. Newpaper"></a><strong>4. Newpaper</strong></h2><p>提取文章,新闻以及内容分析。</p><p>Newspaper可以用来提取新闻、文章和内容分析。使用多线程，支持10多种语言等。</p><p>newspaper框架是一种用来提取新闻、文章以及内容分析的python爬虫框架。更准确地说，newspaper是一个python的库，只不过这个库是由第三方开发的，可以归为一种框架。</p><p>newspaper框架在的主要特点：</p><p>1）比较简单</p><p>2）速度比较快</p><p>3）支持多线程</p><p>4）支持十多种语言</p><p>由此我们可以知道newspaper框架是轻量级框架，并且就爬取文章信息这一功能来说，使用起来很方便</p><p>项目地址：<a href="https://github.com/codelucas/newspaper">https://github.com/codelucas/newspaper</a></p><h2 id="5-Python-goose"><a href="#5-Python-goose" class="headerlink" title="5. Python-goose"></a><strong>5. Python-goose</strong></h2><p>Java写的文章提取工具。Python-goose框架可提取的信息包括：文章主体内容、文章主要图片、文章中嵌入的任何Youtube/Vimeo视频、元描述、元标签。</p><h2 id="6-pyspider"><a href="#6-pyspider" class="headerlink" title="6. pyspider"></a><strong>6. pyspider</strong></h2><p>pyspider 是一个用python实现的功能强大的网络爬虫系统，能在浏览器界面上进行脚本的编写，功能的调度和爬取结果的实时查看，后端使用常用的数据库进行爬取结果的存储，还能定时设置任务与任务优先级等。</p><p>主要特性如下：</p><p>1）强大的WebUI，包含：脚本编辑器、任务监控器，项目管理器和结果查看器；</p><p>2）多数据库支持，包括：MySQL, MongoDB, Redis, SQLite, Elasticsearch; PostgreSQL with SQLAlchemy等；</p><p>3）使用RabbitMQ, Beanstalk, Redis 和Kombu作为消息队列；</p><p>4）支持任务优先级设定、定时任务、失败后重试等；</p><p>5）支持分布式爬虫</p><p>6）完全可视化，对用户非常友好：WEB 界面编写调试脚本，起停脚本，监控执行状态，查看活动历史，获取结果产出。</p><p><strong>缺点：</strong></p><p>1）URL去重使用数据库而不是布隆过滤器，亿级存储的db io将导致效率急剧降低。</p><p>2）使用上的人性化牺牲了灵活度，定制化能力降低。</p><p>项目地址：<a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a></p><h2 id="7-grab"><a href="#7-grab" class="headerlink" title="7. grab"></a><strong>7. grab</strong></h2><p>Grab是一个用于构建Web刮板的Python框架。借助Grab，您可以构建各种复杂的网页抓取工具，从简单的5行脚本到处理数百万个网页的复杂异步网站抓取工具。Grab提供一个API用于执行网络请求和处理接收到的内容，例如与HTML文档的DOM树进行交互。</p><p>项目地址：<a href="http://docs.grablib.org/en/latest/#grab-spider-user-manual">http://docs.grablib.org/en/latest/#grab-spider-user-manual</a></p><h2 id="8-selenium"><a href="#8-selenium" class="headerlink" title="8.selenium"></a><strong>8.selenium</strong></h2><p>这是一个调用浏览器的 driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码</p><h2 id="9-Cola"><a href="#9-Cola" class="headerlink" title="9.Cola"></a><strong>9.Cola</strong></h2><p>Cola是一个分布式的爬虫框架，对于用户来说，只需编写几个特定的函数，而无需关注分布式运行的细节。任务会自动分配到多台机器上，整个过程对用户是透明的。</p><p>项目地址：<a href="https://github.com/chineking/cola">https://github.com/chineking/cola</a></p><h1 id="二-Java"><a href="#二-Java" class="headerlink" title="二. Java"></a><strong>二. Java</strong></h1><p> 常见的Java爬虫框架主要由有: Nutch、WebMagic、WebCollector、spider-flow、SeimiCrawler、heritrix3</p><h2 id="1-Nutch"><a href="#1-Nutch" class="headerlink" title="1.Nutch"></a><strong>1.Nutch</strong></h2><p>  Nutch是为搜索引擎设计的爬虫，大多数用户是需要一个做精准数据爬取（精抽取）的爬虫,Nutch运行的一套流程里，有三分之二是为了搜索引擎而设计的.</p><p>Nutch这个框架运行需要Hadoop，Hadoop需要开集群</p><p><a href="http://www.apache.org/index.html#projects-list">Apache顶级项目列表</a></p><p><a href="http://nutch.apache.org/">Nutch官网</a></p><p><a href="https://wiki.apache.org/nutch/#Tutorials">Nutch官方教程</a></p><p>1.Nutch支持分布式抓取，并有Hadoop支持，可以进行多机分布抓取，存储和索引。另外很吸引人的一点在于，它提供了一种插件框架，使得其对各种网页内容的解析、各种数据的采集、查询、集群、过滤等功能能够方便的进行扩展，正是由于有此框架，使得 Nutch 的插件开发非常容易，第三方的插件也层出不穷，极大的增强了 Nutch 的功能和声誉。</p><p>缺点</p><p>1.Nutch的爬虫定制能力比较弱</p><h2 id="2-WebMagic"><a href="#2-WebMagic" class="headerlink" title="2.WebMagic"></a><strong>2.WebMagic</strong></h2><p>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。 </p><p><strong>优点：</strong> </p><p> 1）简单的API，可快速上手 </p><p> 2）模块化的结构，可轻松扩展 </p><p> 3）提供多线程和分布式支持</p><p><strong>缺点:</strong></p><p> 1）不支持JS页面抓取</p><p>文档地址:<strong><a href="http://webmagic.io/docs/zh/">http://webmagic.io/docs/zh/</a></strong></p><h2 id="3-Crawler4j"><a href="#3-Crawler4j" class="headerlink" title="3. Crawler4j"></a><strong>3. Crawler4j</strong></h2><p><strong>优点</strong></p><p>1）多线程采集</p><p>2）内置了Url 过滤机制，采用的是BerkeleyDB 进行url的过滤。</p><p>3）可扩展为支持结构化提取网页字段，可作为垂直采集用</p><p><strong>缺点</strong></p><p>1）不支持动态网页抓取，例如网页的ajax部分</p><p>2）不支持分布式采集，可以考虑将其作为分布式爬虫的一部分，客户端采集部分</p><p>为了更加直观这7种爬虫框架,小编做了一个框架优缺点对比图,如下:</p><h2 id="4-Heritrix"><a href="#4-Heritrix" class="headerlink" title="4.Heritrix"></a><strong>4.Heritrix</strong></h2><p>Heritrix 是一个由 java 开发的、开源的网络爬虫，用户可以使用它来从网上抓取想要的资源</p><p><strong>优点</strong></p><p>1）Heritrix的爬虫定制参数多</p><p><strong>缺点</strong></p><p>1）单实例的爬虫，之间不能进行合作。</p><p>2）在有限的机器资源的情况下，却要复杂的操作。</p><p>3）只有官方支持，仅仅在Linux上进行了测试。</p><p>4）每个爬虫是单独进行工作的，没有对更新进行修订。</p><p>5）在硬件和系统失败时，恢复能力很差。</p><p>6）很少的时间用来优化性能。</p><p>7）相对于Nutch，Heritrix仅仅只是一个爬虫工具，没有提供搜索引擎。如果要对抓取的站点排序必须要实现类似于Pagerank的复杂算法。</p><p><img src="%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94.jpg" alt="爬虫工具对比"></p><h1 id="三-、爬虫系统开源项目"><a href="#三-、爬虫系统开源项目" class="headerlink" title="三 、爬虫系统开源项目:"></a><strong>三 、爬虫系统开源项目:</strong></h1><h2 id="1-Spider-flow"><a href="#1-Spider-flow" class="headerlink" title="1.Spider-flow"></a><strong>1.Spider-flow</strong></h2><p> spider-flows是一个爬虫平台,以图形化方式定义爬虫流程,无序代码即可实现一个爬虫(<a href="https://gitee.com/ssssssss-team/spider-flow">https://gitee.com/ssssssss-team/spider-flow</a>)<br><img src="spider-flow%E5%88%97%E8%A1%A8.png" alt="spider-flow列表.png"><br><img src="spider-flow%E7%BC%96%E8%BE%91.png" alt="spider-flow编辑.png"></p><h2 id="2-webmagic"><a href="#2-webmagic" class="headerlink" title="2.webmagic"></a><strong>2.webmagic</strong></h2><p><strong>webmagic 是一个无需配置  便于二次开发的爬虫框架, 他提供简单灵活的API ,只需要少量代码即可(</strong><a href="https://gitee.com/flashsword20/webmagic"><strong>https://gitee.com/flashsword20/webmagic</strong></a><strong>)</strong></p><p>文档链接地址:</p><p><a href="http://webmagic.io/docs/zh/">http://webmagic.io/docs/zh/</a></p><h2 id="3-ECommerceCrawlers"><a href="#3-ECommerceCrawlers" class="headerlink" title="3.ECommerceCrawlers"></a><strong>3.ECommerceCrawlers</strong></h2><p><strong>ECommerceCrawlers**<strong>实战多种网站、电商数据爬虫。包含：淘宝商品、微信公众号、大众点评、招聘网站、闲鱼、阿里任务、scrapy博客园、微博、百度贴吧、豆瓣电影、包图网、全景网、豆瓣音乐、某省药监局、搜狐新</strong></strong>(<strong><a href="https://gitee.com/AJay13/ECommerceCrawlers"><strong>https://gitee.com/AJay13/ECommerceCrawlers</strong></a></strong>)**</p><h2 id="4-Cecco"><a href="#4-Cecco" class="headerlink" title="4.Cecco"></a><strong>4.Cecco</strong></h2><p><strong>Cecco 是一款用java语言开发的轻量化的易用的网络爬虫, 整合了jsoup,httpClient,fastjson,spring,htmlunit,redission 等优秀框架</strong></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据取值</title>
      <link href="/2022/11/14/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8F%96%E5%80%BC/"/>
      <url>/2022/11/14/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8F%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="一、如何从大量的-URL-中找出相同的-URL？"><a href="#一、如何从大量的-URL-中找出相同的-URL？" class="headerlink" title="一、如何从大量的 URL 中找出相同的 URL？"></a>一、如何从大量的 URL 中找出相同的 URL？</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>给定 a、b 两个文件，各存放 50 亿个 URL，每个 URL 各占 64B，内存限制是 4G。请找出 a、b 两个文件共同的 URL。</p><h2 id="2-解答思路"><a href="#2-解答思路" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><h3 id="1-分治策略"><a href="#1-分治策略" class="headerlink" title="1. 分治策略"></a>1. 分治策略</h3><p>每个 URL 占 64B，那么 50 亿个 URL 占用的空间大小约为 320GB。</p><pre class="language-none"><code class="language-none">5, 000, 000, 000 _ 64B ≈ 5GB _ 64 &#x3D; 320GB</code></pre><p>由于内存大小只有 4G，因此，我们不可能一次性把所有 URL 加载到内存中处理。对于这种类型的题目，一般采用分治策略，即：把一个文件中的 URL 按照某个特征划分为多个小文件，使得每个小文件大小不超过 4G，这样就可以把这个小文件读到内存中进行处理了。</p><p><strong>思路如下：</strong></p><p>首先遍历文件 a，对遍历到的 URL 求 hash(URL) % 1000 ，根据计算结果把遍历到的 URL 存储到 a0, a1, a2, …, a999，这样每个大小约为 300MB。使用同样的方法遍历文件 b，把文件 b 中的 URL 分别存储到文件 b0, b1, b2, …, b999 中。这样处理过后，所有可能相同的 URL 都在对应的小文件中，即 a0 对应 b0, …, a999 对应 b999，不对应的小文件不可能有相同的 URL。那么接下来，我们只需要求出这 1000 对小文件中相同的 URL 就好了。</p><p>接着遍历 ai( i∈[0,999] )，把 URL 存储到一个 HashSet 集合中。然后遍历 bi 中每个 URL，看在 HashSet 集合中是否存在，若存在，说明这就是共同的 URL，可以把这个 URL 保存到一个单独的文件中。</p><h3 id="2-前缀树"><a href="#2-前缀树" class="headerlink" title="2. 前缀树"></a>2. 前缀树</h3><p>一般而言，URL 的长度差距不会不大，而且前面几个字符，绝大部分相同。这种情况下，非常适合使用字典树（trie tree） 这种数据结构来进行存储，降低存储成本的同时，提高查询效率。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul><li><p>分治策略：分而治之，进行哈希取余；对每个子文件进行 HashSet 统计。</p></li><li><p>前缀树：利用字符串的公共前缀来降低存储成本，提高查询效率。</p></li></ul><h1 id="二、如何从大量数据中找出高频词？"><a href="#二、如何从大量数据中找出高频词？" class="headerlink" title="二、如何从大量数据中找出高频词？"></a>二、如何从大量数据中找出高频词？</h1><h2 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，要求返回频数最高的 100 个词(Top 100)。</p><h2 id="2-解答思路-1"><a href="#2-解答思路-1" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>由于内存限制，我们依然无法直接将大文件的所有词一次读到内存中。</p><p>因此，同样可以采用分治策略，把一个大文件分解成多个小文件，保证每个文件的大小小于 1MB，进而直接将单个小文件读取到内存中进行处理。</p><h2 id="3-思路如下："><a href="#3-思路如下：" class="headerlink" title="3. 思路如下："></a>3. 思路如下：</h2><p>首先遍历大文件，对遍历到的每个词 x，执行 hash(x) % 5000 ，将结果为 i 的词存放到文件 ai 中。遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。如果有的小文件大小仍然超过 1MB，则采用同样的方式继续进行分解。</p><p>接着统计每个小文件中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现。其中 key 为词，value 为该词出现的频率。具体方法是：对于遍历到的词 x，如果在 map 中不存在，则执行 map.put(x, 1) ；若存在，则执行 map.put(x, map.get(x)+1) ，将该词频数加 1。</p><p>上面我们统计了每个小文件单词出现的频数。接下来，我们可以通过维护一个小顶堆来找出所有词中出现频数最高的 100 个。具体方法是：依次遍历每个小文件，构建一个小顶堆，堆大小为 100。如果遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词，然后重新调整为小顶堆，遍历结束后，小顶堆上的词就是出现频数最高的 100 个词。</p><h2 id="4-方法总结"><a href="#4-方法总结" class="headerlink" title="4. 方法总结"></a>4. 方法总结</h2><ul><li><p>分而治之，进行哈希取余；</p></li><li><p>使用 HashMap 统计频数；</p></li><li><p>求解最大的 TopN 个，用小顶堆；求解最小的 TopN 个，用大顶堆。</p></li></ul><h1 id="三、如何找出某一天访问百度网站最多的-IP？"><a href="#三、如何找出某一天访问百度网站最多的-IP？" class="headerlink" title="三、如何找出某一天访问百度网站最多的 IP？"></a>三、如何找出某一天访问百度网站最多的 IP？</h1><h2 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>现有海量日志数据保存在一个超大文件中，该文件无法直接读入内存，要求从中提取某天访问百度次数最多的那个 IP。</p><h2 id="2-解答思路-2"><a href="#2-解答思路-2" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>这道题只关心某一天访问百度最多的 IP，因此，可以首先对文件进行一次遍历，把这一天访问百度 IP 的相关信息记录到一个单独的大文件中。接下来采用的方法与上一题一样，大致就是先对 IP 进行哈希映射，接着使用 HashMap 统计重复 IP 的次数，最后计算出重复次数最多的 IP。</p><p>注：这里只需要找出出现次数最多的 IP，可以不必使用堆，直接用一个变量 max 即可。</p><h2 id="3-方法总结"><a href="#3-方法总结" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><ul><li><p>分而治之，进行哈希取余；</p></li><li><p>使用 HashMap 统计频数；</p></li><li><p>求解最大的 TopN 个，用小顶堆；求解最小的 TopN 个，用大顶堆。</p></li></ul><h1 id="四、-如何在大量的数据中找出不重复的整数？"><a href="#四、-如何在大量的数据中找出不重复的整数？" class="headerlink" title="四、 如何在大量的数据中找出不重复的整数？"></a>四、 如何在大量的数据中找出不重复的整数？</h1><h2 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>在 2.5 亿个整数中找出不重复的整数。注意：内存不足以容纳这 2.5 亿个整数。</p><h2 id="2-解答思路-3"><a href="#2-解答思路-3" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><h3 id="方法一：分治法"><a href="#方法一：分治法" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>与前面的题目方法类似，先将 2.5 亿个数划分到多个小文件，用 HashSet/HashMap 找出每个小文件中不重复的整数，再合并每个子结果，即为最终结果。</p><h3 id="方法二：位图法"><a href="#方法二：位图法" class="headerlink" title="方法二：位图法"></a>方法二：位图法</h3><p>位图，就是用一个或多个 bit 来标记某个元素对应的值，而键就是该元素。采用位作为单位来存储数据，可以大大节省存储空间。</p><p>位图通过使用位数组来表示某些元素是否存在。它可以用于快速查找，判重，排序等。不是很清楚？我先举个小例子。</p><p>假设我们要对 [0,7] 中的 5 个元素 (6, 4, 2, 1, 5) 进行排序，可以采用位图法。</p><p>0~7 范围总共有 8 个数，只需要 8bit，即 1 个字节。首先将每个位都置 0：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 0 0 0 0 0 0 0</code></pre><p>然后遍历 5 个元素，首先遇到 6，那么将下标为 6 的位的 0 置为 1；接着遇到 4，把下标为 4 的位 的 0 置为 1：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 0 0 0 1 0 1 0</code></pre><p>依次遍历，结束后，位数组是这样的：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">0 1 1 0 1 1 1 0</code></pre><p>每个为 1 的位，它的下标都表示了一个数：</p><p> [plaintext]</p><pre class="language-none"><code class="language-none">for i in range(8):    if bits[i] &#x3D;&#x3D; 1:        print(i)</code></pre><p>这样我们其实就已经实现了排序。</p><p>对于整数相关的算法的求解，位图法是一种非常实用的算法。假设 int 整数占用 4B，即 32bit，那么我们可以表示的整数的个数为 232。</p><p>那么对于这道题，我们用 2 个 bit 来表示各个数字的状态：</p><p>00 表示这个数字没出现过； 01 表示这个数字出现过一次（即为题目所找的不重复整数）； 10 表示这个数字出现了多次。 那么这 232 个整数，总共所需内存为 232*2b=1GB。因此，当可用内存超过 1GB 时，可以采用位图法。假设内存满足位图法需求，进行下面的操作：</p><p>遍历 2.5 亿个整数，查看位图中对应的位，如果是 00，则变为 01，如果是 01 则变为 10，如果是 10 则保持不变。遍历结束后，查看位图，把对应位是 01 的整数输出即可。</p><p>当然，本题中特别说明：内存不足以容纳这 2.5 亿个整数，2.5 亿个整数的内存大小为：2.5e8/1024/1024/1024 * 4=3.72GB， 如果内存大于 1GB，是可以通过位图法解决的。</p><h2 id="3-方法总结-1"><a href="#3-方法总结-1" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>判断数字是否重复的问题，位图法是一种非常高效的方法，当然前提是：内存要满足位图法所需要的存储空间。</p><h1 id="五、如何在大量的数据中判断一个数是否存在？"><a href="#五、如何在大量的数据中判断一个数是否存在？" class="headerlink" title="五、如何在大量的数据中判断一个数是否存在？"></a>五、如何在大量的数据中判断一个数是否存在？</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 40 亿个不重复的没排过序的 unsigned int 型整数，然后再给定一个数，如何快速判断这个数是否在这 40 亿个整数当中？</p><h2 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h2><h3 id="方法一：分治法-1"><a href="#方法一：分治法-1" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>依然可以用分治法解决，方法与前面类似，就不再次赘述了。</p><h3 id="方法二：位图法-1"><a href="#方法二：位图法-1" class="headerlink" title="方法二：位图法"></a>方法二：位图法</h3><p>由于 unsigned int 数字的范围是 [0, 1 &lt;&lt; 32)，我们用 1 &lt;&lt; 32=4,294,967,296 个 bit 来表示每个数字。初始位均为 0，那么总共需要内存：4,294,967,296b≈512M。</p><p>我们读取这 40 亿个整数，将对应的 bit 设置为 1。接着读取要查询的数，查看相应位是否为 1，如果为 1 表示存在，如果为 0 表示不存在。</p><h2 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h2><p>判断数字是否存在、判断数字是否重复的问题，位图法是一种非常高效的方法。</p><h1 id="六、如何查询最热门的查询串？"><a href="#六、如何查询最热门的查询串？" class="headerlink" title="六、如何查询最热门的查询串？"></a>六、如何查询最热门的查询串？</h1><h2 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>搜索引擎会通过日志文件把用户每次检索使用的所有查询串都记录下来，每个查询串的长度不超过 255 字节。</p><p>假设目前有 1000w 个记录（这些查询串的重复度比较高，虽然总数是 1000w，但如果除去重复后，则不超过 300w 个）。请统计最热门的 10 个查询串，要求使用的内存不能超过 1G。（一个查询串的重复度越高，说明查询它的用户越多，也就越热门。）</p><h2 id="2-解答思路-4"><a href="#2-解答思路-4" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>每个查询串最长为 255B，1000w 个串需要占用 约 2.55G 内存，因此，我们无法将所有字符串全部读入到内存中处理。</p><h3 id="方法一：分治法-2"><a href="#方法一：分治法-2" class="headerlink" title="方法一：分治法"></a>方法一：分治法</h3><p>分治法依然是一个非常实用的方法。</p><p>划分为多个小文件，保证单个小文件中的字符串能被直接加载到内存中处理，然后求出每个文件中出现次数最多的 10 个字符串；最后通过一个小顶堆统计出所有文件中出现最多的 10 个字符串。</p><p>方法可行，但不是最好，下面介绍其他方法。</p><h3 id="方法二：HashMap-法"><a href="#方法二：HashMap-法" class="headerlink" title="方法二：HashMap 法"></a>方法二：HashMap 法</h3><p>虽然字符串总数比较多，但去重后不超过 300w，因此，可以考虑把所有字符串及出现次数保存在一个 HashMap 中，所占用的空间为 300w*(255+4)≈777M（其中，4 表示整数占用的 4 个字节）。由此可见，1G 的内存空间完全够用。</p><p>思路如下：</p><p>首先，遍历字符串，若不在 map 中，直接存入 map，value 记为 1；若在 map 中，则把对应的 value 加 1，这一步时间复杂度 O(N) 。</p><p>接着遍历 map，构建一个 10 个元素的小顶堆，若遍历到的字符串的出现次数大于堆顶字符串的出现次数，则进行替换，并将堆调整为小顶堆。</p><p>遍历结束后，堆中 10 个字符串就是出现次数最多的字符串。这一步时间复杂度 O(Nlog10) 。</p><h3 id="方法三：前缀树法"><a href="#方法三：前缀树法" class="headerlink" title="方法三：前缀树法"></a>方法三：前缀树法</h3><p>方法二使用了 HashMap 来统计次数，当这些字符串有大量相同前缀时，可以考虑使用前缀树来统计字符串出现的次数，树的结点保存字符串出现次数，0 表示没有出现。</p><p>思路如下：</p><p>在遍历字符串时，在前缀树中查找，如果找到，则把结点中保存的字符串次数加 1，否则为这个字符串构建新结点，构建完成后把叶子结点中字符串的出现次数置为 1。</p><p>最后依然使用小顶堆来对字符串的出现次数进行排序。</p><h2 id="3-方法总结-2"><a href="#3-方法总结-2" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>前缀树经常被用来统计字符串的出现次数。它的另外一个大的用途是字符串查找，判断是否有重复的字符串等。</p><h1 id="七、如何统计不同电话号码的个数？"><a href="#七、如何统计不同电话号码的个数？" class="headerlink" title="七、如何统计不同电话号码的个数？"></a>七、如何统计不同电话号码的个数？</h1><h2 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>已知某个文件内包含一些电话号码，每个号码为 8 位数字，统计不同号码的个数。</p><h2 id="2-解答思路-5"><a href="#2-解答思路-5" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>这道题本质还是求解数据重复的问题，对于这类问题，一般首先考虑位图法。</p><p>对于本题，8 位电话号码可以表示的号码个数为 108 个，即 1 亿个。我们每个号码用一个 bit 来表示，则总共需要 1 亿个 bit，内存占用约 12M。</p><p><strong>思路如下：</strong></p><p>申请一个位图数组，长度为 1 亿，初始化为 0。然后遍历所有电话号码，把号码对应的位图中的位置置为 1。遍历完成后，如果 bit 为 1，则表示这个电话号码在文件中存在，否则不存在。bit 值为 1 的数量即为 不同电话号码的个数。</p><h2 id="方法总结-1"><a href="#方法总结-1" class="headerlink" title="方法总结"></a>方法总结</h2><p>求解数据重复问题，记得考虑位图法。</p><h1 id="八、如何从-5-亿个数中找出中位数？"><a href="#八、如何从-5-亿个数中找出中位数？" class="headerlink" title="八、如何从 5 亿个数中找出中位数？"></a>八、如何从 5 亿个数中找出中位数？</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>从 5 亿个数中找出中位数。数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 (N+1)/2 个数；当样本数为偶数时，中位数为 第 N/2 个数与第 1+N/2 个数的均值。</p><h2 id="解答思路-1"><a href="#解答思路-1" class="headerlink" title="解答思路"></a>解答思路</h2><p>如果这道题没有内存大小限制，则可以把所有数读到内存中排序后找出中位数。但是最好的排序算法的时间复杂度都为 O(NlogN) 。这里使用其他方法。</p><h3 id="方法一：双堆法"><a href="#方法一：双堆法" class="headerlink" title="方法一：双堆法"></a>方法一：双堆法</h3><p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中最大的数小于等于小顶堆中最小的数；保证这两个堆中的元素个数的差不超过 1。</p><p>若数据总数为偶数，当这两个堆建好之后，中位数就是这两个堆顶元素的平均值。当数据总数为奇数时，根据两个堆的大小，中位数一定在数据多的堆的堆顶。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxHeap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minHeap<span class="token punctuation">;</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token class-name">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size1 <span class="token operator">-</span> size2 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size2 <span class="token operator">-</span> size1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> size1 <span class="token operator">==</span> size2            <span class="token operator">?</span> <span class="token punctuation">(</span>maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>size1 <span class="token operator">></span> size2 <span class="token operator">?</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上这种方法，需要把所有数据都加载到内存中。当数据量很大时，就不能这样了，因此，这种方法适用于数据量较小的情况。5 亿个数，每个数字占用 4B，总共需要 2G 内存。如果可用内存不足 2G，就不能使用这种方法了，下面介绍另一种方法。</p><h3 id="方法二：分治法"><a href="#方法二：分治法" class="headerlink" title="方法二：分治法"></a>方法二：分治法</h3><p>分治法的思想是把一个大的问题逐渐转换为规模较小的问题来求解。</p><p>对于这道题，顺序读取这 5 亿个数字，对于读取到的数字 num，如果它对应的二进制中最高位为 1，则把这个数字写到 f1 中，否则写入 f0 中。通过这一步，可以把这 5 亿个数划分为两部分，而且 f0 中的数都大于 f1 中的数（最高位是符号位）。</p><p>划分之后，可以非常容易地知道中位数是在 f0 还是 f1 中。假设 f1 中有 1 亿个数，那么中位数一定在 f0 中，且是在 f0 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。</p><p>提示，5 亿数的中位数是第 2.5 亿与右边相邻一个数求平均值。若 f1 有一亿个数，那么中位数就是 f0 中从第 1.5 亿个数开始的两个数求得的平均值。</p><p>对于 f0 可以用次高位的二进制继续将文件一分为二，如此划分下去，直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。</p><p>注意，当数据总数为偶数，如果划分后两个文件中的数据有相同个数，那么中位数就是数据较小的文件中的最大值与数据较大的文件中的最小值的平均值。</p><h1 id="九、如何按照-query-的频度排序？"><a href="#九、如何按照-query-的频度排序？" class="headerlink" title="九、如何按照 query 的频度排序？"></a>九、如何按照 query 的频度排序？</h1><h2 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。</p><h2 id="2-解答思路-6"><a href="#2-解答思路-6" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>如果 query 的重复度比较大，可以考虑一次性把所有 query 读入内存中处理；如果 query 的重复率不高，那么可用内存不足以容纳所有的 query，这时候就需要采用分治法或其他的方法来解决。</p><h3 id="方法一：HashMap-法"><a href="#方法一：HashMap-法" class="headerlink" title="方法一：HashMap 法"></a>方法一：HashMap 法</h3><p>如果 query 重复率高，说明不同 query 总数比较小，可以考虑把所有的 query 都加载到内存中的 HashMap 中。接着就可以按照 query 出现的次数进行排序。</p><h3 id="方法二：分治法-1"><a href="#方法二：分治法-1" class="headerlink" title="方法二：分治法"></a>方法二：分治法</h3><p>分治法需要根据数据量大小以及可用内存的大小来确定问题划分的规模。对于这道题，可以顺序遍历 10 个文件中的 query，通过 Hash 函数 hash(query) % 10 把这些 query 划分到 10 个小文件中。</p><p>之后对每个小文件使用 HashMap 统计 query 出现次数，根据次数排序并写入到另外一个单独文件中。</p><p>接着对所有文件按照 query 的次数进行排序，这里可以使用归并排序（由于无法把所有 query 都读入内存，因此需要使用外排序）。</p><h2 id="3-方法总结-3"><a href="#3-方法总结-3" class="headerlink" title="3. 方法总结"></a>3. 方法总结</h2><p>内存若够，直接读入进行排序；</p><p>内存不够，先划分为小文件，小文件排好序后，整理使用外排序进行归并。</p><h1 id="十、如何找出排名前-500-的数？"><a href="#十、如何找出排名前-500-的数？" class="headerlink" title="十、如何找出排名前 500 的数？"></a>十、如何找出排名前 500 的数？</h1><h2 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>有 20 个数组，每个数组有 500 个元素，并且有序排列。如何在这 20*500 个数中找出前 500 的数？</p><h2 id="2-解答思路-7"><a href="#2-解答思路-7" class="headerlink" title="2. 解答思路"></a>2. 解答思路</h2><p>对于 TopK 问题，最常用的方法是使用堆排序。对本题而言，假设数组降序排列，可以采用以下方法：</p><p>首先建立大顶堆，堆的大小为数组的个数，即为 20，把每个数组最大的值存到堆中。</p><p>接着删除堆顶元素，保存到另一个大小为 500 的数组中，然后向大顶堆插入删除的元素所在数组的下一个元素。</p><p>重复上面的步骤，直到删除完第 500 个元素，也即找出了最大的前 500 个数。</p><p>为了在堆中取出一个数据后，能知道它是从哪个数组中取出的，从而可以从这个数组中取下一个值，可以把数组的指针存放到堆中，对这个指针提供比较大小的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author https://github.com/yanglbme */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataWithSource</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataWithSource</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 数值     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token comment">/**     * 记录数值来源的数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> source<span class="token punctuation">;</span>    <span class="token comment">/**     * 记录数值在数组中的索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DataWithSource</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * 由于 PriorityQueue 使用小顶堆来实现，这里通过修改     * 两个整数的比较逻辑来让 PriorityQueue 变成大顶堆     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">DataWithSource</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rowSize <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> columnSize <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 创建一个columnSize大小的数组，存放结果</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>columnSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataWithSource</span><span class="token punctuation">></span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将每个数组的最大一个元素放入堆中</span>            <span class="token class-name">DataWithSource</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataWithSource</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> columnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除堆顶元素</span>            <span class="token class-name">DataWithSource</span> d <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> columnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            d<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>d<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">setIndex</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> top <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30, 29, 25, 20, 19]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="十一、大数据中-TopK-问题的常用套路"><a href="#十一、大数据中-TopK-问题的常用套路" class="headerlink" title="十一、大数据中 TopK 问题的常用套路"></a>十一、大数据中 TopK 问题的常用套路</h1><p>对于海量数据到处理经常会涉及到 topK 问题。在设计数据结构和算法的时候，主要需要考虑的应该是当前算法（包括数据结构）跟给定情境（比如数据量级、数据类型）的适配程度，和当前问题最核心的瓶颈（如降低时间复杂度，还是降低空间复杂度）是什么。</p><p>首先，我们来举几个常见的 topK 问题的例子：</p><blockquote><p>给定 100 个 int 数字，在其中找出最大的 10 个；</p><p>给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字可以无序）；</p><p>给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字依次排序）；</p><p>给定 10 亿个不重复的 int 数字，在其中找出最大的 10 个；</p><p>给定 10 个数组，每个数组中有 1 亿个 int 数字，在其中找出最大的 10 个；</p><p>给定 10 亿个 string 类型的数字，在其中找出最大的 10 个（仅需要查 1 次）；</p><p>给定 10 亿个 string 类型的数字，在其中找出最大的 k 个（需要反复多次查询，其中 k 是一个随机数字）。</p></blockquote><p>上面这些问题看起来很相似，但是解决的方式却千差万别。</p><p>稍有不慎，就可能使得 topK 问题成为系统的瓶颈。不过也不用太担心，接下来我会总结几种常见的解决思路，遇到问题的时候，大家把这些基础思路融会贯通并且杂糅组合，即可做到见招拆招。</p><h2 id="1-堆排序法"><a href="#1-堆排序法" class="headerlink" title="1. 堆排序法"></a>1. 堆排序法</h2><p>这里说的是堆排序法，而不是快排或者希尔排序。虽然理论时间复杂度都是 O(nlogn)，但是堆排在做 topK 的时候有一个优势，就是可以维护一个仅包含 k 个数字的小顶堆（想清楚，为啥是小顶堆哦），当新加入的数字大于堆顶数字的时候，将堆顶元素剔除，并加入新的数字。</p><p>用 C++ 来说明，堆在 stl 中是 priority_queue（不是 set）。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> topK <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    priority_queue<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">,</span> greater<span class="token punctuation">&lt;</span><span class="token punctuation">></span><span class="token punctuation">></span></span> pq<span class="token punctuation">;</span>    <span class="token comment">// 小顶堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> auto<span class="token operator">&amp;</span> x <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> topK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果超出个数，则弹出堆顶（最小的）数据</span>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 输出依次为7,8,9</span>        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-类似快排法"><a href="#2-类似快排法" class="headerlink" title="2. 类似快排法"></a>2. 类似快排法</h2><p>快排大家都知道，针对 topK 问题，可以对快排进行改进。仅对部分数据进行递归计算。</p><p>比如，在 100 个数字中，找最大的 10 个，第一次循环的时候，povit 被移动到了 80 的位置，则接下来仅需要在后面的 20 个数字中找最大的 10 个即可。</p><p>这样做的优势是，理论最优时间复杂度可以达到 O(n)，不过平均时间复杂度还是 O(nlogn)。需要说明的是，通过这种方式，找出来的最大的 k 个数字之间，是无序的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> povit <span class="token operator">=</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">partSort</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> povit <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> povit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> povit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> povit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">getMaxNumbers</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把求最大的k个数，转换成求最小的size-k个数字</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> size <span class="token operator">-</span> k<span class="token punctuation">;</span>    <span class="token function">partSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">ret</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    auto ret <span class="token operator">=</span> <span class="token function">getMaxNumbers</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>auto x <span class="token operator">:</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 输出7，8，9（理论上无序）</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-使用-bitmap"><a href="#3-使用-bitmap" class="headerlink" title="3. 使用 bitmap"></a>3. 使用 bitmap</h2><p>有时候 topK 问题会遇到数据量过大，内存无法全部加载。这个时候，可以考虑将数据存放至 bitmap 中，方便查询。</p><p>比如，给出 10 个 int 类型的数据，分别是【13，12，11，1，2，3，4，5，6，7】，int 类型的数据每个占据 4 个字节，那这个数组就占据了 40 个字节。</p><p>现在，把它们放到一个 16 个长度 bool 的 bitmap 中，结果就是【0，1，1，1，1，1，1，1，0，0，0，1，1，1，0，0】，在将空间占用降低至 4 字节的同时，也可以很方便的看出，最大的 3 个数字，分别是 11，12 和 13。</p><p>需要说明的是，bitmap 结合跳表一起使用往往有奇效。比如以上数据还可以记录成：从第 1 位开始，有连续 7 个 1；从第 11 位开始，有连续 3 个 1。这样做，空间复杂度又得到了进一步的降低。</p><p>这种做法的优势，当然是降低了空间复杂度。不过需要注意一点，bitmap 比较适合不重复且有范围（比如，数据均在 0 ～ 10 亿之间）的数据的查询。至于有重复数据的情况，可以考虑与 hash 等结构的混用。</p><h2 id="4-使用-hash"><a href="#4-使用-hash" class="headerlink" title="4. 使用 hash"></a>4. 使用 hash</h2><p>如果遇到了查询 string 类型数据的大小，可以考虑 hash 方法。</p><p>举个例子，10 个 string 数字【”1001”，”23”，”1002”，”3003”，”2001”，”1111”，”65”，”834”，”5”，”987”】找最大的 3 个。我们先通过长度进行 hash，得到长度最大为 4，且有 5 个长度为 4 的 string。接下来再通过最高位值做 hash，发现有 1 个最高位为”3”的，1 个为”2”的，3 个为”1”的。接下来，可以通过再设计 hash 函数，或者是循环的方式，在 3 个最高位为”1”的 string 中找到最大的一个，即可找到 3 个最值大的数据。</p><p>这种方法比较适合网址或者电话号码的查询。缺点就是如果需要多次查询的话，需要多次计算 hash，并且需要根据实际情况设计多个 hash 函数。</p><h2 id="5-字典树"><a href="#5-字典树" class="headerlink" title="5. 字典树"></a>5. 字典树</h2><p>字典树（trie）的具体结构和查询方式，不在这里赘述了，自行百度一下就有很多。这里主要说一下优缺点。</p><p>字典树的思想，还是通过前期建立索引信息，后期可以反复多次查询，并且后期增删数据也很方便。比较适合于需要反复多次查询的情况。</p><p>比如，反复多次查询字符序（例如：z&gt;y&gt;…&gt;b&gt;a）最大的 k 个 url 这种，使用字典树把数据存储一遍，就非常适合。既减少了空间复杂度，也加速了查询效率。</p><h2 id="6-混合查询"><a href="#6-混合查询" class="headerlink" title="6. 混合查询"></a>6. 混合查询</h2><p>以上几种方法，都是比较独立的方法。其实，在实际工作中，遇到更多的问题还是混合问题，这就需要我们对相关的内容，融会贯通并且做到活学活用。</p><p>我举个例子：我们的分布式服务跑在 10 台不同机器上，每台机器上部署的服务均被请求 10000 次，并且记录了个这 10000 次请求的耗时（耗时值为 int 数据），找出这 10*10000 次请求中，从高到低的找出耗时最大的 50 个。看看这个问题，很现实吧。我们试着用上面介绍的方法，组合一下来求解。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先，对每台机器上的 10000 个做类似快排，找出每台机器上 top50 的耗时信息。此时，单机上的这 50 条数据是无序的。</p><p>然后，再将 10 台机器上的 50 条数据（共 500 条）放到一起，再做一次类似快排，找到最大的 50 个（此时应该这 50 个应该是无序的）。</p><p>最后，对这 50 个数据做快排，从而得到最终结果。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>首先通过堆排，分别找出 10 台机器上耗时最高的 50 个数据，此时的这 50 个数据，已经是从大到小有序的了。</p><p>然后，我们依次取出 10 台机器中，耗时最高的 5 条放入小顶堆中。</p><p>最后，遍历 10 台机器上的数据，每台机器从第 6 个数据开始往下循环，如果这个值比堆顶的数据大，则抛掉堆顶数据并且把它加入，继续用下一个值进行同样比较。如果这个值比堆顶的值小，则结束当前循环，并且在下一台机器上做同样操作。</p><p>以上我介绍了两种方法，并不是为了说明哪种方法更好，或者时间复杂度更低。而是想说同样的事情有多种不同的解决方法，而且随着数据量的增加，可能会需要更多组合形式。在这个领域，数据决定了数据结构，数据结构决定了算法。</p><p>没有最好的方法，只有不断找寻更好的方法的程序员。适合的，才会是最好的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/2022/10/14/java/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/10/14/java/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="java命名规范"><a href="#java命名规范" class="headerlink" title="java命名规范"></a>java命名规范</h1><p>​    简洁清爽的代码风格应该是大多数工程师所期待的。在工作中笔者常常因为起名字而纠结，命名已经成为我工作中的拦路虎，夸张点可以说是编程5分钟，命名两小时！</p><p>​    每个公司都有不同的标准，目的是为了保持统一，减少沟通成本，提升团队研发效能。所以本文中是笔者结合阿里巴巴开发规范，以及工作中的见闻针对Java领域相关命名进行整理和总结，仅供参考。</p><h2 id="一、-Java中的命名规范"><a href="#一、-Java中的命名规范" class="headerlink" title="一、 Java中的命名规范"></a>一、 Java中的命名规范</h2><p>好的命名能体现出代码的特征，含义或者是用途，让阅读者可以根据名称的含义快速厘清程序的脉络。不同语言中采用的命名形式大相径庭，Java中常用到的命名形式共有三种，既首字母大写的UpperCamelCase，首字母小写的lowerCamelCase以及全部大写的并用下划线分割单词的UPPERCAMELUNSER_SCORE。通常约定，<strong>类一般采用大驼峰命名，方法和局部变量使用小驼峰命名，而大写下划线命名通常是常量和枚举中使用。</strong></p><table><thead><tr><th align="center">类型(名)</th><th align="center">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">全部小写 多个单词用中划线分隔‘-’</td><td align="center">spring-cloud</td></tr><tr><td align="center">包</td><td align="center">全部小写</td><td align="center">com.alibaba.fastjson</td></tr><tr><td align="center">类</td><td align="center">单词首字母大写</td><td align="center">Feature, FieldDeserializer</td></tr><tr><td align="center">变量</td><td align="center">首字母小写 多个单词组成时， 除首个单词 其他单词首字母都要大写</td><td align="center">password,  userName</td></tr><tr><td align="center">常量</td><td align="center">全部大写，多个单词，用’_’分隔</td><td align="center">CACHEEXPIREDTIME</td></tr><tr><td align="center">方法</td><td align="center">同变量</td><td align="center">read(),  getById(Long id)</td></tr></tbody></table><h2 id="二、-包命名"><a href="#二、-包命名" class="headerlink" title="二、 包命名"></a>二、 包命名</h2><p><strong>包名</strong> 统一使用<strong>小写</strong> ，<strong>点分隔符</strong> 之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace不需要使用任何分割）。包名统一使用单数形式，如果类命有复数含义，则可以使用复数形式。</p><p>包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。常见的前缀可以分为以下几种：</p><table><thead><tr><th align="center">前缀</th><th align="center">例</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">indi 或 onem</td><td align="center">indi.发起者名.项目名.模块名.……</td><td align="center">个体项目 个人发起，但非自己独自完成 可公开或私有项目， copyright主要属于发起者。</td></tr><tr><td align="center">pers</td><td align="center">pers.个人名.项目名.模块名.……</td><td align="center">个人项目 指个人发起，独自完成， 可分享的项目 copyright主要属于个人</td></tr><tr><td align="center">priv</td><td align="center">priv.个人名.项目名.模块名.……</td><td align="center">私有项目，指个人发起，独自完成 非公开的私人使用的项目， copyright属于个人。</td></tr><tr><td align="center">team</td><td align="center">team.团队名.项目名.模块名.……</td><td align="center">团队项目，指由团队发起 并由该团队开发的项目 copyright属于该团队所有</td></tr><tr><td align="center">顶级域名</td><td align="center">com.公司名.项目名.模块名.……</td><td align="center">公司项目 copyright由项目发起的公司所有</td></tr></tbody></table><h2 id="三、-类命名"><a href="#三、-类命名" class="headerlink" title="三、 类命名"></a>三、 类命名</h2><p><strong>类名使用大驼峰命名形式</strong> ，类命通常时<strong>名词或名词短语</strong> ，接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如Cloneable，Callable等，表示实现该接口的类有某种功能或能力。对于测试类则以它要测试的类开头，以Test结尾，如HashMapTest。</p><p>对于一些特殊特有名词缩写也可以使用全大写命名，比如XMLHttpRequest，不过笔者认为缩写三个字母以内都大写，超过三个字母则按照要给单词算。这个没有标准如阿里巴巴中fastjson用JSONObject作为类命，而google则使用JsonObjectRequest命名，对于这种特殊的缩写，原则是统一就好。</p><table><thead><tr><th align="left">属性(类)</th><th align="left">约束</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">抽象</td><td align="left">Abstract  或 Base 开头</td><td align="left">BaseUserService</td></tr><tr><td align="left">枚举</td><td align="left">Enum 作为后缀</td><td align="left">OSType</td></tr><tr><td align="left">工具</td><td align="left">Utils作为后缀</td><td align="left">StringUtils</td></tr><tr><td align="left">异常</td><td align="left">Exception结尾</td><td align="left">RuntimeException</td></tr><tr><td align="left">接口实现</td><td align="left">接口名+ Impl</td><td align="left">UserServiceImpl</td></tr><tr><td align="left">领域模型相</td><td align="left">/DO/DTO/VO/DAO</td><td align="left">正例：UserDAO 反例：UserDao</td></tr><tr><td align="left">设计模式相关</td><td align="left">Builder，Factory等</td><td align="left">当使用到设计模式时 要使用对应的设计模式作为后缀 如ThreadFactory</td></tr><tr><td align="left">处理特定功能</td><td align="left">Handler，Predicate Validator</td><td align="left">表示处理器，校验器，断言 这些类工厂还有配套的方法名 如handle，predicate，validate</td></tr><tr><td align="left">测试</td><td align="left">Test后缀</td><td align="left">UserServiceTest 表示用来测试UserService类的</td></tr><tr><td align="left">MVC分层</td><td align="left">Controller，Service ServiceImpl，DAO 后缀</td><td align="left">UserManageController UserManageDAO</td></tr></tbody></table><h2 id="四、-方法"><a href="#四、-方法" class="headerlink" title="四、 方法"></a>四、 方法</h2><p><strong>方法命名采用小驼峰的形式</strong> ，首字小写，往后的每个单词首字母都要大写。和类名不同的是，方法命名一般为<strong>动词或动词短语</strong> ，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p><h3 id="4-1-返回真伪值的方法"><a href="#4-1-返回真伪值的方法" class="headerlink" title="4.1 返回真伪值的方法"></a>4.1 返回真伪值的方法</h3><p>注：pre- prefix前缀，suf- suffix后缀，alo-alone 单独使用</p><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">is</td><td align="left">对象是否符合期待的状态</td><td align="left">isValid</td></tr><tr><td align="left">pre</td><td align="left">can</td><td align="left">对象<strong>能否执行</strong> 所期待的动作</td><td align="left">canRemove</td></tr><tr><td align="left">pre</td><td align="left">should</td><td align="left">调用方执行某个命令 或方法是<strong>好还是不好</strong> <strong>应不应该</strong>， 或者说<strong>推荐还是不推荐</strong></td><td align="left">shouldMigrate</td></tr><tr><td align="left">pre</td><td align="left">has</td><td align="left">对象<strong>是否持有</strong> 所期待的数据和属性</td><td align="left">hasObservers</td></tr><tr><td align="left">pre</td><td align="left">needs</td><td align="left">调用方<strong>是否需要</strong> 执行某个命令或方法</td><td align="left">needsMigrate</td></tr></tbody></table><h3 id="4-2-用来检查的方法"><a href="#4-2-用来检查的方法" class="headerlink" title="4.2 用来检查的方法"></a>4.2 用来检查的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">ensure</td><td align="left">检查是否为期待的状态 不是则抛出异常或返回error code</td><td align="left">ensureCapacity</td></tr><tr><td align="left">validate</td><td align="left">检查是否为正确的状态 不是则抛出异常或返回error code</td><td align="left">validateInputs</td></tr></tbody></table><h3 id="4-3-按需求才执行的方法"><a href="#4-3-按需求才执行的方法" class="headerlink" title="4.3 按需求才执行的方法"></a>4.3 按需求才执行的方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">suf</td><td align="left">IfNeeded</td><td align="left">需要的时候执行 不需要则什么都不做</td><td align="left">drawIfNeeded</td></tr><tr><td align="left">pre</td><td align="left">might</td><td align="left">同上</td><td align="left">mightCreate</td></tr><tr><td align="left">pre</td><td align="left">try</td><td align="left">尝试执行 失败时抛出异常 或是返回errorcode</td><td align="left">tryCreate</td></tr><tr><td align="left">suf</td><td align="left">OrDefault</td><td align="left">尝试执行 失败时返回默认值</td><td align="left">getOrDefault</td></tr><tr><td align="left">suf</td><td align="left">OrElse</td><td align="left">尝试执行 失败时返回 实际参数中指定的值</td><td align="left">getOrElse</td></tr><tr><td align="left">pre</td><td align="left">force</td><td align="left">强制尝试执行 error抛出异常或是返回值</td><td align="left">forceCreate,  forceStop</td></tr></tbody></table><h3 id="4-4-异步相关方法"><a href="#4-4-异步相关方法" class="headerlink" title="4.4 异步相关方法"></a>4.4 异步相关方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">blocking</td><td align="left">线程阻塞方法</td><td align="left">blockingGetUser</td></tr><tr><td align="left">suf</td><td align="left">InBackground</td><td align="left">执行在后台线程</td><td align="left">doInBackground</td></tr><tr><td align="left">suf</td><td align="left">Async</td><td align="left">异步方法</td><td align="left">sendAsync</td></tr><tr><td align="left">suf</td><td align="left">Sync</td><td align="left">同步方法</td><td align="left">sendSync</td></tr><tr><td align="left">pre / alo</td><td align="left">schedule</td><td align="left">Job和Tas k放入队列</td><td align="left">schedule,  scheduleJob</td></tr><tr><td align="left">pre / alo</td><td align="left">post</td><td align="left">同上</td><td align="left">postJob</td></tr><tr><td align="left">pre / alo</td><td align="left">execute</td><td align="left">执行异步 或同步方法</td><td align="left">execute, executeTask</td></tr><tr><td align="left">pre / alo</td><td align="left">start</td><td align="left">同上</td><td align="left">star, tstartJob</td></tr><tr><td align="left">pre / alo</td><td align="left">cancel</td><td align="left">停止异步方法</td><td align="left">cance, cancelJob</td></tr><tr><td align="left">pre / alo</td><td align="left">stop</td><td align="left">同上</td><td align="left">stop,stopJob</td></tr></tbody></table><h3 id="4-5-回调方法"><a href="#4-5-回调方法" class="headerlink" title="4.5 回调方法"></a>4.5 回调方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">pre</td><td align="left">on</td><td align="left">事件发生时执行</td><td align="left">onCompleted</td></tr><tr><td align="left">pre</td><td align="left">before</td><td align="left">事件发生前执行</td><td align="left">beforeUpdate</td></tr><tr><td align="left">pre</td><td align="left">pre</td><td align="left">同上</td><td align="left">preUpdate</td></tr><tr><td align="left">pre</td><td align="left">will</td><td align="left">同上</td><td align="left">willUpdate</td></tr><tr><td align="left">pre</td><td align="left">after</td><td align="left">事件发生后执行</td><td align="left">afterUpdate</td></tr><tr><td align="left">pre</td><td align="left">post</td><td align="left">同上</td><td align="left">postUpdate</td></tr><tr><td align="left">pre</td><td align="left">did</td><td align="left">同上</td><td align="left">didUpdate</td></tr><tr><td align="left">pre</td><td align="left">should</td><td align="left">确认事件 是否可以执行</td><td align="left">shouldUpdate</td></tr></tbody></table><h3 id="4-6-操作对象生命周期的方法"><a href="#4-6-操作对象生命周期的方法" class="headerlink" title="4.6 操作对象生命周期的方法"></a>4.6 操作对象生命周期的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">initialize</td><td align="left">初始化或延迟初始化使用</td><td align="left">initialize</td></tr><tr><td align="left">pause</td><td align="left">暂停</td><td align="left">onPause , pause</td></tr><tr><td align="left">stop</td><td align="left">停止</td><td align="left">onStop, stop</td></tr><tr><td align="left">abandon</td><td align="left">销毁的替代</td><td align="left">abandon</td></tr><tr><td align="left">destroy</td><td align="left">同上</td><td align="left">destroy</td></tr><tr><td align="left">dispose</td><td align="left">同上</td><td align="left">dispose</td></tr></tbody></table><h3 id="4-7-与集合操作相关的方法"><a href="#4-7-与集合操作相关的方法" class="headerlink" title="4.7 与集合操作相关的方法"></a>4.7 与集合操作相关的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">contains</td><td align="left">是包含指定对象相同的对象</td><td align="left">contains</td></tr><tr><td align="left">add</td><td align="left">添加</td><td align="left">addJob</td></tr><tr><td align="left">append</td><td align="left">添加</td><td align="left">appendJob</td></tr><tr><td align="left">insert</td><td align="left">插入到下标n</td><td align="left">insertJob</td></tr><tr><td align="left">put</td><td align="left">添加与key对应的元素</td><td align="left">putJob</td></tr><tr><td align="left">remove</td><td align="left">移除元素</td><td align="left">removeJob</td></tr><tr><td align="left">enqueue</td><td align="left">添加到队列的最末位</td><td align="left">enqueueJob</td></tr><tr><td align="left">dequeue</td><td align="left">从队列中头部取出并移除</td><td align="left">dequeueJob</td></tr><tr><td align="left">push</td><td align="left">添加到栈头</td><td align="left">pushJob</td></tr><tr><td align="left">pop</td><td align="left">从栈头取出并移除</td><td align="left">popJob</td></tr><tr><td align="left">peek</td><td align="left">从栈头取出但不移除</td><td align="left">peekJob</td></tr><tr><td align="left">find</td><td align="left">寻找符合条件的某物</td><td align="left">findById</td></tr></tbody></table><h3 id="4-8-与数据相关的方法"><a href="#4-8-与数据相关的方法" class="headerlink" title="4.8 与数据相关的方法"></a>4.8 与数据相关的方法</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">create</td><td align="left">新创建</td><td align="left">createAccount</td></tr><tr><td align="left">new</td><td align="left">新创建</td><td align="left">newAccount</td></tr><tr><td align="left">from</td><td align="left">从既有的某物新建 或是从其他的数据新建</td><td align="left">fromConfig</td></tr><tr><td align="left">to</td><td align="left">转换</td><td align="left">toString</td></tr><tr><td align="left">update</td><td align="left">更新既有某物</td><td align="left">updateAccount</td></tr><tr><td align="left">load</td><td align="left">读取</td><td align="left">loadAccount</td></tr><tr><td align="left">fetch</td><td align="left">远程读取</td><td align="left">fetchAccount</td></tr><tr><td align="left">delete</td><td align="left">删除</td><td align="left">deleteAccount</td></tr><tr><td align="left">remove</td><td align="left">删除</td><td align="left">removeAccount</td></tr><tr><td align="left">save</td><td align="left">保存</td><td align="left">saveAccount</td></tr><tr><td align="left">store</td><td align="left">保存</td><td align="left">storeAccount</td></tr><tr><td align="left">commit</td><td align="left">保存</td><td align="left">commitChange</td></tr><tr><td align="left">apply</td><td align="left">保存或应用</td><td align="left">applyChange</td></tr><tr><td align="left">clear</td><td align="left">清除或是恢复到初始状态</td><td align="left">clearAll</td></tr><tr><td align="left">reset</td><td align="left">清除或是恢复到初始状态</td><td align="left">resetAll</td></tr></tbody></table><h3 id="4-9-成对出现的动词"><a href="#4-9-成对出现的动词" class="headerlink" title="4.9 成对出现的动词"></a>4.9 成对出现的动词</h3><table><thead><tr><th align="left">单词</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">get获取</td><td align="left">set 设置</td></tr><tr><td align="left">add 增加</td><td align="left">remove 删除</td></tr><tr><td align="left">create 创建</td><td align="left">destory 移除</td></tr><tr><td align="left">start 启动</td><td align="left">stop 停止</td></tr><tr><td align="left">open 打开</td><td align="left">close 关闭</td></tr><tr><td align="left">read 读取</td><td align="left">write 写入</td></tr><tr><td align="left">load 载入</td><td align="left">save 保存</td></tr><tr><td align="left">create 创建</td><td align="left">destroy 销毁</td></tr><tr><td align="left">begin 开始</td><td align="left">end 结束</td></tr><tr><td align="left">backup 备份</td><td align="left">restore 恢复</td></tr><tr><td align="left">import 导入</td><td align="left">export 导出</td></tr><tr><td align="left">split 分割</td><td align="left">merge 合并</td></tr><tr><td align="left">inject 注入</td><td align="left">extract 提取</td></tr><tr><td align="left">attach 附着</td><td align="left">detach 脱离</td></tr><tr><td align="left">bind 绑定</td><td align="left">separate 分离</td></tr><tr><td align="left">view 查看</td><td align="left">browse 浏览</td></tr><tr><td align="left">edit 编辑</td><td align="left">modify 修改</td></tr><tr><td align="left">select 选取</td><td align="left">mark 标记</td></tr><tr><td align="left">copy 复制</td><td align="left">paste 粘贴</td></tr><tr><td align="left">undo 撤销</td><td align="left">redo 重做</td></tr><tr><td align="left">insert 插入</td><td align="left">delete 移除</td></tr><tr><td align="left">add 加入</td><td align="left">append 添加</td></tr><tr><td align="left">clean 清理</td><td align="left">clear 清除</td></tr><tr><td align="left">index 索引</td><td align="left">sort 排序</td></tr><tr><td align="left">find 查找</td><td align="left">search 搜索</td></tr><tr><td align="left">increase 增加</td><td align="left">decrease 减少</td></tr><tr><td align="left">play 播放</td><td align="left">pause 暂停</td></tr><tr><td align="left">launch 启动</td><td align="left">run 运行</td></tr><tr><td align="left">compile 编译</td><td align="left">execute 执行</td></tr><tr><td align="left">debug 调试</td><td align="left">trace 跟踪</td></tr><tr><td align="left">observe 观察</td><td align="left">listen 监听</td></tr><tr><td align="left">build 构建</td><td align="left">publish 发布</td></tr><tr><td align="left">input 输入</td><td align="left">output 输出</td></tr><tr><td align="left">encode 编码</td><td align="left">decode 解码</td></tr><tr><td align="left">encrypt 加密</td><td align="left">decrypt 解密</td></tr><tr><td align="left">compress 压缩</td><td align="left">decompress 解压缩</td></tr><tr><td align="left">pack 打包</td><td align="left">unpack 解包</td></tr><tr><td align="left">parse 解析</td><td align="left">emit 生成</td></tr><tr><td align="left">connect 连接</td><td align="left">disconnect 断开</td></tr><tr><td align="left">send 发送</td><td align="left">receive 接收</td></tr><tr><td align="left">download 下载</td><td align="left">upload 上传</td></tr><tr><td align="left">refresh 刷新</td><td align="left">synchronize 同步</td></tr><tr><td align="left">update 更新</td><td align="left">revert 复原</td></tr><tr><td align="left">lock 锁定</td><td align="left">unlock 解锁</td></tr><tr><td align="left">check out 签出</td><td align="left">check in 签入</td></tr><tr><td align="left">submit 提交</td><td align="left">commit 交付</td></tr><tr><td align="left">push 推</td><td align="left">pull 拉</td></tr><tr><td align="left">expand 展开</td><td align="left">collapse 折叠</td></tr><tr><td align="left">begin 起始</td><td align="left">end 结束</td></tr><tr><td align="left">start 开始</td><td align="left">finish 完成</td></tr><tr><td align="left">enter 进入</td><td align="left">exit 退出</td></tr><tr><td align="left">abort 放弃</td><td align="left">quit 离开</td></tr><tr><td align="left">obsolete 废弃</td><td align="left">depreciate 废旧</td></tr><tr><td align="left">collect 收集</td><td align="left">aggregate 聚集</td></tr></tbody></table><h2 id="五、-变量-amp-常量命名"><a href="#五、-变量-amp-常量命名" class="headerlink" title="五、 变量&amp;常量命名"></a>五、 变量&amp;常量命名</h2><h3 id="5-1-变量命名"><a href="#5-1-变量命名" class="headerlink" title="5.1 变量命名"></a>5.1 变量命名</h3><p>变量是指在程序运行中可以改变其值的量，包括成员变量和局部变量。变量名由多单词组成时，第一个单词的首字母小写，其后单词的首字母大写，俗称骆驼式命名法（也称驼峰命名法），如 computedValues，index、变量命名时，尽量简短且能清楚的表达变量的作用，命名体现具体的业务含义即可。</p><p>变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。pojo中的布尔变量，都不要加is(数据库中的布尔字段全都要加 is_ 前缀)。</p><h3 id="5-2-常量命名"><a href="#5-2-常量命名" class="headerlink" title="5.2 常量命名"></a>5.2 常量命名</h3><p>常量命名CONSTANT_CASE，一般采用全部大写（作为方法参数时除外），单词间用下划线分割。那么什么是常量呢？</p><p>常量是在作用域内保持不变的值，一般使用final进行修饰。一般分为三种，全局常量（public static final修饰），类内常量（private static final 修饰）以及局部常量（方法内，或者参数中的常量），局部常量比较特殊，通常采用小驼峰命名即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个demo **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**     * 局部常量(正例)     */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> USER_MESSAGE_CACHE_EXPIRE_TIME <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 局部常量(反例，命名不清晰）     */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MESSAGE_CACHE_TIME <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 全局常量     */</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ERROR_MESSAGE <span class="token operator">=</span> <span class="token string">" error message"</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 成员变量     */</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> currentUserId<span class="token punctuation">;</span>     <span class="token comment">/**     * 控制台打印 &#123;@code message&#125; 信息     *     * @param message 消息体，局部常量     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>常量一般都有自己的业务含义,<strong>不要害怕长度过长而进行省略或者缩写</strong> 。如，用户消息缓存过期时间的表示，那种方式更佳清晰，交给你来评判。</p><h2 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h2><ol><li>尽量不要使用拼音；<strong>杜绝拼音和英文混用</strong> 。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu</li><li>命名过程中尽量不要出现特殊的字符，常量除外。</li><li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li><li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li></ol><h2 id="六、-代码注释"><a href="#六、-代码注释" class="headerlink" title="六、 代码注释"></a>六、 代码注释</h2><h3 id="6-1-注释的原则"><a href="#6-1-注释的原则" class="headerlink" title="6.1 注释的原则"></a>6.1 注释的原则</h3><p>好的命名增加代码阅读性，代码的命名往往有严格的限制。而注释不同，程序员往往可以自由发挥，单并不意味着可以为所欲为之胡作非为。优雅的注释通常要满足三要素。</p><ol><li>Nothing is strange 没有注释的代码对于阅读者非常不友好，哪怕代码写的在清除，阅读者至少从心理上会有抵触，更何况代码中往往有许多复杂的逻辑，所以一定要写注释，不仅要记录代码的逻辑，还有说清楚修改的逻辑。</li><li>Less is more 从代码维护角度来讲，代码中的注释一定是精华中的精华。合理清晰的命名能让代码易于理解，对于逻辑简单且命名规范，能够清楚表达代码功能的代码不需要注释。滥用注释会增加额外的负担，更何况大部分都是废话。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据id获取信息【废话注释】getMessageById(id)</span></code></pre><ol><li>Advance with the time 注释应该随着代码的变动而改变，注释表达的信息要与代码中完全一致。通常情况下修改代码后一定要修改注释。</li></ol><h3 id="6-2-注释格式"><a href="#6-2-注释格式" class="headerlink" title="6.2 注释格式"></a>6.2 注释格式</h3><p>注释大体上可以分为两种，一种是javadoc注释，另一种是简单注释。javadoc注释可以生成JavaAPI为外部用户提供有效的支持javadoc注释通常在使用IDEA，或者Eclipse等开发工具时都可以自动生成，也支持自定义的注释模板，仅需要对对应的字段进行解释。参与同一项目开发的同学，尽量设置成相同的注释模板。</p><h4 id="a-包注释"><a href="#a-包注释" class="headerlink" title="a. 包注释"></a>a. 包注释</h4><p>包注释在工作中往往比较特殊，通过包注释可以快速知悉当前包下代码是用来实现哪些功能，强烈建议工作中加上，尤其是对于一些比较复杂的包，包注释一般在包的根目录下，名称统一为package-info.java。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 落地也质量检测 * 1. 用来解决什么问题 * 对广告主投放的广告落地页进行性能检测，模拟不同的系统，如Android，IOS等; 模拟不同的网络：2G，3G，4G，wifi等 * * 2. 如何实现 * 基于chrome浏览器，用chromedriver驱动浏览器，设置对应的网络，OS参数，获取到浏览器返回结果。 * * 注意：网络环境配置信息&#123;@link cn.mycookies.landingpagecheck.meta.NetWorkSpeedEnum&#125;目前使用是常规速度，可以根据实际情况进行调整 * * @author cruder * @time 2019/12/7 20:3 下午 */</span><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycookies<span class="token punctuation">.</span>landingpagecheck</span><span class="token punctuation">;</span></code></pre><h4 id="b-类注接"><a href="#b-类注接" class="headerlink" title="b. 类注接"></a>b. 类注接</h4><p>javadoc注释中，每个类都必须有注释。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Copyright (C), 2019-2020, Jann  balabala...** 类的介绍：这是一个用来做什么事情的类，有哪些功能，用到的技术.....** @author   类创建者姓名 保持对齐* @date     创建日期 保持对齐* @version  版本号 保持对齐*/</span></code></pre><p>在每个属性前面必须加上属性注释，通常有一下两种形式，至于怎么选择，你高兴就好，不过一个项目中要保持统一。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** 提示信息 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment">/** * 密码 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span></code></pre><h4 id="d-方法注释"><a href="#d-方法注释" class="headerlink" title="d. 方法注释"></a>d. 方法注释</h4><p>在每个方法前面必须加上方法注释，对于方法中的每个参数，以及返回值都要有说明。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 方法的详细说明，能干嘛，怎么实现的，注意事项...  *  * @param xxx      参数1的使用说明， 能否为null  * @return 返回结果的说明， 不同情况下会返回怎样的结果  * @throws 异常类型   注明从此类方法中抛出异常的说明  */</span></code></pre><h4 id="e-构造方法注释"><a href="#e-构造方法注释" class="headerlink" title="e. 构造方法注释"></a>e. 构造方法注释</h4><p>在每个构造方法前面必须加上注释，注释模板如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 构造方法的详细说明  *  * @param xxx      参数1的使用说明， 能否为null  * @throws 异常类型   注明从此类方法中抛出异常的说明  */</span></code></pre><p>而简单注释往往是需要工程师字节定义，在使用注释时应该注意一下几点：</p><ol><li>枚举类的各个属性值都要使用注释，枚举可以理解为是常量，通常不会发生改变，通常会被在多个地方引用，对枚举的修改和添加属性通常会带来很大的影响。</li><li>保持排版整洁，不要使用行尾注释；双斜杠和星号之后要用1个空格分隔。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 反例：不要使用行尾注释</span><span class="token comment">//反例：换行符与注释之间没有缩进</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// 正例：姓名</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">/** * 1. 多行注释 * * 2. 对于不同的逻辑说明，可以用空行分隔 */</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    无论是命名和注释，他们的目的都是为了让代码和工程师进行对话，增强代码的可读性，可维护性。优秀的代码往往能够见名知意，注释往往是对命名的补充和完善。命名太难了！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试</title>
      <link href="/2022/09/28/java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>/2022/09/28/java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="远程调试服务端端口配置"><a href="#远程调试服务端端口配置" class="headerlink" title="远程调试服务端端口配置"></a>远程调试服务端端口配置</h2><h4 id="正常jar包启动设置远程调试端口"><a href="#正常jar包启动设置远程调试端口" class="headerlink" title="正常jar包启动设置远程调试端口"></a>正常jar包启动设置远程调试端口</h4><h6 id="在启动命令里加入以下jvm参数，其中8082是远程调试端口号"><a href="#在启动命令里加入以下jvm参数，其中8082是远程调试端口号" class="headerlink" title="在启动命令里加入以下jvm参数，其中8082是远程调试端口号"></a>在启动命令里加入以下jvm参数，其中8082是远程调试端口号</h6><h6 id="Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-8082"><a href="#Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-8082" class="headerlink" title="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082"></a>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082</h6><h4 id="TAS启动设置远程调试端口"><a href="#TAS启动设置远程调试端口" class="headerlink" title="TAS启动设置远程调试端口"></a>TAS启动设置远程调试端口</h4><h6 id="在TAS文件夹下的jvm-ini文件里加入以下jvm参数，其中9978是远程调试端口号"><a href="#在TAS文件夹下的jvm-ini文件里加入以下jvm参数，其中9978是远程调试端口号" class="headerlink" title="在TAS文件夹下的jvm.ini文件里加入以下jvm参数，其中9978是远程调试端口号"></a>在TAS文件夹下的jvm.ini文件里加入以下jvm参数，其中9978是远程调试端口号</h6><h6 id="Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-9978"><a href="#Xdebug-Xrunjdwp-transport-dt-socket-server-y-suspend-n-address-9978" class="headerlink" title="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9978"></a>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9978</h6><h2 id="远程调试客户端（idea-配置"><a href="#远程调试客户端（idea-配置" class="headerlink" title="远程调试客户端（idea)配置"></a>远程调试客户端（idea)配置</h2><h6 id="步骤：Run-gt-Edit-Configurations（图1）-gt-号-gt-Remote-JVM-Debug（图2）-gt-配置Remote信息（图2）。"><a href="#步骤：Run-gt-Edit-Configurations（图1）-gt-号-gt-Remote-JVM-Debug（图2）-gt-配置Remote信息（图2）。" class="headerlink" title="步骤：Run -&gt; Edit Configurations（图1）-&gt; +号-&gt; Remote JVM Debug（图2）-&gt; 配置Remote信息（图2）。"></a>步骤：Run -&gt; Edit Configurations（图1）-&gt; +号-&gt; Remote JVM Debug（图2）-&gt; 配置Remote信息（图2）。</h6><p><img src="%E5%9B%BE1.png" alt="图1"></p><p><img src="%E5%9B%BE2.png" alt="图2"></p><h6 id="Name：远程名称；"><a href="#Name：远程名称；" class="headerlink" title="Name：远程名称；"></a>Name：远程名称；</h6><h6 id="Debugger-mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。"><a href="#Debugger-mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。" class="headerlink" title="Debugger mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。"></a>Debugger mode：debugger的模式。attach是debugger连接到被debug的Java进程，主动式，listen是debugger监听由Java进程发送过来的通信，被动式。</h6><h6 id="Host：部署服务器Ip；"><a href="#Host：部署服务器Ip；" class="headerlink" title="Host：部署服务器Ip；"></a>Host：部署服务器Ip；</h6><h6 id="Port：远程调时端口号；"><a href="#Port：远程调时端口号；" class="headerlink" title="Port：远程调时端口号；"></a>Port：远程调时端口号；</h6><h6 id="Use-module-classpath-本地想要进行debug的项目"><a href="#Use-module-classpath-本地想要进行debug的项目" class="headerlink" title="Use module classpath: 本地想要进行debug的项目"></a>Use module classpath: 本地想要进行debug的项目</h6><h2 id="远程调试过程"><a href="#远程调试过程" class="headerlink" title="远程调试过程"></a>远程调试过程</h2><h4 id="1、启动远程debug模式"><a href="#1、启动远程debug模式" class="headerlink" title="1、启动远程debug模式"></a>1、启动远程debug模式</h4><h6 id="选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。"><a href="#选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。" class="headerlink" title="选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。"></a>选中配置的远程调式名称，点击debug模式启动按钮（图3）。启动前先启动服务器上需远程的程序。</h6><p><img src="%E5%9B%BE3.jpg" alt="图3" title="图3"></p><h6 id="启动成功后控制台显示信息"><a href="#启动成功后控制台显示信息" class="headerlink" title="启动成功后控制台显示信息"></a>启动成功后控制台显示信息</h6><p><img src="%E5%9B%BE4.png" alt="图4"></p><h4 id="2、断点设置"><a href="#2、断点设置" class="headerlink" title="2、断点设置"></a>2、断点设置</h4><h6 id="在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。"><a href="#在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。" class="headerlink" title="在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。"></a>在java类型左侧行号栏单点鼠标左建打上断点，再次点击鼠标左键取消断点。</h6><h6 id="在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。"><a href="#在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。" class="headerlink" title="在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。"></a>在断点处点击右键可设置条件表达式（图5），结果为true或false，true时进入断点。</h6><p><img src="%E5%9B%BE5.jpg" alt="图5" title="图5"></p><h6 id="Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程"><a href="#Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程" class="headerlink" title="Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程"></a>Enableb设置为未选中状态，断点失效，红点变为空心红圈（图6）。Suspend选中All则阻塞所有线程，选中Thread只阻塞此线程</h6><p><img src="%E5%9B%BE6.jpg" alt="图6" title="图6"></p><h4 id="3、查看参数值"><a href="#3、查看参数值" class="headerlink" title="3、查看参数值"></a>3、查看参数值</h4><h6 id="远程调试时可查看参数值或方法执行结果，有以下方式。"><a href="#远程调试时可查看参数值或方法执行结果，有以下方式。" class="headerlink" title="远程调试时可查看参数值或方法执行结果，有以下方式。"></a>远程调试时可查看参数值或方法执行结果，有以下方式。</h6><h6 id="右键-gt-Evalute-Expression-输入参数名或执行的方法查看对应信息"><a href="#右键-gt-Evalute-Expression-输入参数名或执行的方法查看对应信息" class="headerlink" title="右键-&gt;Evalute Expression 输入参数名或执行的方法查看对应信息"></a>右键-&gt;Evalute Expression 输入参数名或执行的方法查看对应信息</h6><p><img src="%E5%9B%BE7.png" alt="图7" title="图7"></p><h6 id="在控制台中的Variables下查看所有参数值"><a href="#在控制台中的Variables下查看所有参数值" class="headerlink" title="在控制台中的Variables下查看所有参数值"></a>在控制台中的Variables下查看所有参数值</h6><p><img src="%E5%9B%BE8.png" alt="图8" title="图8"></p><h6 id="光标悬停到参数上，显示当前变量信息"><a href="#光标悬停到参数上，显示当前变量信息" class="headerlink" title="光标悬停到参数上，显示当前变量信息"></a>光标悬停到参数上，显示当前变量信息</h6><p><img src="%E5%9B%BE9.png" alt="图9" title="图9"></p><h4 id="4、修改参数值"><a href="#4、修改参数值" class="headerlink" title="4、修改参数值"></a>4、修改参数值</h4><h6 id="在调试中可修改错误的参数值，有以下方式。"><a href="#在调试中可修改错误的参数值，有以下方式。" class="headerlink" title="在调试中可修改错误的参数值，有以下方式。"></a>在调试中可修改错误的参数值，有以下方式。</h6><h6 id="右键-gt-Evalute-Expression-输入参数名等于xxx，可重新给参数赋值"><a href="#右键-gt-Evalute-Expression-输入参数名等于xxx，可重新给参数赋值" class="headerlink" title="右键-&gt;Evalute Expression 输入参数名等于xxx，可重新给参数赋值"></a>右键-&gt;Evalute Expression 输入参数名等于xxx，可重新给参数赋值</h6><p><img src="%E5%9B%BE10.png" alt="图10" title="图10"></p><h6 id="在Variables中选中需要修改的参数，右键-gt-Set-Value-修改参数值。"><a href="#在Variables中选中需要修改的参数，右键-gt-Set-Value-修改参数值。" class="headerlink" title="在Variables中选中需要修改的参数，右键 -&gt; Set Value 修改参数值。"></a>在Variables中选中需要修改的参数，右键 -&gt; Set Value 修改参数值。</h6><p><img src="%E5%9B%BE11.png" alt="图11" title="图11"></p><h4 id="5、调试过程中添加代码"><a href="#5、调试过程中添加代码" class="headerlink" title="5、调试过程中添加代码"></a>5、调试过程中添加代码</h4><h6 id="添加代码：鼠标右键点击-gt-Add-lnline-Watch，输入添加的代码，如下图。"><a href="#添加代码：鼠标右键点击-gt-Add-lnline-Watch，输入添加的代码，如下图。" class="headerlink" title="添加代码：鼠标右键点击 -&gt; Add lnline Watch，输入添加的代码，如下图。"></a>添加代码：鼠标右键点击 -&gt; Add lnline Watch，输入添加的代码，如下图。</h6><p><img src="%E5%9B%BE12.png" alt="图12" title="图12"><br><img src="%E5%9B%BE13.png" alt="图13" title="图13"></p><h6 id="删除调试过程中添加的代码：Variables-gt-lnline-Watches-gt-Remove-All-Watches-删除所有添加的代码，Variables-gt-lnline-Watches-gt-选中删除的代码-gt-Remove-Watch-删除选中的代码"><a href="#删除调试过程中添加的代码：Variables-gt-lnline-Watches-gt-Remove-All-Watches-删除所有添加的代码，Variables-gt-lnline-Watches-gt-选中删除的代码-gt-Remove-Watch-删除选中的代码" class="headerlink" title="删除调试过程中添加的代码：Variables -&gt; lnline Watches-&gt; Remove All Watches 删除所有添加的代码，Variables -&gt; lnline Watches -&gt; 选中删除的代码 -&gt; Remove Watch 删除选中的代码"></a>删除调试过程中添加的代码：Variables -&gt; lnline Watches-&gt; Remove All Watches 删除所有添加的代码，Variables -&gt; lnline Watches -&gt; 选中删除的代码 -&gt; Remove Watch 删除选中的代码</h6><p><img src="%E5%9B%BE14.png" alt="图14" title="图14"></p><h4 id="6、调试过程中抛出异常"><a href="#6、调试过程中抛出异常" class="headerlink" title="6、调试过程中抛出异常"></a>6、调试过程中抛出异常</h4><h6 id="在运行中抛出异常：Frames-gt-选中要抛出异常代码的线程-gt-点击右键选中Throw-Exception-gt-添加抛出异常代码。"><a href="#在运行中抛出异常：Frames-gt-选中要抛出异常代码的线程-gt-点击右键选中Throw-Exception-gt-添加抛出异常代码。" class="headerlink" title="在运行中抛出异常：Frames -&gt; 选中要抛出异常代码的线程 -&gt; 点击右键选中Throw Exception -&gt; 添加抛出异常代码。"></a>在运行中抛出异常：Frames -&gt; 选中要抛出异常代码的线程 -&gt; 点击右键选中Throw Exception -&gt; 添加抛出异常代码。</h6><p><img src="%E5%9B%BE15.png" alt="图15" title="图15"><br><img src="%E5%9B%BE16.png" alt="图16" title="图16"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAop 实战</title>
      <link href="/2022/08/29/java/SpringAop%E5%AE%9E%E6%88%98/"/>
      <url>/2022/08/29/java/SpringAop%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-AOP-实战"><a href="#Spring-AOP-实战" class="headerlink" title="Spring AOP 实战"></a>Spring AOP 实战</h2><p>看了上面这么多的理论知识, 不知道大家有没有觉得枯燥哈. 不过不要急, 俗话说理论是实践的基础, 对 Spring AOP 有了基本的理论认识后, 我们来看一下下面几个具体的例子吧.<br>下面的几个例子是我在工作中所遇见的比较常用的 Spring AOP 的使用场景, 我精简了很多有干扰我们学习的注意力的细枝末节, 以力求整个例子的简洁性.</p><p>下面几个 Demo 的源码都可以在我的 <a href="https://github.com/yongshun/some_java_code">Github</a> 上下载到.</p><h3 id="HTTP-接口鉴权"><a href="#HTTP-接口鉴权" class="headerlink" title="HTTP 接口鉴权"></a>HTTP 接口鉴权</h3><p>首先让我们来想象一下如下场景: 我们需要提供的 HTTP RESTful 服务, 这个服务会提供一些比较敏感的信息, 因此对于某些接口的调用会进行调用方权限的校验, 而某些不太敏感的接口则不设置权限, 或所需要的权限比较低(例如某些监控接口, 服务状态接口等).<br>实现这样的需求的方法有很多, 例如我们可以在每个 HTTP 接口方法中对服务请求的调用方进行权限的检查, 当调用方权限不符时, 方法返回错误. 当然这样做并无不可, 不过如果我们的 api 接口很多, 每个接口都进行这样的判断, 无疑有很多冗余的代码, 并且很有可能有某个粗心的家伙忘记了对调用者的权限进行验证, 这样就会造成潜在的 bug.<br>那么除了上面的所说的方法外, 还有没有别的比较优雅的方式来实现呢? 当然有啦, 不然我在这啰嗦半天干嘛呢, 它就是我们今天的主角: <code>AOP</code>.</p><p>让我们来提炼一下我们的需求:</p><ol><li>可以定制地为某些指定的 HTTP RESTful api 提供权限验证功能.</li><li>当调用方的权限不符时, 返回错误.</li></ol><p>根据上面所提出的需求, 我们可以进行如下设计:</p><ol><li>提供一个特殊的注解 <code>AuthChecker</code>, 这个是一个方法注解, 有此注解所标注的 Controller 需要进行调用方权限的认证.</li><li>利用 Spring AOP, 以 <strong>@annotation</strong> 切点标志符来匹配有注解 <code>AuthChecker</code> 所标注的 joinpoint.</li><li>在 advice 中, 简单地检查调用者请求中的 Cookie 中是否有我们指定的 token, 如果有, 则认为此调用者权限合法, 允许调用, 反之权限不合法, 范围错误.</li></ol><p>根据上面的设计, 我们来看一下具体的源码吧.<br>首先是 <code>AuthChecker</code> 注解的定义:<br><strong>AuthChecker.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AuthChecker</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p><code>AuthChecker</code> 注解是一个方法注解, 它用于注解 RequestMapping 方法.</p><p>有了注解的定义, 那我们再来看一下 aspect 的实现吧:<br><strong>HttpAopAdviseDefine.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo1.AuthChecker)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">checkAuth</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查用户所传递的 token 是否合法</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"错误, 权限不合法!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"user_token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个 aspect 中, 我们首先定义了一个 pointcut, 以 <strong>@annotation</strong> 切点标志符来匹配有注解 <code>AuthChecker</code> 所标注的 joinpoint, 即:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo1.AuthChecker)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>然后再定义一个 advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义 advise</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">checkAuth</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查用户所传递的 token 是否合法</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getUserToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"错误, 权限不合法!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当被 <code>AuthChecker</code> 注解所标注的方法调用前, 会执行我们的这个 advice, 而这个 advice 的处理逻辑很简单, 即从 HTTP 请求中获取名为 <code>user_token</code> 的 cookie 的值, 如果它的值是 <code>123456</code>, 则我们认为此 HTTP 请求合法, 进而调用 <code>joinPoint.proceed()</code> 将 HTTP 请求转交给相应的控制器处理; 而如果<code>user_token</code> cookie 的值不是 <code>123456</code>, 或为空, 则认为此 HTTP 请求非法, 返回错误.</p><p>接下来我们来写一个模拟的 HTTP 接口:<br><strong>DemoController.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/http/alive"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">alive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"服务一切正常"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AuthChecker</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/http/user_info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">callSomeInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"调用了 user_info 接口."</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意到上面我们提供了两个 HTTP 接口, 其中 接口 <strong>/aop/http/alive</strong> 是没有 <code>AuthChecker</code> 标注的, 而 <strong>/aop/http/user_info</strong> 接口则用到了 <code>@AuthChecker</code> 标注. 那么自然地, 当请求了 <strong>/aop/http/user_info</strong> 接口时, 就会触发我们所设置的权限校验逻辑.</p><p>接下来我们来验证一下, 我们所实现的功能是否有效吧.<br>首先在 Postman 中, 调用 <strong>/aop/http/alive</strong> 接口, 请求头中不加任何参数:</p><p><img src="https://image-static.segmentfault.com/112/902/1129027773-582720e2b5b69_fix732"></p><p>可以看到, 我们的 HTTP 请求完全没问题.</p><p>那么再来看一下请求 <strong>/aop/http/user_info</strong> 接口会怎样呢:</p><p><img src="https://image-static.segmentfault.com/248/422/2484227282-582720eac8c86_fix732"></p><p>当我们请求 <strong>/aop/http/user_info</strong> 接口时, 服务返回一个权限异常的错误, 为什么会这样呢? 自然就是我们的权限认证系统起了作为: 当一个方法被调用并且这个方法有 <code>AuthChecker</code> 标注时, 那么首先会执行到我们的 <code>around advice</code>, 在这个 advice 中, 我们会校验 HTTP 请求的 cookie 字段中是否有携带 <code>user_token</code> 字段时, 如果没有, 则返回权限错误.<br>那么为了能够正常地调用 <strong>/aop/http/user_info</strong> 接口, 我们可以在 Cookie 中添加 <strong>user_token=123456</strong>, 这样我们可以愉快的玩耍了:</p><p><img src="https://image-static.segmentfault.com/215/554/2155548086-582720f1f1474_fix732"></p><blockquote><p><code>注意</code>, Postman 默认是不支持 Cookie 的, 所以为了实现添加 Cookie 的功能, 我们需要安装 Postman 的 <code>interceptor</code> 插件. 安装方法可以看<a href="https://www.getpostman.com/docs/interceptor_cookies">官网的文章</a></p></blockquote><h4 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo1">HTTP 接口鉴权</a></p><h3 id="方法调用日志"><a href="#方法调用日志" class="headerlink" title="方法调用日志"></a>方法调用日志</h3><p>第二个 AOP 实例是记录一个方法调用的log. 这应该是一个很常见的功能了.<br>首先假设我们有如下需求:</p><ol><li>某个服务下的方法的调用需要有 log: 记录调用的参数以及返回结果.</li><li>当方法调用出异常时, 有特殊处理, 例如打印异常 log, 报警等.</li></ol><p>根据上面的需求, 我们可以使用 before advice 来在调用方法前打印调用的参数, 使用 after returning advice 在方法返回打印返回的结果. 而当方法调用失败后, 可以使用 after throwing advice 来做相应的处理.<br>那么我们来看一下 aspect 的实现:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(NeedLogService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeParam</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---Before method &#123;&#125; invoke, param: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"retVal"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeResult</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> retVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---After method &#123;&#125; invoke, result: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"exception"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoke exception: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第一步, 自然是定义一个 <code>pointcut</code>, 以 <strong>within</strong> 切点标志符来匹配类 <code>NeedLogService</code> 下的所有 joinpoint, 即:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(NeedLogService)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来根据我们前面的设计, 我们分别定义了三个 advice, 第一个是一个 before advice:</p><pre class="language-none"><code class="language-none">@Before(&quot;pointcut()&quot;)public void logMethodInvokeParam(JoinPoint joinPoint) &#123;    logger.info(&quot;---Before method &#123;&#125; invoke, param: &#123;&#125;---&quot;, joinPoint.getSignature().toShortString(), joinPoint.getArgs());&#125;</code></pre><p>它在一个符合要求的 joinpoint 方法调用前执行, 打印调用的方法名和调用的参数.</p><p>第二个是 after return advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"retVal"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeResult</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> retVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---After method &#123;&#125; invoke, result: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 advice 会在方法调用成功后打印出方法名还反的参数.</p><p>最后一个是 after throw advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"exception"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoke exception: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 advice 会在指定的 joinpoint 抛出异常时执行, 打印异常的信息.</p><p>接下来我们再写两个 Service 类:<br><strong>NeedLogService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NeedLogService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NeedLogService: logMethod invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NeedLogService: exceptionMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Something bad happened!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>NormalService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---NormalService: someMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>根据我们 pointcut 的规则, 类 NeedLogService 下的所有方法都会被织入 advice, 而类 NormalService 则不会.</p><p>最后我们分别调用这几个方法:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    needLogService<span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token string">"xys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        needLogService<span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Ignore</span>    <span class="token punctuation">&#125;</span>    normalService<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们可以看到有如下输出:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Before</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> param<span class="token operator">:</span> <span class="token punctuation">[</span>xys<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NeedLogService</span><span class="token operator">:</span> logMethod invoked<span class="token punctuation">,</span> param<span class="token operator">:</span> xys<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">After</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token punctuation">[</span>xys<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Before</span> method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> invoke<span class="token punctuation">,</span> param<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NeedLogService</span><span class="token operator">:</span> exceptionMethod invoked<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span>method <span class="token class-name">NeedLogService</span><span class="token punctuation">.</span><span class="token function">exceptionMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> invoke exception<span class="token operator">:</span> <span class="token class-name">Something</span> bad happened<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">NormalService</span><span class="token operator">:</span> someMethod invoked<span class="token operator">--</span><span class="token operator">-</span></code></pre><p>根据 log, 我们知道, NeedLogService.logMethod 执行的前后确实有 advice 执行了, 并且在 NeedLogService.exceptionMethod 抛出异常后, <code>logMethodInvokeException</code> 这个 advice 也被执行了. 而由于 pointcut 的匹配规则, 在 <code>NormalService</code> 类中的方法则不会织入 advice.</p><h4 id="完整源码-1"><a href="#完整源码-1" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo2">方法调用日志</a></p><h3 id="方法耗时统计"><a href="#方法耗时统计" class="headerlink" title="方法耗时统计"></a>方法耗时统计</h3><p>作为程序员, 我们都知道服务监控对于一个服务能够长期稳定运行的重要性, 因此很多公司都有自己内部的监控报警系统, 或者是使用一些开源的系统, 例如小米的 Falcon 监控系统.</p><p>那么在程序监控中, AOP 有哪些用武之地呢? 我们来假想一下如下场景:</p><blockquote><p>有一天, leader 对小王说, “小王啊, 你负责的那个服务不太稳定啊, 经常有超时发生! 你有对这些服务接口进行过耗时统计吗?”<br>耗时统计? 小王嘀咕了, 小声的回答到: “还没有加呢.”<br>leader: “你看着办吧, 我明天要看到各个时段的服务接口调用的耗时分布!”<br>小王这就犯难了, 虽然说计算一个方法的调用耗时并不是一个很难的事情, 但是整个服务有二十来个接口呢, 一个一个地添加统计代码, 那还不是要累死人了.<br>看着同事一个一个都下班回家了, 小王眉头更加紧了. 不过此时小王灵机一动: “噫, 有了!”.<br>小王想到了一个好方法, 立即动手, 吭哧吭哧地几分钟就搞定了.</p></blockquote><p>那么小王的解决方法是什么呢? 自然是我们的主角 <code>AOP</code> 啦.</p><p>首先让我们来提炼一下需求:</p><ol><li>为服务中的每个方法调用进行调用耗时记录.</li><li>将方法调用的时间戳, 方法名, 调用耗时上报到监控平台</li></ol><p>有了需求, 自然设计实现就很简单了. 首先我们可以使用 around advice, 然后在方法调用前, 记录一下开始时间, 然后在方法调用结束后, 记录结束时间, 它们的时间差就是方法的调用耗时.</p><p>我们来看一下具体的 aspect 实现:</p><p><strong>ExpiredAopAdviseDefine.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpiredAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(SomeService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">methodInvokeExpiredTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始</span>        <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 结束</span>        <span class="token comment">// 上报到公司监控平台</span>        <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token keyword">long</span> expiredTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---method &#123;&#125; invoked, expired time: &#123;&#125; ms---"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> expiredTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>aspect 一开始定义了一个 <code>pointcut</code>, 匹配 <code>SomeService</code> 类下的所有的方法.<br>接着呢, 定义了一个 around advice:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">methodInvokeExpiredTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始</span>    <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 结束</span>    <span class="token comment">// 上报到公司监控平台</span>    <span class="token function">reportToMonitorSystem</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>advice 中的代码也很简单, 它使用了 Spring 提供的 StopWatch 来统计一段代码的执行时间. 首先我们先调用 <strong>stopWatch.start()</strong> 开始计时, 然后通过 <code>pjp.proceed()</code> 来调用我们实际的服务方法, 当调用结束后, 通过 <strong>stopWatch.stop()</strong> 来结束计时.</p><p>接着我们来写一个简单的服务, 这个服务提供一个 <strong>someMethod</strong> 方法用于模拟一个耗时的方法调用:<br><strong>SomeService.java:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: someMethod invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 模拟耗时任务</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样当 <code>SomeService</code> 类下的方法调用时, 我们所提供的 advice 就会被执行, 因此就可以自动地为我们统计此方法的调用耗时, 并自动上报到监控系统中了.<br>看到 <code>AOP</code> 的威力了吧, 我们这里仅仅使用了寥寥数语就把一个需求完美地解决了, 并且还与原来的业务逻辑完全解耦, 扩展及其方便.</p><h4 id="完整源码-2"><a href="#完整源码-2" class="headerlink" title="完整源码"></a>完整源码</h4><p><a href="https://github.com/yongshun/some_java_code/tree/master/SpringAOPDemo/src/main/java/com/xys/demo3">方法耗时统计</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的几个简单例子, 我们对 <code>Spring AOP</code> 的使用应该有了一个更为深入的了解了. 其实 Spring AOP 的使用的地方不止这些, 例如 Spring 的 <code>声明式事务</code> 就是在 AOP 之上构建的. 读者朋友也可以根据自己的实际业务场景, 合理使用 Spring AOP, 发挥它的强大功能!</p><h2 id="Spring问题汇总"><a href="#Spring问题汇总" class="headerlink" title="Spring问题汇总"></a>Spring问题汇总</h2><h3 id="同一个类中调用另一个方法没有触发Spring-AOP"><a href="#同一个类中调用另一个方法没有触发Spring-AOP" class="headerlink" title="同一个类中调用另一个方法没有触发Spring AOP"></a>同一个类中调用另一个方法没有触发Spring AOP</h3><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>考虑如下一个例子:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyMonitor</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAopAdviseDefine</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xys.demo4.MyMonitor)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 advise</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMethodInvokeParam</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---Before method &#123;&#125; invoke, param: &#123;&#125;---"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: hello invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@MyMonitor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: test invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootAppliMyion</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAopDemo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SomeService</span> someService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringAppliMyion</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyAopDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aopTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        someService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个例子中, 我们定义了一个注解 <code>MyMonitor</code>, 这个是一个方法注解, 我们的期望是当有此注解的方法被调用时, 需要执行指定的切面逻辑, 即执行 <code>MyAopAdviseDefine.logMethodInvokeParam</code> 方法.</p><p>在 SomeService 类中, 方法 test() 被 <code>MyMonitor</code> 所注解, 因此调用 test() 方法时, 应该会触发 logMethodInvokeParam 方法的调用. 不过有一点我们需要注意到, 我们在 MyAopDemo 测试例子中, 并没有直接调用 SomeService.test() 方法, 而是调用了 SomeService.hello() 方法, 在 hello 方法中, 调用了同一个类内部的 SomeService.test() 方法. 按理说, test() 方法被调用时, 会触发 AOP 逻辑, 但是在这个例子中, 我们并没有如愿地看到 MyAopAdviseDefine.logMethodInvokeParam 方法的调用, 这是为什么呢?</p><p>这是由于 Spring AOP (包括动态代理和 CGLIB 的 AOP) 的限制导致的. Spring AOP 并不是扩展了一个类(目标对象), 而是使用了一个代理对象来包装目标对象, 并拦截目标对象的方法调用. 这样的实现带来的影响是: 在目标对象中调用自己类内部实现的方法时, 这些调用并不会转发到代理对象中, 甚至代理对象都不知道有此调用的存在.</p><p>即考虑到上面的代码中, 我们在 MyAopDemo.aopTest() 中, 调用了 <code>someService.hello(&quot;abc&quot;)</code>, 这里的 someService bean 其实是 Spring AOP 所自动实例化的一个代理对象, 当调用 hello() 方法时, 先进入到此代理对象的同名方法中, 然后在代理对象中执行 AOP 逻辑(因为 hello 方法并没有注入 AOP 横切逻辑, 因此调用它不会有额外的事情发生), 当代理对象中执行完毕横切逻辑后, 才将调用请求转发到目标对象的 hello() 方法上. 因此当代码执行到 hello() 方法内部时, 此时的 <code>this</code> 其实就不是代理对象了, 而是目标对象, 因此再调用 SomeService.test() 自然就没有 AOP 效果了.</p><p>简单来说, 在 MyAopDemo 中所看到的 someService 这个 bean 和在 SomeService.hello() 方法内部上下文中的 <code>this</code> 其实代表的不是同一个对象(可以通过分别打印两者的 hashCode 以验证), 前者是 Spring AOP 所生成的代理对象, 而后者才是真正的目标对象(SomeService 实例).</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>弄懂了上面的分析, 那么解决这个问题就十分简单了. 既然 test() 方法调用没有触发 AOP 逻辑的原因是因为我们以目标对象的身份(target object) 来调用的, 那么解决的关键自然就是以代理对象(proxied object)的身份来调用 test() 方法.<br>因此针对于上面的例子, 我们进行如下修改即可:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SomeService</span> self<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> someParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: hello invoked, param: &#123;&#125;---"</span><span class="token punctuation">,</span> someParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@CatMonitor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---SomeService: test invoked---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面展示的代码中, 我们使用了一种很 subtle 的方式, 即将 SomeService bean 注入到 self 字段中(这里再次强调的是, SomeService bean 实际上是一个代理对象, 它和 this 引用所指向的对象并不是同一个对象), 因此我们在 hello 方法调用中, 使用 <code>self.test()</code> 的方式来调用 test() 方法, 这样就会触发 AOP 逻辑了.</p><h4 id="Spring-AOP-导致的-Transactional-不生效的问题"><a href="#Spring-AOP-导致的-Transactional-不生效的问题" class="headerlink" title="Spring AOP 导致的 @Transactional 不生效的问题"></a>Spring AOP 导致的 @Transactional 不生效的问题</h4><p>这个问题同样地会影响到 <code>@Transactional</code> 注解的使用, 因为 @Transactional 注解本质上也是由 AOP 所实现的.</p><p>例如我在 stackoverflow 上看到的一个类似的问题: <a href="http://stackoverflow.com/questions/3423972/spring-transaction-method-call-by-the-method-within-the-same-class-does-not-wo">Spring @Transaction method call by the method within the same class, does not work?</a><br>这里也记录下来以作参考.</p><p>那个哥们遇到的问题如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// call DAO layer and adds to database.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUsers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>getUserName<span class="token punctuation">,</span> user<span class="token punctuation">.</span>getPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>他在 <code>addUser</code> 方法上使用 <code>@Transactional</code> 来使用事务功能, 然后他在外部服务中, 通过调用 <code>addUsers</code> 方法批量添加用户. 经过了上面的分析后, 现在我们就可知道其实这里添加注解是不会启动事务功能的, 因为 AOP 逻辑整个都没生效嘛.</p><p>解决这个问题的方法有两个, 一个是使用 AspectJ 模式的事务实现:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aspectj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>另一个就是和我们刚才在上面的例子中的解决方式一样:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> self<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSelf</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> self<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>self <span class="token operator">=</span> self<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// call DAO layer and adds to database.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUsers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            self<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>getUserName<span class="token punctuation">,</span> user<span class="token punctuation">.</span>getPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务详解</title>
      <link href="/2022/08/28/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/08/28/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="详解Java-Quartz-Job-Scheduling"><a href="#详解Java-Quartz-Job-Scheduling" class="headerlink" title="详解Java Quartz Job Scheduling"></a>详解Java Quartz Job Scheduling</h1><p>​    Quartz Job Scheduling是基于Java实现的成熟的企业级作业调度组件。笔者最近所做的项目正好用到了Quartz来实现定时任务的调度，在使用过程中对Quartz不甚了解，于是趁此闲暇机会，学习了Quartz官方教程和《Quartz Job Scheduling Framework》。并形成此篇详解Java Quartz Job Scheduling。</p><h2 id="一、-Hello-Quartz"><a href="#一、-Hello-Quartz" class="headerlink" title="一、 Hello Quartz"></a>一、 Hello Quartz</h2><p>本节通过一个Hello Quartz的示例，来介绍Quartz中的核心概念。这个示例先打印”Hello Quartz!”，再以10秒频率打印当前系统时间：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * HelloJob是一个简单的job，用于打印指定内容 * * Created by zhuyiquan90 on 2018/8/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// JobDetail</span>        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// JobDataMap</span>        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobDetail</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Scheduler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SchedulerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Trigger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">StdSchedulerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token static">newJob</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token static">simpleSchedule</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token static">newTrigger</span></span><span class="token punctuation">;</span><span class="token comment">/** * HelloQuartz是一个简单的Quartz调度器 * &lt;p> * Created by zhuyiquan90 on 2018/8/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从Scheduler工厂获取一个Scheduler的实例</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 重用HelloJob，实现不同实例             */</span>            <span class="token comment">// 注册jobDetail1，打印"Hello Quartz!"，第5秒钟执行一次</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注册jobDetail2，打印当前系统时间，每10秒钟执行一次</span>            <span class="token class-name">JobDetail</span> jobDetail2 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job2"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail2<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger2 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger2"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail2<span class="token punctuation">,</span> trigger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果如下：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">1</span> triggersHello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">08.473</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.468</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job2'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">1</span> triggers<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">18.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">28.468</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job2'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">28.469</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job2<span class="token number">1534590668464</span></code></pre><p>​    <strong>Scheduler</strong>（调度器）是Quartz框架的心脏。Scheduler的生命周期始于通过SchedulerFactory工厂类创建实例，终于调用shutdown() 方法。Scheduler不仅可以用于新增、移除、列举Jobs和Triggers，还可以执行调度相关操作，比如暂停Trigger、恢复Trigger等。需要注意的是，直到调用start()方法时，Scheduler才正式开始执行job和trigger。<br>​    <strong>Job</strong>（作业）是指执行一些作业的特定的Java类。Job必须实现 org.quartz.Job接口，这个接口要求在Job中实现execute()方法。当 Quartz 调用 execute() 方法，会传递一个 JobExecutionContext 上下文变量，里面封装有 Quartz 的运行时环境和当前正执行的 Job。JobExecutionContext可以被用来访问 JobDetail 类，JobDetail 类持有Job的详细信息，包括为Job实例指定的名称，Job 所属组，Job 是否被持久化(易失性)。JobDetail又持有一个指向JobDataMap的引用。JobDataMap中包含Job配置的自定义属性。<br>​    <strong>Trigger</strong>（触发器）用于触发Job的执行。最常用的类型包括 SimpleTrigger和CronTrigger。</p><p>下面针对Quartz的核心框架展开详述。</p><h2 id="二、Quartz框架核心"><a href="#二、Quartz框架核心" class="headerlink" title="二、Quartz框架核心"></a>二、Quartz框架核心</h2><h3 id="2-1-Scheduler"><a href="#2-1-Scheduler" class="headerlink" title="2.1 Scheduler"></a>2.1 Scheduler</h3><p>​    客户端与Scheduler交互是通过<code>org.quartz.Scheduler</code>接口的。这个 Scheduler 的实现，在这种情况下，是一个代理，对其中方法调用会传递到<code>QuartzScheduler</code>实例上。QuartzScheduler对于客户端是不可见的，并且也不存在与此实例的直接交互。QuartzScheduler处在框架根的位置，它是一个引擎驱动着整个框架。<br>​    Scheduler主要包括<code>StdScheduler</code>（Quartz默认的Scheduler）和<code>RemoteScheduler</code>（带有RMI功能的Scheduler）。<br>​    Quartz提供了<code>org.quartz.SchedulerFactory</code>接口来创建Scheduler实例。SchedulerFactory包括两种类型<code>org.quartz.impl.DirectoSchedulerFactory</code> 和 <code>org.quartz.impl.StdSchedulerFactory</code>。</p><p><img src="Scheduler%E6%A1%86%E6%9E%B6%E5%9B%BE"></p><h4 id="2-1-1-使用DirectSchedulerFactory创建实例"><a href="#2-1-1-使用DirectSchedulerFactory创建实例" class="headerlink" title="2.1.1 使用DirectSchedulerFactory创建实例"></a>2.1.1 使用DirectSchedulerFactory创建实例</h4><p>​    DirectSchedulerFactory通过编程式的方式来创建Scheduler实例。一般包括三个基本步骤。首先，你必须用静态方法 <code>getInstance()</code> 获取到工厂的实例。当你持有了工厂的实例之后，你必须调用其中的一个 <code>createXXX</code> 方法去初始化它。第三步也就是最后一步是通过工厂的 <code>getScheduler()</code> 方法拿到 Scheduler 的实例。</p><p>​    代码实例如下：    </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Initialize the Scheduler Factory with 10 threads</span>    factory<span class="token punctuation">.</span><span class="token function">createVolatileScheduler</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Get a scheduler from the factory</span>    <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Start the scheduler running</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler starting up..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Do something</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>采用编程式来创建实例你需要硬编码所有的scheduler配置，这无疑是很有挑战性的。所以请<strong>慎用DirectoSchedulerFactory</strong>。</p><h4 id="2-1-2-使用StdSchedulerFactory创建实例"><a href="#2-1-2-使用StdSchedulerFactory创建实例" class="headerlink" title="2.1.2 使用StdSchedulerFactory创建实例"></a>2.1.2 使用StdSchedulerFactory创建实例</h4><p><code>StdSchedulerFactory</code>通过声明式的方式来创建Scheduler实例。它依赖于一系列的属性配置。比如</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就是以默认的配置文件<code>quartz.properties</code>来实例化scheduler。一个简单的quartz.properties配置如下所示。Quartz配置参考详见第七节。</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#===============================================================     </span><span class="token comment">#Configure Main Scheduler Properties     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">QuartzScheduler      </span><span class="token key attr-name">org.quartz.scheduler.instanceId</span> <span class="token punctuation">=</span> <span class="token value attr-value">AUTO     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure ThreadPool     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span>  <span class="token value attr-value">5      </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5      </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.SimpleThreadPool     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure JobStore     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.RAMJobStore     </span><span class="token comment">#===============================================================     </span><span class="token comment">#Configure Plugins     </span><span class="token comment">#===============================================================      </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.class</span> <span class="token value attr-value">=      </span><span class="token key attr-name">org.quartz.plugins.xml.JobInitializationPlugin</span> <span class="token value attr-value">     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.overWriteExistingJobs</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.failOnFileNotFound</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.plugin.jobInitializer.validating</span><span class="token punctuation">=</span><span class="token value attr-value">false  </span></code></pre><h4 id="2-1-3-管理-Scheduler实例"><a href="#2-1-3-管理-Scheduler实例" class="headerlink" title="2.1.3 管理 Scheduler实例"></a>2.1.3 管理 Scheduler实例</h4><h6 id="启动Scheduler"><a href="#启动Scheduler" class="headerlink" title="启动Scheduler"></a>启动Scheduler</h6><p>启动Scheduler通过<code>start()</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Create an instance of the Scheduler  </span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Start the scheduler  </span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h5 id="临时暂停Scheduler"><a href="#临时暂停Scheduler" class="headerlink" title="临时暂停Scheduler"></a>临时暂停Scheduler</h5><p>临时暂停调度的方式分为<code>standBy()</code>和<code>pauseAll()</code>两种。两者的区别如下。</p><p><strong>standby()：</strong></p><blockquote><p>Temporarily halts the Scheduler’s firing of Triggers.<br>void standby() throws SchedulerException Temporarily halts the Scheduler’s firing of Triggers.</p><p>When start() is called (to bring the scheduler out of stand-by mode),<br>trigger misfire instructions will NOT be applied during the execution<br>of the start() method - any misfires will be detected immediately<br>afterward (by the JobStore’s normal process).</p><p>The scheduler is not destroyed, and can be re-started at any time.</p></blockquote><p><strong>pauseAll() ：</strong></p><blockquote><p>void pauseAll() throws SchedulerException Pause all triggers - similar to calling<br>pauseTriggerGroup(group) on every group, however, after using this<br>method resumeAll() must be called to clear the scheduler’s state of<br>‘remembering’ that all new triggers will be paused as they are added.</p><p><strong>When resumeAll() is called (to un-pause), trigger misfire instructions WILL be applied.</strong></p></blockquote><p>说明standby()需要再次调用start()恢复调度，trigger misfire（触发未执行调度）策略在start()执行过程中将不会直接执行；pauseAll()需要调用resumeAll()恢复调度，所有trigger misfire策略将被立即执行。</p><h5 id="终止Scheduler"><a href="#终止Scheduler" class="headerlink" title="终止Scheduler"></a>终止Scheduler</h5><p>终止调度的方式是<code>shutdown()</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> waitForJobsToComplete<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span>  </code></pre><p>​    上面那两个方法唯一不同之处是其中一个方法可接受一个 boolean 型参数，表示是否让当前正在进行的 Job 正常执行完成才停止 Scheduler。无参的 shutdown() 方法相当于调用 shutdown(false)。<br>​    以上，start()，standBy()，pauseAll()，shutdown()等原子操作都是 <code>QuartzScheduler</code>完成的，后续会有专门文章对<code>QuartzScheduler</code>（Quartz框架的根本）进行源码剖析。</p><h3 id="2-2-Job"><a href="#2-2-Job" class="headerlink" title="2.2 Job"></a>2.2 Job</h3><p>​    如第一节所述，HelloJob引用了 org.quartz.Job 接口，并实现了execute() 方法。Scheduler决定运行HelloJob的时机，JobExecutionContext用于记录Job上下文，execute()执行异常抛出JobExecutionException。<br>Job如何注册到Scheduler中？如何定义Job实例的属性和配置？执行过程中如何追踪Job的状态？下面还有一些我们必须了解的关于Job的特征。</p><h4 id="2-2-1-JobDetail"><a href="#2-2-1-JobDetail" class="headerlink" title="2.2.1 JobDetail"></a>2.2.1 JobDetail</h4><p>​    从第一节的例子，我们可以看到不是直接把Job对象注册到Scheduler，实际注册的是一个JobDetail实例。这样做的好处是，针对某一类的Job，仅需要构造一个Job class，比如文件操作类Job，通过创建多个JobDetail实例来完成不同的调度任务。<br>JobDetail实例通过org.quartz.JobBuilder构造。我们将JobDetail注册到Scheduler，通过newJob()，Scheduler知道所要执行的具体Job。每一次Scheduler执行，在调用execute()方法前，会创建一个新的实例。当执行完毕，相关的job实例会被丢弃，对应的堆内存会被回收。换句话说，Job是无状态的（在最新的版本中，StatefulJob已经废弃）。因此我们需要使用JobDataMap来传递数据。</p><h4 id="2-2-2-JobDataMap"><a href="#2-2-2-JobDataMap" class="headerlink" title="2.2.2 JobDataMap"></a>2.2.2 JobDataMap</h4><p>我们能使用 org.quartz.JobDataMap 来定义 Job 的状态。JobDataMap 是JobDetail的一部分。可以向 JobDataMap 中存入键/值对，那些数据对可在你的 Job 类中传递和进行访问。<br>Trigger中也可以使用JobDataMap，这在一个Job应用于多个Triggers的场景下非常使用于参数传递。最终JobExecutionContext上下文中传递的JobDataMap是JobDetail和Trigger的并集，通过getMergedJobDataMap()获取。<br>注意，对同一key，如果在JobDetail和Trigger中都有使用，后来者会覆盖先来者。如下面的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getMergedJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello JobDetal!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trigger<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Trigger!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.646</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span>PropertySettingJobFactory <span class="token operator">-</span> Producing <span class="token keyword">instance</span> of Job 'group<span class="token punctuation">.</span>job1'<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">=</span>com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>HelloJob<span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.652</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_QuartzSchedulerThread<span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>QuartzSchedulerThread <span class="token operator">-</span> batch acquisition of <span class="token number">0</span> triggers<span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04.653</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Trigger<span class="token operator">!</span></code></pre><p>最后，Job的持久化是通过JobStore实现的，我们将在第三节详细介绍。</p><h3 id="2-3-Trigger"><a href="#2-3-Trigger" class="headerlink" title="2.3 Trigger"></a>2.3 Trigger</h3><p>​    主要使用的Quartz Trigger是org.quartz.SimpleTrigger和org.quartz.CronTrigger。</p><h4 id="2-3-1-使用SimpleTrigger部署Job"><a href="#2-3-1-使用SimpleTrigger部署Job" class="headerlink" title="2.3.1 使用SimpleTrigger部署Job"></a>2.3.1 使用SimpleTrigger部署Job</h4><p>​    SimpleTrigger 对于设置和使用是最为简单的一种 Quartz Trigger。它是为那种需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行 n 次的 Job 所设计的。</p><h5 id="2-3-1-1-代码示例"><a href="#2-3-1-1-代码示例" class="headerlink" title="2.3.1.1 代码示例"></a>2.3.1.1 代码示例</h5><p>构建一个指定时刻执行的触发器：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SimpleTrigger</span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleTrigger</span><span class="token punctuation">)</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>myStartTime<span class="token punctuation">)</span> <span class="token comment">// some Date</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span> <span class="token comment">// identify job with name, group strings</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个指定时刻以10秒为频率执行10次的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger3"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>myTimeToStartFiring<span class="token punctuation">)</span>  <span class="token comment">// if a start time is not given (if this line were omitted), "now" is implied</span>    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// note that 10 repeats will give a total of 11 firings</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJob<span class="token punctuation">)</span> <span class="token comment">// identify job with handle to its JobDetail itself                   </span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个在5分钟后执行一次的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleTrigger</span><span class="token punctuation">)</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger5"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">futureDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">IntervalUnit</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// use DateBuilder to create a date in the future</span>    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJobKey<span class="token punctuation">)</span> <span class="token comment">// identify job with its JobKey</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个现在执行，每5分钟执行一次，22点结束的触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger7"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">withIntervalInMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span><span class="token function">dateOf</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构建一个下一个整点执行，每2小时执行一次的永久触发器：</p><pre class="language-java" data-language="java"><code class="language-java">trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger8"</span><span class="token punctuation">)</span> <span class="token comment">// because group is not specified, "trigger8" will be in the default group</span>   <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">evenHourDate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// get the next even-hour (minutes and seconds zero ("00:00"))</span>   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// note that in this example, 'forJob(..)' is not called</span>   <span class="token comment">//  - which is valid if the trigger is passed to the scheduler along with the job  </span>   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-3-1-2-trigger-misfire策略"><a href="#2-3-1-2-trigger-misfire策略" class="headerlink" title="2.3.1.2 trigger misfire策略"></a>2.3.1.2 trigger misfire策略</h5><p>misfire是指触发器错过触发时间（firing time），scheduler被关闭或者Quartz线程池中没有可以完成工作的工作线程都会导致trigger misfire。不同类型的trigger针对misfire情况的处理策略也不同，SimpleTrigger的misfire策略包括：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 立即执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_FIRE_NOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 立即执行，并累计到已经执行次数，如果结束时间已经过了，则不会再执行。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 立即执行，并累计到未执行次数，如果结束时间已经过了，则不会再执行。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 告诉Quartz在下一次执行时间再次开始执行，并累计到未执行次数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 告诉Quartz在下一次执行时间再次开始执行，并累计到已经执行次数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p>SimpleTrigger的misfire默认策略是Trigger.MISFIRE_INSTRUCTION_SMART_POLICY。这种策略会根据不同情况选择不同处理，源码如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>instr <span class="token operator">==</span> <span class="token class-name">Trigger</span><span class="token punctuation">.</span>MISFIRE_INSTRUCTION_SMART_POLICY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRepeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_FIRE_NOW<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRepeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> REPEAT_INDEFINITELY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// if (getRepeatCount() > 0)</span>                instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span></code></pre><h4 id="2-3-2-使用CronTrigger部署Job"><a href="#2-3-2-使用CronTrigger部署Job" class="headerlink" title="2.3.2 使用CronTrigger部署Job"></a>2.3.2 使用CronTrigger部署Job</h4><p>CronTrigger 是基于 Unix 类似于 cron 的表达式，允许设定非常复杂的触发时间表。Cron表达式由七个子表达式组成的字符串，它描述了不同的调度细节。这些子表达式是用空格分隔的，并表示：秒、分钟、小时、天、月、星期几、年（可选项）。</p><h5 id="2-3-2-1-Cron表达式"><a href="#2-3-2-1-Cron表达式" class="headerlink" title="2.3.2.1 Cron表达式"></a>2.3.2.1 Cron表达式</h5><p>Quartz Cron 表达式支持七个域：</p><table><thead><tr><th>名称</th><th>是否必须</th><th>允许值</th><th>允许特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>时</td><td>是</td><td>0-23</td><td>, - * /</td></tr><tr><td>日</td><td>是</td><td>1月31日</td><td>, - * ? / L W C</td></tr><tr><td>月</td><td>是</td><td>1-12 或 JAN-DEC</td><td>, - * /</td></tr><tr><td>周</td><td>是</td><td>1-7 或 SUN-SAT</td><td>, - * ? / L C #</td></tr><tr><td>年</td><td>否</td><td>空 或 1970-2099</td><td>, - * /</td></tr></tbody></table><p>其中</p><ul><li>“,” ：表示指定多个值</li><li>“-”：表示指定一个范围的值</li><li>“*”：表示整个时间段</li><li>“/”：表示指定一个值的增加幅度。n/m表示从n开始，每次增加m</li><li>“?”：表示不确定的值</li><li>“L”：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li><li>“W”：指定离给定日期最近的工作日(周一到周五)。LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li><li>“#”：用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为 6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。</li></ul><p>每个17点开始，每隔5分钟过10秒执行。比如17:00:10 pm，17:05:10 pm</p><blockquote><p>10 0/5 17 * * ?</p></blockquote><p>每个周三和周五，10:30，11:30，12:30，13:30执行</p><blockquote><p>0 30 10-13 ? * WED,FRI</p></blockquote><p>每个月最后一个星期一，12:00:00执行</p><blockquote><p>0 0 12 ? * 2L</p></blockquote><h5 id="2-3-2-2-代码示例"><a href="#2-3-2-2-代码示例" class="headerlink" title="2.3.2.2 代码示例"></a>2.3.2.2 代码示例</h5><p>代码示例如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span><span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedul</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0 0/2 8-17 * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h5 id="2-3-2-3-trigger-misfire策略"><a href="#2-3-2-3-trigger-misfire策略" class="headerlink" title="2.3.2.3 trigger misfire策略"></a>2.3.2.3 trigger misfire策略</h5><p>下面是CronTrigger处理misfire的策略。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 以错过的第一个频率时间立刻开始执行,重做错过的所有频率周期后</span><span class="token comment">// 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 不触发立即执行，等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_DO_NOTHING <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 以当前时间为触发频率立刻触发一次执行，然后按照Cron频率依次执行    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  </code></pre><p>同样，CronTrigger默认也采用Trigger.MISFIRE_INSTRUCTION_SMART_POLICY策略：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>instr <span class="token operator">==</span> MISFIRE_INSTRUCTION_SMART_POLICY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//instr  == 0</span>            instr <span class="token operator">=</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW<span class="token punctuation">;</span><span class="token comment">//instr = 1</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定CronTrigger使用立即执行的misfire策略</span><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0 0/2 8-17 * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMisfireHandlingInstructionFireAndProceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-3-3-使用Quartz-Calendar排除指定日期"><a href="#2-3-3-使用Quartz-Calendar排除指定日期" class="headerlink" title="2.3.3 使用Quartz Calendar排除指定日期"></a>2.3.3 使用Quartz Calendar排除指定日期</h4><p>Quartz 的 Calender 专门用于屏闭一个时间区间，使 Trigger 在这个区间中不被触发。Quartz包括了多种类型的Calender：</p><table><thead><tr><th>Calender 名称</th><th>类</th><th>用法</th></tr></thead><tbody><tr><td>BaseCalender</td><td>org.quartz.impl.calendar.BaseCalender</td><td>为高级的 Calender 实现了基本的功能，实现了 org.quartz.Calender 接口</td></tr><tr><td>DailyCalendar</td><td>org.quartz.impl.calendar.DailyCalendar</td><td>您可以使用此日历来排除营业时间（上午8点 - 5点）每天。  每个DailyCalendar仅允许指定单个时间范围，并且该时间范围可能不会跨越每日边界（即，您不能指定从上午8点至凌晨5点的时间范围）。  如果属性invertTimeRange为false（默认），则时间范围定义触发器不允许触发的时间范围。  如果invertTimeRange为true，则时间范围被反转 - 也就是排除在定义的时间范围之外的所有时间</td></tr><tr><td>WeeklyCalendar</td><td>org.quartz.impl.calendar.WeeklyCalendar</td><td>排除星期中的一天或多天，例如，可用于排除周末</td></tr><tr><td>MonthlyCalendar</td><td>org.quartz.impl.calendar.MonthlyCalendar</td><td>排除月份中的数天，例如，可用于排除每月的最后一天</td></tr><tr><td>AnnualCalendar</td><td>org.quartz.impl.calendar.AnnualCalendar</td><td>排除年中一天或多天</td></tr><tr><td>HolidayCalendar</td><td>org.quartz.impl.calendar.HolidayCalendar</td><td>特别的用于从 Trigger 中排除节假日</td></tr><tr><td>CronCalendar</td><td>org.quartz.impl.calendar.CronCalendar</td><td>日历的这种实现排除了由给定的CronExpression表达的时间集合。 例如，您可以使用此日历使用表达式“* * 0-7,18-23？*  *”每天排除所有营业时间（上午8点至下午5点）。  如果CronTrigger具有给定的cron表达式并且与具有相同表达式的CronCalendar相关联，则日历将排除触发器包含的所有时间，并且它们将彼此抵消</td></tr></tbody></table><p>下面看一个简单实例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Add the holiday calendar to the schedule</span><span class="token class-name">AnnualCalendar</span> holidays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnualCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fourth of July (July 4) Independence Day Of USA</span><span class="token class-name">Calendar</span> fourthOfJuly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>fourthOfJuly<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// halloween (Oct 31)</span><span class="token class-name">Calendar</span> halloween <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>halloween<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// christmas (Dec 25)</span><span class="token class-name">Calendar</span> christmas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>holidays<span class="token punctuation">.</span><span class="token function">setDayExcluded</span><span class="token punctuation">(</span>christmas<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// tell the schedule about our holiday calendar</span>sched<span class="token punctuation">.</span><span class="token function">addCalendar</span><span class="token punctuation">(</span><span class="token string">"holidays"</span><span class="token punctuation">,</span> holidays<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// schedule a job to run hourly, starting on halloween</span><span class="token comment">// at 10 am</span><span class="token class-name">Date</span> runDate <span class="token operator">=</span> <span class="token function">dateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleTrigger</span> trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>runDate<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>                        <span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">modifiedByCalendar</span><span class="token punctuation">(</span><span class="token string">"holidays"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三、存储和持久化"><a href="#三、存储和持久化" class="headerlink" title="三、存储和持久化"></a>三、存储和持久化</h2><p>​    Quartz通过JobStore提供一种数据存储机制。JobStore有多种类型：基于内存的RAMJobStore（非持久化），、基于数据库的JDBCJobStore（持久化）、基于分布式缓存的TerracottaJobStore（持久化）。我们在定义SchedulerFactory时，在配置文件中要声明使用的JobStore类型来生成shceduler实例。千万不要直接在代码中定义JobStore实例，正确的做法是在幕后（通过配置的方式）来使用JobStore。</p><h3 id="3-1-RAMJobStore"><a href="#3-1-RAMJobStore" class="headerlink" title="3.1 RAMJobStore"></a>3.1 RAMJobStore</h3><p>​    org.quartz.simple.RAMJobStore是默认的Quartz的JobStore方式。SchedulerFactory初始化时没有指定JobStore，则默认使用RAMJobStore。同时，RAMJobStore基于内存，也是数据访问性能最佳的JobStore。当然，缺点也是显而易见的，因为不可持久化，所以RAMJobStore中的数据时易失的。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span></span>RAMJobStore</span></code></pre><p>​    RAMJobStore通过两种方式来加载数据。一种是直接硬编码这些数据到你的代码中，比如上文示例代码中的Job信息、Tigger信息等，一旦有任何变化，代码都需要重新编译。另一种是基于插件 JobInitializationPlugin，这种方式的优点是，当有改变时只需要对这个 XML 文件作改动，不用改代码，不用重编译。</p><h3 id="3-2-JDBCJobStore"><a href="#3-2-JDBCJobStore" class="headerlink" title="3.2 JDBCJobStore"></a>3.2 JDBCJobStore</h3><p>JDBCJobStore通过关系型数据库存储相关数据。其优点是数据持久化，同时为分布式Quartz提供了可能性。JDBCJobStore支持大部分关系型数据库包括： Oracle, PostgreSQL, MySQL, MS SQLServer, HSQLDB，DB2等。首先，要创建一系列用于存储数据的表：</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>QRTZ_CALENDARS</td><td>以 Blob 类型存储 Quartz 的 Calendar 信息</td></tr><tr><td>QRTZ_CRON_TRIGGERS</td><td>存储 Cron Trigger，包括 Cron 表达式和时区信息</td></tr><tr><td>QRTZ_FIRED_TRIGGERS</td><td>存储与已触发的 Trigger 相关的状态信息，以及相联 Job 的执行信息</td></tr><tr><td>QRTZ_PAUSED_TRIGGER_GRPS</td><td>存储已暂停的 Trigger 组的信息</td></tr><tr><td>QRTZ_SCHEDULER_STATE</td><td>存储少量的有关 Scheduler 的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)</td></tr><tr><td>QRTZ_LOCKS</td><td>存储程序的非观锁的信息(假如使用了悲观锁)</td></tr><tr><td>QRTZ_JOB_DETAILS</td><td>存储每一个已配置的 Job 的详细信息</td></tr><tr><td>QRTZ_JOB_LISTENERS</td><td>存储有关已配置的 JobListener 的信息</td></tr><tr><td>QRTZ_SIMPLE_TRIGGERS</td><td>存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</td></tr><tr><td>QRTZ_BLOG_TRIGGERS</td><td>Trigger 作为 Blob 类型存储(用于 Quartz 用户用 JDBC 创建他们自己定制的 Trigger 类型，JobStore  并不知道如何存储实例的时候)</td></tr><tr><td>QRTZ_TRIGGER_LISTENERS</td><td>存储已配置的 TriggerListener 的信息</td></tr><tr><td>QRTZ_TRIGGERS</td><td>存储已配置的 Trigger 的信息</td></tr></tbody></table><p>​    有关QRTZ表的具体用法将在第六章分布式集群实现中详述。</p><h4 id="3-2-1-配置JobStoreTX"><a href="#3-2-1-配置JobStoreTX" class="headerlink" title="3.2.1 配置JobStoreTX"></a>3.2.1 配置JobStoreTX</h4><p>​    表创建完成后，需要决定应用需要的事务类型。Quartz来管理事务的话，使用JobStoreTX；如果希望应用容器来管理事务（比如JBoss或者Tomcat），可以使用JobStoreCMT。这里选择使用JobStoreTX，继续展开。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span></span>JobStoreTX</span></code></pre><h4 id="3-2-2-配置驱动代理"><a href="#3-2-2-配置驱动代理" class="headerlink" title="3.2.2 配置驱动代理"></a>3.2.2 配置驱动代理</h4><p>​    Quartz 指定 DriverDelegate 来与给定数据库进行通信。顾名思义，从 Scheduler 通过 JobStore 对数据库的调用是委托给一个预配置的 DriverDelegate 实例。这个代理承担起所有与 JDBC driver 的通信。所有的 DriverDelegate 类都继承自 org.quartz.impl.jdbcjobstore.StdDriverDelegate 类。Mysql可以直接使用StdDriverDelegate。</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span>driverDelegateClass <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span></span>StdDriverDelegate</span></code></pre><h4 id="3-2-3-配置数据源"><a href="#3-2-3-配置数据源" class="headerlink" title="3.2.3 配置数据源"></a>3.2.3 配置数据源</h4><p>数据源配置可以指定为应用服务器配置的默认数据源，也可以单独配置，比如：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 指定数据源</span><span class="token key attr-name">org.quartz.jobStore.dataSource</span> <span class="token punctuation">=</span> <span class="token value attr-value">myDS</span><span class="token comment"># JDBC 驱动类的全限名</span><span class="token key attr-name">org.quartz.dataSource.myDS.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.jdbc.Driver  </span><span class="token comment"># 连接到你的数据库的 URL(主机，端口等)</span><span class="token key attr-name">org.quartz.dataSource.myDS.URL</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:jtds:sqlserver://localhost:1433/quartz  </span><span class="token comment"># 用于连接你的数据库的用户名</span><span class="token key attr-name">org.quartz.dataSource.myDS.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token comment"># 用于连接你的数据库的密码</span><span class="token key attr-name">org.quartz.dataSource.myDS.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">myPassword  </span><span class="token comment"># DataSource 在连接接中创建的最大连接数</span><span class="token key attr-name">org.quartz.dataSource.myDS.maxConnections</span> <span class="token punctuation">=</span> <span class="token value attr-value">10 </span><span class="token comment"># 一个可选的 SQL 查询字串，DataSource 用它来侦测并替换失败/断开的连接</span><span class="token key attr-name">org.quartz.dataSource.NAME.validationQuary</span><span class="token punctuation">=</span> <span class="token value attr-value">SELECT 1 </span></code></pre><h4 id="3-2-4-配置数据库表的前缀"><a href="#3-2-4-配置数据库表的前缀" class="headerlink" title="3.2.4 配置数据库表的前缀"></a>3.2.4 配置数据库表的前缀</h4><p>​    表前缀的目的是在某些情况下，你也许需要创建多套的 Quartz 数据库表。在这时候，你就需要改变每一套表的前缀。比如JOB_QRTZ_，则表名是JOB_QRTZ_CALENDARS。</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">org.quartz.jobStore.tablePrefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">JOB_QRTZ_</span></code></pre><h4 id="3-2-5-其他配置"><a href="#3-2-5-其他配置" class="headerlink" title="3.2.5 其他配置"></a>3.2.5 其他配置</h4><p>可用于设置 JobStoreTX 的其他配置属性：</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>org.quartz.jobStore.userProperties</td><td>FALSE</td><td>设置为true时表示JobDataMap中的value存放的类型必须是String类型，这样保证不用让更复杂的对象以序列化的形式存入 BLOB  列中。一方面提高性能，另一方面避免序列化问题</td></tr><tr><td>org.quartz.jobStore.misfireThreshold</td><td>60000</td><td>Scheduler对Trigger-misfire的忍耐时间，超过阈值则认为是misfire</td></tr><tr><td>org.quartz.jobStore.isClustered</td><td>FALSE</td><td>设置为 true 打开集群特性。分布式Quartz场景下，这个属性就必须设置为 true</td></tr><tr><td>org.quartz.jobStore.clusterCheckinInterval</td><td>15000</td><td>定义了Scheduler 实例检入到数据库中的频率(单位：毫秒).Scheduler  检查是否其他的实例到了它们应当检入的时候未检入；这能指出一个失败的 Scheduler 实例，且当前 Scheduler  会以此来接管任何执行失败并可恢复的 Job</td></tr><tr><td>org.quartz.jobStore.maxMisfiresToHandleAtATime</td><td>20</td><td>JobStore 能处理的错过触发的 Trigger 的最大数量。处理太多很快会导致数据库表被锁定过长的时间，这样就妨碍了触发别的(还未错过触发)  trigger 执行的性能</td></tr><tr><td>org.quartz.jobStore.dontSetAutoCommitFalse</td><td>FALSE</td><td>false表示调用setAutoCommit(false)，true表示不调用setAutoCommit(false)</td></tr><tr><td>org.quartz.jobStore.selectWithLockSQL</td><td>SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE</td><td>排他锁操作，必须是一个排他锁语句。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换</td></tr><tr><td>org.quartz.jobStore.selectWithLockSQL</td><td>SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE</td><td>行级排他锁，必须是一个排他锁语句。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换</td></tr><tr><td>org.quartz.jobStore.txIsolationLevelSerializable</td><td>FALSE</td><td>值为 true 时告知 Quartz调用JDBC连接的  setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 方法</td></tr></tbody></table><h3 id="3-3-TerracottaJobStore"><a href="#3-3-TerracottaJobStore" class="headerlink" title="3.3 TerracottaJobStore"></a>3.3 TerracottaJobStore</h3><p>​    TerracottaJobStore支持在分布式内存缓存服务器Terracotta中存储数据。其优势在于<strong>性能介于RAMJobStore和JDBCJobStore之间，同时提供了诸如负载均衡和故障切换的集群功能，保证了分布式Quartz的高可用。</strong><br>​    </p><p>​    启用TerracottaJobStore的简单配置如下：</p><pre class="language-java" data-language="java"><code class="language-java"># 指定<span class="token class-name">TerracottaJobStore</span>org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>terracotta<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span>TerracottaJobStore</span># 主机和端口标识要连接的<span class="token class-name">Terracotta</span>服务器的位置org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>jobStore<span class="token punctuation">.</span>tcConfigUrl <span class="token operator">=</span> localhost<span class="token operator">:</span><span class="token number">9510</span></code></pre><p>​    具体使用可以参考<a href="http://www.terracotta.org/quartz">http://www.terracotta.org/quartz</a> 这里不做展开。</p><h3 id="3-4-自建JobStore"><a href="#3-4-自建JobStore" class="headerlink" title="3.4 自建JobStore"></a>3.4 自建JobStore</h3><p>​    可以自己根据需要创建新的JobStore，必须实现org.quartz.spi.JobStore接口。JobStore 接口有 40 个方法，它要求任何 JobStore 实现都必须实现这些方法，你的也一样。你如何实现那些方法完全依赖于你正构建的 JobStore 的类型。那不是说你的 JobStore 将只能有 40 个方法；这仅仅是接口需要的最小数量。这 40 个方法体现 JobStore 和 Scheduler 之间的公共契约。<br>让我们拣出其中一个方法来简短的讨论它。我们就选 JobStore 接口方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">;</span></code></pre><p>​    Scheduler调用JobStore的SchedulerStarted() 方法去通知 JobStore Scheduler 已经启动了。如果你看了 RAMJobStore 的实现，你能发现它在这个方法实现中什么也没做：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">&#123;</span>    <span class="token comment">// nothing to do</span><span class="token punctuation">&#125;</span></code></pre><p>然而，假如你去看那两个 JobStore 的实现，你会看到在 Scheduler 在首次启动时进行了一些工作：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClustered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          clusterManagementThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          clusterManagementThread<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token function">recoverJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerConfigException</span><span class="token punctuation">(</span><span class="token string">"Failure occurred during job recovery."</span><span class="token punctuation">,</span> se<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      misfireHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MisfireHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      misfireHandler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </code></pre><p>提供方式来创建新的JobStore是非常有意义的，这样我们可以考虑通过其他数据库、文件系统、甚至是内存来存储Quartz中的数据。</p><h2 id="四、实现Quartz监听器"><a href="#四、实现Quartz监听器" class="headerlink" title="四、实现Quartz监听器"></a>四、实现Quartz监听器</h2><p>​    Quartz的监听器用于当任务调度中你所关注事件发生时，能够及时获取这一事件的通知。Quartz监听器主要有JobListener、TriggerListener、SchedulerListener三种，顾名思义，分别表示任务、触发器、调度器对应的监听器。监听器可以分为全局和非全局：全局监听器能够接收到所有的Job/Trigger的事件通知，而非全局监听器只能接收到在其上注册的Job或Trigger的事件，不在其上注册的Job或Trigger则不会进行监听。</p><h3 id="4-1-JobListener"><a href="#4-1-JobListener" class="headerlink" title="4.1 JobListener"></a>4.1 JobListener</h3><p>监听Job 在其生命周期中产生的某些关键事件时，需要实现org.quartz.JobListener接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobListener</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * getName() 方法返回一个字符串用以说明 JobListener 的名称     * 对于注册为全局的监听器，getName() 主要用于记录日志，     * 对于由特定 Job 引用的 JobListener，注册在 JobDetail 上的监听器名称必须匹配从监听器上 getName() 方法的返回值     */</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 将要被执行时调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 即将被执行，但又被 TriggerListener 否决了时调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Scheduler 在 JobDetail 被执行之后调用这个方法     */</span>    <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token class-name">JobExecutionException</span> jobException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>结合前面给出一个简单示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleJobListener</span> <span class="token keyword">implements</span> <span class="token class-name">JobListener</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SimpleJobListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" listener name is:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" is going to be executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" was vetoed and not executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">JobExecutionException</span> jobException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">" was executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从Scheduler工厂获取一个Scheduler的实例</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个指定任务job1的Job Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 is going to be executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">45.690</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 was executed</code></pre><p>​    我们可以通过addJobListener() 注册一个非全局监听器，针对指定任务，也可以调用任务组；通过Scheduler 调用 addGlobalJobListener() 方法注册为一个全局的 JobListener。如果 Scheduler 不能根据名称找到监听器，它会抛出一个 SchedulerException 异常。<br>​    加入一个非全局 JobListener 的步骤必须是依序完成。JobListener 必须首先加入到 Scheduler 中。接着，JobListener 才能够设置给 JobDetail 对象。之后，你就能使用 scheduleJob() 方法安全的把 JobDetail 加入到 Scheduler 中。</p><h3 id="4-2-TriggerListener"><a href="#4-2-TriggerListener" class="headerlink" title="4.2 TriggerListener"></a>4.2 TriggerListener</h3><p>实现org.quartz.TriggerListener接口可以监听Trigger 实例生命周期。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TriggerListener</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**     * getName() 方法返回一个字符串用以说明 TriggerListener 的名称     * 对于非全局的 TriggerListener，在 addTriggerListener() 方法中给定的名称必须与监听器的 getName() 方法返回值相匹配     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 当与监听器相关联的 Trigger 被触发，Job 上的 execute() 方法将要被执行时，Scheduler 就调用这个方法     * 在全局 TriggerListener 情况下，这个方法为所有 Trigger 被调用     */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>           <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 在 Trigger 触发后，Job 将要被执行时由 Scheduler 调用这个方法     * TriggerListener 给了一个选择去否决 Job 的执行。假如这个方法返回 true，这个 Job 将不会为此次 Trigger 触发而得到执行     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">vetoJobExecution</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>            <span class="token class-name">JobExecutidonContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是在 Trigger 错过触发时     * 如这个方法的 JavaDoc 所指出的，你应该关注此方法中持续时间长的逻辑：在出现许多错过触发的 Trigger 时，长逻辑会导致骨牌效应。你应当保持这上方法尽量的小     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerMisfired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Trigger 被触发并且完成了 Job 的执行时，Scheduler 调用这个方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerComplete</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span>            <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token keyword">int</span> triggerInstructionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  </code></pre><p>结合给出一个简单示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleTriggerListener</span> <span class="token keyword">implements</span> <span class="token class-name">TriggerListener</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" was fired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">vetoJobExecution</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" was not vetoed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerMisfired</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" misfired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerComplete</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">,</span>            <span class="token class-name">CompletedExecutionInstruction</span> triggerInstructionCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> triggerName <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>triggerName <span class="token operator">+</span> <span class="token string">" is complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-verilog" data-language="verilog"><code class="language-verilog"><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.147</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 was fired<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.147</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 was <span class="token keyword">not</span> vetoed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 is going to be executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> DEBUG org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JobRunShell <span class="token operator">-</span> Calling execute on job group<span class="token punctuation">.</span>job1Hello Quartz<span class="token operator">!</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span>  listener name is<span class="token punctuation">:</span>SimpleJobListener<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleJobListener <span class="token operator">-</span> job1 was executed<span class="token number">19</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">20.148</span> <span class="token punctuation">[</span>DefaultQuartzScheduler_Worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>SimpleTriggerListener <span class="token operator">-</span> trigger1 is complete</code></pre><p>​    同样我们可以指定一个任务组的triggerscheduler.getListenerManager().addTriggerListener(new SimpleTriggerListener(“SimpleTrigger”), GroupMatcher.groupEquals(“group”));也可以调用 addGloabelTriggerListener()注册一个全局的 TriggerListener。<br>针对于前面的非全局 JobListener 提到的相同的警告可以应用到这里来；你必须在把它设置给 Trigger 实例并存储了 Trigger 之前把 TriggerListener 加入到 Scheduler 中。</p><h3 id="4-3-SchedulerListener"><a href="#4-3-SchedulerListener" class="headerlink" title="4.3 SchedulerListener"></a>4.3 SchedulerListener</h3><p>org.quartz.SchedulerListener 接口包含了一系列的回调方法，它们会在 Scheduler 的生命周期中有关键事件发生时被调用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SchedulerListener</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**     * Scheduler 在有新的 JobDetail 部署时调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobScheduled</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 在有 JobDetail 卸载时调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobUnscheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span> <span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 当一个 Trigger 来到了再也不会触发的状态时调用这个方法     * 除非这个 Job 已设置成了持久性，否则它就会从 Scheduler 中移除     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFinalized</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是发生在一个 Trigger 或 Trigger 组被暂停时     * 假如是 Trigger 组的话，triggerName 参数将为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersPaused</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span> <span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * Scheduler 调用这个方法是发生成一个 Trigger 或 Trigger 组从暂停中恢复时     * 假如是 Trigger 组的话，triggerName 参数将为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersResumed</span><span class="token punctuation">(</span><span class="token class-name">String</span> triggerName<span class="token punctuation">,</span><span class="token class-name">String</span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 当一个或一组 JobDetail 暂停时调用这个方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsPaused</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 当一个或一组 Job 从暂停上恢复时调用这个方法     * 假如是一个 Job 组，jobName 参数将为 null     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsResumed</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 在 Scheduler 的正常运行期间产生一个严重错误时调用这个方法     * 你可以使用 SchedulerException 的 getErrorCode() 或者 getUnderlyingException() 方法或获取到特定错误的更详尽的信息     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerError</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">SchedulerException</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * Scheduler 调用这个方法用来通知 SchedulerListener Scheduler 将要被关闭     */</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> </code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloQuartz</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">HelloQuartz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DirectSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleSchedulerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Scheduler 创建后是在 Job 注册之前被启动的。这就使得在 Job 部署时 jobScheduled() 方法能得到调用</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JobDetail</span> jobDetail1 <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jobDetail1<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail1<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个指定任务的Job Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建并注册一个局部的Trigger Listener</span>            scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleTriggerListener</span><span class="token punctuation">(</span><span class="token string">"SimpleTrigger"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span><span class="token class-name">TriggerKey</span><span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"shut down scheduler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.401</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler has been started<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.411</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> group<span class="token punctuation">.</span>job1 is added<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.411</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> job1 has been scheduled<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 was fired<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 was not vetoed<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span>  listener name is<span class="token operator">:</span><span class="token class-name">SimpleJobListener</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.419</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span> job1 is going <span class="token keyword">to</span> <span class="token namespace">be</span> executed<span class="token class-name">Hello</span> <span class="token class-name">Quartz</span><span class="token operator">!</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span>  listener name is<span class="token operator">:</span><span class="token class-name">SimpleJobListener</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleJobListener</span> <span class="token operator">-</span> job1 was executed<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleTriggerListener</span> <span class="token operator">-</span> trigger1 is complete<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> <span class="token class-name">Trigger</span> is finished <span class="token keyword">for</span> job1<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">10.420</span> <span class="token punctuation">[</span><span class="token class-name">DefaultQuartzScheduler_Worker</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> group<span class="token punctuation">.</span>job1 is deleted<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED shutting down<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.413</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED paused<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler is in standby mode<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler is being shutdown<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>SimpleSchedulerListener</span> <span class="token operator">-</span> scheduler has been shutdown<span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>QuartzScheduler</span> <span class="token operator">-</span> <span class="token class-name">Scheduler</span> <span class="token class-name">DefaultQuartzScheduler_</span>$_NON_CLUSTERED shutdown complete<span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">20.414</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>learning<span class="token punctuation">.</span></span>HelloQuartz</span> <span class="token operator">-</span> shut down scheduler</code></pre><p>同样，注意addSchedulerListener在示例中放置的位置，否则因为执行顺序问题，有些事件将无法捕获。</p><h2 id="五、Quartz远程调用"><a href="#五、Quartz远程调用" class="headerlink" title="五、Quartz远程调用"></a>五、Quartz远程调用</h2><p>Quartz RMI的目的是为不同客户端提供更好的定时任务调度服务。</p><h3 id="5-1-创建Quartz-RMI服务端"><a href="#5-1-创建Quartz-RMI服务端" class="headerlink" title="5.1 创建Quartz RMI服务端"></a>5.1 创建Quartz RMI服务端</h3><p>首先创建Quartz RMI的服务端。</p><h4 id="5-1-1-配置服务端启动参数"><a href="#5-1-1-配置服务端启动参数" class="headerlink" title="5.1.1 配置服务端启动参数"></a>5.1.1 配置服务端启动参数</h4><p>RMI 服务端必要的属性包括：</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>org.quartz.scheduler.rmi.export</td><td>FALSE</td><td>假如你要使 Quartz 调度作为一个可用的 RMI 对象，这个标记必须设置为 true</td></tr><tr><td>org.quartz.scheduler.rmi.registryHost</td><td>localhost</td><td>这是运行 RMI 注册表所在的主机</td></tr><tr><td>org.quartz.scheduler.rmi.registryPort</td><td>1099</td><td>这是 RMI 注册服务监听所用的端口号(通常是1099)</td></tr><tr><td>org.quartz.scheduler.rmi.createRegistry</td><td>never</td><td>这项决定了 Quartz 是否会创建 RMI 注册服务。如果你不希望 Quartz 创建注册服务就设置为 false 或 never。如果是希望  Quartz 首先尝试去使用已存在的注册服务，如果失败的话自行创建一个就设置为 true 或 as_needed。假如注册服务创建好了，它会使用给定的  registryPort 绑定到所给的 registryHost 上</td></tr><tr><td>org.quartz.scheduler.rmi.serverPort</td><td>-1</td><td>这是 Quartz 调度器服务所绑定的端口号，在其中监听到来的连接。默认，RMI 服务会随机选择一个端口号作为调度器绑定到 RMI 注册服务的端口</td></tr></tbody></table><p>用于 Quartz RMI 服务端的 quartz.properties 文件样例如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#==============================================================     </span><span class="token comment"># Configure Main Scheduler Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">RMIScheduler     </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure RMI Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.rmi.export</span> <span class="token punctuation">=</span> <span class="token value attr-value">true     </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryHost</span> <span class="token punctuation">=</span> <span class="token value attr-value">localhost      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryPort</span> <span class="token punctuation">=</span> <span class="token value attr-value">1099      </span><span class="token key attr-name">org.quartz.scheduler.rmi.serverPort</span> <span class="token punctuation">=</span> <span class="token value attr-value">0      </span><span class="token key attr-name">org.quartz.scheduler.rmi.createRegistry</span> <span class="token punctuation">=</span> <span class="token value attr-value">true    </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure ThreadPool     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.SimpleThreadPool      </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span> <span class="token value attr-value">10      </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5     </span><span class="token comment">#==============================================================     </span><span class="token comment"># Configure JobStore     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.jobStore.misfireThreshold</span> <span class="token punctuation">=</span> <span class="token value attr-value">60000      </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.RAMJobStore   </span></code></pre><h4 id="5-1-2-创建服务端启动类"><a href="#5-1-2-创建服务端启动类" class="headerlink" title="5.1.2 创建服务端启动类"></a>5.1.2 创建服务端启动类</h4><p>​    为启动 Quartz RMI 服务端，你必须创建一个启动类，该类从工厂中获取到调度器实例，然后运行这个调度器。<br>​    首先，为清晰起见，我们把 quartz.properties 文件更名为 server.properties，这时候要告诉 Quartz RMI 服务端去加载新命名的文件而不是默认的 quartz.properties 文件。更改文件名会让我们调试问题变得容易些。这样，我们可以确保 Quartz 加载的是正确的设置文件。<br>​    第二个改变是：我们加载了一个新的安全管理器(SecurityManager)，以便能够赋予 RMI 服务端必须的权限。<br>​    </p><p>代码示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzRMIServer</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">QuartzRMIServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// Use this properties file instead of quartz.properties     </span>          <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"org.quartz.properties"</span><span class="token punctuation">,</span>                    <span class="token string">"server.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// RMI with Quartz requires a special security manager     </span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token keyword">new</span>                        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span>RMISecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token comment">// Get a reference to the Scheduler     </span>          <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span>                    <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">/*               * Due to the server.properties file, our Scheduler will              * be exported to RMI Registry automatically.              */</span>              scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Quartz RMI Server started at "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RMI Clients may now access it. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    <span class="token string">"The scheduler will run until you type \"exit\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">BufferedReader</span> rdr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                         <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Type 'exit' to shutdown server: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rdr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler is shutting down..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Scheduler has been stopped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">QuartzRMIServer</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuartzRMIServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               example<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   </code></pre><p>​    在代码示例中，安装了 RMISecurityManager 之后，通过工厂方法获得调度器实例，并调用它的 start() 方法。服务端是设计成在控制台运行的，因此一旦调度器启动之后，直至用户在控制台上键入 exit 。接着调度器被关闭也不再为远程的客户端提供服务了。<br>除了要使用 RMISecurityManager，我们注意到用不着在代码中做任何特别的事情，就能让 Quartz 调度器作为一个远程调度器来用。那些全是托server.properties 文件的福所致。当调度器被创建后，假如属性文件告诉它这么做，调度器就会把自己导出并注册到 RMI 注册服务器上，并使之可被远程调用。</p><h4 id="5-1-3-使用RMI注册服务"><a href="#5-1-3-使用RMI注册服务" class="headerlink" title="5.1.3 使用RMI注册服务"></a>5.1.3 使用RMI注册服务</h4><p>​    当属性 org.quartz.scheduler.rmi.createRegistry设置为 true 或者 always时，Quartz 会自动启动注册服务。<br>​    你也可以选择在命令行下使用 Java 的 rmiregistry 命令来运行注册服务。假如你要通过命令行启动注册服务，要确保你启动时所用的端口号要与属性文件所指定的一致。要从命令行启动，你应先进入到 <JAVA_HOME>/bin 目录下，然后键入如下命令：<code>rmiregistry &lt;port&gt;</code>。</p><h3 id="5-2-创建Quartz-RMI客户端"><a href="#5-2-创建Quartz-RMI客户端" class="headerlink" title="5.2 创建Quartz RMI客户端"></a>5.2 创建Quartz RMI客户端</h3><h4 id="5-2-1-配置客户端启动参数"><a href="#5-2-1-配置客户端启动参数" class="headerlink" title="5.2.1 配置客户端启动参数"></a>5.2.1 配置客户端启动参数</h4><p>Quartz RMI 客户端所必须的属性：</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>org.quartz.scheduler.rmi.registryHost</td><td>localhost</td><td>这是运行 RMI 注册服务所在的主机</td></tr><tr><td>org.quartz.scheduler.rmi.registryPort</td><td>1099</td><td>这是运行 RMI 注册服务所监听的端口(通常是 1099)</td></tr><tr><td>org.quartz.scheduler.rmi.proxy</td><td>FALSE</td><td>假如你希望连接到远程服务端的调度器，设置 org.quartz.scheduler.rmi.proxy 标志为 true。你同时必须指定 RMI  注册服务进程的主机和端口号</td></tr></tbody></table><p>​    为了能让客户端定位到服务对象，它需要知道 RMI 注册服务运行在哪里，以便能查找到远程对象。org.quartz.scheduler.rmi.registryHost 和 org.quartz.scheduler.rmi.registryPort 属性必须是运行着 RMI 注册服务的主机和端口。假如你配置了 Quartz RMI 服务端自动启动注册服务，那么 RMI 注册服务器与 RMI 服务端就是同在一个机器上的。<br>​    因为你想要客户端能联系到远程调度器去部署 Job，你必须设置属性 org.quartz.scheduler.rmi.proxy 为 true。<br>​    一个用于 Quartz RMI 客户端的 quartz.properties 文件例子：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#=============================================================     </span><span class="token comment"># Configure Main Scheduler Properties     </span><span class="token comment">#=============================================================      </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">RMIScheduler     </span><span class="token comment">#org.quartz.scheduler.instanceId = AUTO     </span><span class="token comment">#==============================================================     </span><span class="token comment">#Configure RMI Properties     </span><span class="token comment">#==============================================================      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryHost</span><span class="token punctuation">=</span><span class="token value attr-value">localhost      </span><span class="token key attr-name">org.quartz.scheduler.rmi.registryPort</span><span class="token punctuation">=</span><span class="token value attr-value">1099      </span><span class="token key attr-name">org.quartz.scheduler.rmi.proxy</span><span class="token punctuation">=</span> <span class="token value attr-value">true  </span></code></pre><p>注意，<strong>属性 org.quartz.scheduler.instanceName 在 RMI 客户端和服务端必须一致。不然，客户将无法在注册服务中查找到服务对象，会收一个客户端无法获取到远程调度器句柄的异常。</strong></p><h4 id="5-2-2-创建RMI客户端类"><a href="#5-2-2-创建RMI客户端类" class="headerlink" title="5.2.2 创建RMI客户端类"></a>5.2.2 创建RMI客户端类</h4><p>通过远程调度器部署一个 Job 的 Quartz RMI 客户端的例子。我们把 quartz.properties 文件更名为 client.properties 并且告诉客户端从更名后的文件中加载属性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMITestClient</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">RMITestClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Use this properties file instead of quartz.properties      </span>          <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"org.quartz.properties"</span><span class="token punctuation">,</span>                      <span class="token string">"client.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Get a reference to the remote scheduler      </span>          <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span>                     <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Define the job to add      </span>          <span class="token class-name">JobDetail</span> job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDetail</span><span class="token punctuation">(</span><span class="token string">"remotelyAddedJob"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                          <span class="token class-name">SimpleJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JobDataMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Your remotely added job has executed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                job<span class="token punctuation">.</span><span class="token function">setJobDataMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CronTrigger</span> trigger <span class="token operator">=</span>                     <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"remotelyAddedTrigger"</span><span class="token punctuation">,</span>                        <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"remotelyAddedJob"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token keyword">new</span>                             <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"/5 * * ? * *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// schedule the remote job      </span>         scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Remote job scheduled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">RMITestClient</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RMITestClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               example<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    </code></pre><p>工厂类是依据我们告诉它所加载的 client.properties 文件知道这么做的。明确的讲就是，设置了 RMI 属性导引着工厂类创建了一个远程调度器：org.quartz.scheduler.rmi.proxy = true</p><h2 id="六、Quartz集群"><a href="#六、Quartz集群" class="headerlink" title="六、Quartz集群"></a>六、Quartz集群</h2><p>集群化使Quartz满足了高可用，可扩展性强的企业级部署需要。本节主要讲Quartz的数据库集群化方式。开启Quartz集群包括3个步骤：</p><ol><li>配置每个节点的 quartz.properties 文件，支持集群化</li><li>将Scheduler信息装在数据库</li><li>启动每个Quartz节点</li></ol><h3 id="6-1-集群实例的配置"><a href="#6-1-集群实例的配置" class="headerlink" title="6.1 集群实例的配置"></a>6.1 集群实例的配置</h3><p>集群实例的 quartz.properties 文件示例如下所示</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#==============================================================  </span><span class="token comment">#Configure Main Scheduler Properties  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token value attr-value">TestScheduler1  </span><span class="token key attr-name">org.quartz.scheduler.instanceId</span> <span class="token punctuation">=</span> <span class="token value attr-value">AUTO </span><span class="token comment">#==============================================================  </span><span class="token comment">#Configure ThreadPool  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.simpl.Simple ThreadPool  </span><span class="token key attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span> <span class="token value attr-value">5  </span><span class="token key attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token value attr-value">5  </span><span class="token comment">#==============================================================  </span><span class="token comment">#Configure JobStore  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.jobStore.misfireThreshold</span> <span class="token punctuation">=</span> <span class="token value attr-value">60000  </span><span class="token key attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.quartz.impl.jdbcjobstore.JobStoreTX  </span><span class="token key attr-name">org.quartz.jobStore.driverDelegateClass</span> <span class="token value attr-value">=  </span><span class="token key attr-name">org.quartz.impl.jdbcjobstore.MSSQLDelegate</span> <span class="token value attr-value"> </span><span class="token key attr-name">org.quartz.jobStore.tablePrefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">QRTZ_  </span><span class="token key attr-name">org.quartz.jobStore.dataSource</span> <span class="token punctuation">=</span> <span class="token value attr-value">myDS  </span><span class="token key attr-name">org.quartz.jobStore.isClustered</span> <span class="token punctuation">=</span> <span class="token value attr-value">true  </span><span class="token key attr-name">org.quartz.jobStore.clusterCheckinInterval</span> <span class="token punctuation">=</span> <span class="token value attr-value">20000  </span><span class="token comment">#==============================================================  </span><span class="token comment">#Non-Managed Configure Datasource  </span><span class="token comment">#==============================================================  </span><span class="token key attr-name">org.quartz.dataSource.myDS.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">net.sourceforge.jtds.jdbc.Driver  </span><span class="token key attr-name">org.quartz.dataSource.myDS.URL</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:jtds:sqlserver://localhost:1433/quartz  </span><span class="token key attr-name">org.quartz.dataSource.myDS.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token key attr-name">org.quartz.dataSource.myDS.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin  </span><span class="token key attr-name">org.quartz.dataSource.myDS.maxConnections</span> <span class="token punctuation">=</span> <span class="token value attr-value">10  </span></code></pre><p>​    每一个实例有两个属性应该配置org.quartz.scheduler.instanceName和org.quartz.scheduler.instanceId，用在 JDBC JobStore 中和数据库来唯一标识实例。集群下实例 ID 建议使用 AUTO，防止重复后导致Quartz 集群将不能正常工作。<br>通过设置 org.quartz.jobStore.isClustered 属性为 true，你就告诉了 Scheduler 实例要它参与到一个集群当中。这一属性会贯穿于调度框架的始终，用于修改集群环境中操作的默认行为。<br>​    <code>org.quartz.jobStore.clusterCheckinInterval</code> 属性定义了Scheduler 实例检入到数据库中的频率(毫秒为单位)。Scheduler 检查是否其他的实例到了它们应当检入的时候未检入；这能指出一个失败的 Scheduler 实例，且当前 Scheduler 会以此来接管任何执行失败并可恢复的 Job。通过检入操作，Scheduler 也会更新自身的状态记录。<br>​    数据库集群化方式的JobStore选择可以是JobStoreTX 或 JobStoreCMT。同时如第三节说的配置数据源及其他合理属性。</p><h3 id="6-2-集群调度详解"><a href="#6-2-集群调度详解" class="headerlink" title="6.2 集群调度详解"></a>6.2 集群调度详解</h3><p>​    参考 <a href="https://www.cnblogs.com/yangyudexiaobai/p/4422665.html">quartz定时任务框架调度机制解析</a></p><p>​    Quartz集群调度是以数据库作为枢纽，各个节点并不感知其他节点的存在,只是通过数据库来进行间接的沟通。</p><p>​    quartz运行时由QuartzSchedulerThread类作为主体，循环执行调度流程。JobStore作为中间层，按照quartz的并发策略执行数据库操作，完成主要的调度逻辑。JobRunShellFactory负责实例化JobDetail对象，将其放入线程池运行。LockHandler负责获取LOCKS表中的数据库悲观锁。</p><p><img src="Quartz%E9%9B%86%E7%BE%A4%E8%B0%83%E5%BA%A6%E6%B5%81%E7%A8%8B.jpg" alt="Quartz集群调度流程"></p><p>​    整个quartz对任务调度的时序大致如下</p><p><img src="Quartz%E9%9B%86%E7%BE%A4%E8%B0%83%E5%BA%A6%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt="Quartz集群调度时序图"></p><p>梳理一下其中的流程,可以表示为：</p><p>0.调度器线程run()</p><p>1.获取待触发trigger</p><blockquote><p>1.1数据库LOCKS表TRIGGER_ACCESS行加锁<br>1.2读取JobDetail信息<br>1.3读取trigger表中触发器信息并标记为”已获取”<br>1.4commit事务,释放锁</p></blockquote><p>2.触发trigger</p><blockquote><p>2.1数据库LOCKS表STATE_ACCESS行加锁<br>2.2确认trigger的状态<br>2.3读取trigger的JobDetail信息<br>2.4读取trigger的Calendar信息<br>2.5更新trigger信息<br>2.6commit事务,释放锁</p></blockquote><p>3实例化并执行Job</p><blockquote><p>3.1从线程池获取线程执行JobRunShell的run方法</p></blockquote><p>​    </p><p>​    可以看到,这个过程中有两个相似的过程:同样是对数据表的更新操作,同样是在执行操作前获取锁 操作完成后释放锁.这一规则可以看做是quartz解决集群问题的核心思想.<br>​    进一步解释这条规则就是:一个调度器实例在执行涉及到分布式问题的数据库操作前,首先要获取QUARTZ2_LOCKS表中对应当前调度器的行级锁,获取锁后即可执行其他表中的数据库操作,随着操作事务的提交,行级锁被释放,供其他调度器实例获取.<br>集群中的每一个调度器实例都遵循这样一种严格的操作规程,那么对于同一类调度器来说,每个实例对数据库的操作只能是串行的.而不同名的调度器之间却可以并行执行.</p><h3 id="6-3-Quartz-集群-Cookbook"><a href="#6-3-Quartz-集群-Cookbook" class="headerlink" title="6.3 Quartz 集群 Cookbook"></a>6.3 Quartz 集群 Cookbook</h3><p>本节记录Quartz集群的细节问题。</p><h4 id="指派-Job-给集群中特定的实例"><a href="#指派-Job-给集群中特定的实例" class="headerlink" title="指派 Job 给集群中特定的实例"></a>指派 Job 给集群中特定的实例</h4><p>目前不支持指派一个Job到集群中特定的节点。假如你需要这种行为，你可以创建一个非集群的 Quartz 应用与集群中的节点并行运行。注意，不要让非集群的实例指向到集群所用的同一套数据库表。不然你会得到不可预知的结果。</p><h4 id="在集群中的每一个节点上运行-Job"><a href="#在集群中的每一个节点上运行-Job" class="headerlink" title="在集群中的每一个节点上运行 Job"></a>在集群中的每一个节点上运行 Job</h4><p>正如前面所回答的，当前还没有一种方式能让某一个 Job 实例在集群中的每一个节点上都运行。最好的办法是使用一个非集群的实例与集群的每一个节点并行运行，并且要使用独立的一套数据库表或单独的 JobInitializationPlugin 和 RAMJobStore 用到的 XML 文件。</p><h5 id="在不同的机器上运行节点"><a href="#在不同的机器上运行节点" class="headerlink" title="在不同的机器上运行节点"></a>在不同的机器上运行节点</h5><p>Quartz 实际并不关心你是在相同的还是不同的机器上运行节点。当集群是放置在不同的机器上时，通常称之为水平集群。节点是跑在同一台机器是，称之为垂直集群。对于垂直集群，存在着单点故障的问题。这对高可用性的应用来说是个坏消息，因为一旦机器崩溃了，所有的节点也就被有效的终止了。</p><h4 id="使用时间同步服务"><a href="#使用时间同步服务" class="headerlink" title="使用时间同步服务"></a>使用时间同步服务</h4><p>当你在是在不同的机器上运行 Quartz 集群时，时钟应当要同步，以免出现离奇且不可预知的行为。我们已经提及过，假如时钟没能够同步，Scheduler 实例将对其他节点的状态产生混乱。有几种简单的方法来保证时钟何持同步，而且也没有理由不这么做。<br>最简单的同步计算机时钟的方式是使用某一个 Internet 时间服务器(Internet Time Server ITS)。关于如何基于其中一个国际可接受标准来设置你的时钟的信息请看 <a href="http://tf.nist.gov/service/its.html%E3%80%82">http://tf.nist.gov/service/its.html。</a></p><h4 id="从集群获取正在执行的-Job-列表"><a href="#从集群获取正在执行的-Job-列表" class="headerlink" title="从集群获取正在执行的 Job 列表"></a>从集群获取正在执行的 Job 列表</h4><p>当前，如果不直接进到数据库的话，还没有一个简单的方式来得到集群中所有正在执行的 Job 列表。如果你请求一个 Scheduler 实例，你将只能得到在那个实例上正运行 Job 的列表。你可以写一些访问数据库 JDBC 代码来从适当的表中获取信息。当然，这是用的 Quartz 之外的方法，但确是能解决问题的。另一个方法是使用 Quartz 的 RMI 特性来依次连接到每一个节点，并从中查询到当前正在执行的 Job。</p><h4 id="让集群和非集群实例一起运行"><a href="#让集群和非集群实例一起运行" class="headerlink" title="让集群和非集群实例一起运行"></a>让集群和非集群实例一起运行</h4><p>非集群环境不要使用与集群应用相同的一套数据库表；否则将得到不可预知的结果，集群和非集群的 Job 都会遇到问题。</p><h4 id="在集群环境中使用全局监听器"><a href="#在集群环境中使用全局监听器" class="headerlink" title="在集群环境中使用全局监听器"></a>在集群环境中使用全局监听器</h4><p>在集群环境中，你仍然可以使用 Job 和 Trigger 监听器。唯一的问题是哪一个 Scheduler 实例将收到方法回调。<br>要记住这个最简单的方法是：Job 或 Trigger 是在哪个 Scheduler 实例上执行的，通知的就是这个 Scheduler 实例上的监听器。因为 Job 和 Trigger 只会在单个节点上执行，也就只会通知那个节点上的监听器。</p><p>到此Java Quartz Job Scheduling基础的内容已经完成，但对Quartz的学习还远远没有结束，比如类似Terracotta Quartz这种分布式缓存实现Quartz集群，比如Quartz与Spring Boot框架结合的使用。未完待续…</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>《Quartz Job Scheduling Framework v1.0.0》<br><a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/">http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/</a> Quartz Job Scheduler Tutorials<br><a href="https://www.cnblogs.com/mengrennwpu/p/7191229.html">https://www.cnblogs.com/mengrennwpu/p/7191229.html</a> Quartz使用(4) - Quartz监听器Listerner<br><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html">https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html</a> Quartz集群原理及配置应用<br><a href="https://www.cnblogs.com/yangyudexiaobai/p/4422665.html">https://www.cnblogs.com/yangyudexiaobai/p/4422665.html</a> quartz定时任务框架调度机制解析</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作命令</title>
      <link href="/2022/08/17/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/08/17/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p>查看java进程：ps aux|grep java </p><h3 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h3><p>实时查看日志，并显示之前的200行：tail -200f XXX.log</p><h1 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h1><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><ul><li><p>df -h ：查看硬盘剩余容量</p><pre class="language-bash" data-language="bash"><code class="language-bash">df（英文全拼：disk free） 命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。</code></pre></li></ul><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><ul><li><p>du -sh * ，du -h –max-depth=1 ：查看当前目录下每项大小</p><pre class="language-bash" data-language="bash"><code class="language-bash">du<span class="token punctuation">(</span>disk usage<span class="token punctuation">)</span>命令用于显示目录或文件所占用的磁盘空间。-h或--human-readable 以K，M，G为单位，提高信息的可读性。-s或--summarize 仅显示总计。--max-depth<span class="token operator">=</span><span class="token operator">&lt;</span>目录层数<span class="token operator">></span> 超过指定层数的目录后，予以忽略。</code></pre></li></ul><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ul><li>rm -rf 文件夹 ：删除文件夹</li><li>rm edu_* ：删除edu开头的所有文件</li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><ul><li>free -m 内存</li></ul><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><ul><li>netstat -tunlp|grep [端口号]  根据端口查进程号</li><li>ps -ef|grep [进程号] 根据进程号查相关进程信息</li></ul><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li><p>find [搜索范围路径] -name [文件名/文件夹名] 可用*来模糊查询</p></li><li><p>rm -rf [文件名/文件夹名] 删除文件 注意：绝对不要用<code>/*</code>删除文件</p></li><li><p>tail -200f XXX.log 实时查看</p></li><li><p>tar zxvf xx.tar.gz  解压文件</p></li></ul><h2 id="复制和移动"><a href="#复制和移动" class="headerlink" title="复制和移动"></a>复制和移动</h2><h3 id="文件复制命令cp"><a href="#文件复制命令cp" class="headerlink" title="文件复制命令cp"></a>文件复制命令cp</h3><p><strong>命令格式：</strong></p><blockquote><p>cp [-adfilprsu] 源文件(source) 目标文件(destination)</p><p>cp [option] source1 source2 source3 …  directory</p><p>即： cp  [options] sourcedir  destdir</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-a</strong>  :  是指archive的意思，也说是指复制所有的目录</p><p><strong>-d</strong>  :  若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</p><p><strong>-f</strong>  :  强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</p><p><strong>-i</strong>  :  若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</p><p><strong>-l</strong>  :  建立硬连接(hard link)的连接文件，而非复制文件本身</p><p><strong>-p</strong>  :  与文件的属性一起复制，而非使用默认属性</p><p><strong>-r</strong>  :  递归复制，用于目录的复制操作</p><p><strong>-s</strong>  :  复制成符号连接文件(symbolic link)，即“快捷方式”文件</p><p><strong>-u</strong>  :  若目标文件比源文件旧，更新目标文件</p></blockquote><p><strong>cp命令案例：</strong></p><blockquote><p><strong>cp  /etc/sys.conf  /home/</strong></p><p>​    将/etc/sys.conf文件复制到home目录下</p><p><strong>cp /test1/file1 /test3/file2</strong></p><p>​    将/test1目录下的file1复制到/test3目录，并将文件名改为file2</p><p><strong>cp -r test/ /home/</strong></p><p>​    将当前目录”test/“以及其所有文件复制到home目录下</p><p><strong>cp -r test/ nettest</strong></p><p>​    将当前目录”test/“下的所有文件复制到新目录“newtest”下</p><p><strong>cp -a /etc/ /home</strong></p><p>​    将”/etc/“目录以及所有文件和子目录以及延伸的（保留链接、文件属性）复制到/home目录下</p></blockquote><h3 id="文件移动命令mv"><a href="#文件移动命令mv" class="headerlink" title="文件移动命令mv"></a>文件移动命令mv</h3><p><strong>命令格式：</strong></p><blockquote><p>mv [-fiv] source destination</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-f</strong>  :  force，强制直接移动而不询问</p><p><strong>-i</strong>  :  若目标文件(destination)已经存在，就会询问是否覆盖</p><p><strong>-u</strong>  :  若目标文件已经存在，且源文件比较新，才会更新</p></blockquote><p><strong>mv命令案例：</strong></p><blockquote><p>mv /test1/file1 /test3/file2</p><p>​    表示将test1目录下的file1复制到test3 目录，并将文件名改为file2</p><p>mv * ../</p><p>​     表示Linux当前目录所有文件移动到上一级目录</p></blockquote><h3 id="文件删除命令rm"><a href="#文件删除命令rm" class="headerlink" title="文件删除命令rm"></a>文件删除命令rm</h3><p><strong>命令格式：</strong></p><blockquote><p>rm [fir] 文件或目录</p></blockquote><p><strong>参数说明：</strong></p><blockquote><p><strong>-f</strong>  :  强制删除</p><p><strong>-i</strong>  :  交互模式，在删除前询问用户是否操作</p><p><strong>-r</strong>  :  递归删除，常用在目录的删除</p></blockquote><h4 id="rm命令案例："><a href="#rm命令案例：" class="headerlink" title="rm命令案例："></a>rm命令案例：</h4><blockquote><p><strong>rm -i /test/file1</strong></p><p>表示删除/test目录下的file1文件</p></blockquote><h2 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h2><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r local_folder remote_username@remote_ip:remote_folder </code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> local_file remote_username@remote_ip:remote_folder<span class="token function">scp</span> local_file remote_username@remote_ip:remote_file</code></pre><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><h3 id="tar-Tape-Archive，磁带归档的缩写）"><a href="#tar-Tape-Archive，磁带归档的缩写）" class="headerlink" title="tar(Tape Archive，磁带归档的缩写）"></a>tar(Tape Archive，磁带归档的缩写）</h3><p>用于归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用 gzip 或者 bzip2 等技术进行压缩。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre class="language-sh" data-language="sh"><code class="language-sh">tar &lt;选项&gt; &lt;文件或目录&gt;</code></pre><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><pre class="language-sh" data-language="sh"><code class="language-sh">--delete : 从tar包中删除某个文件-r, --append : 将文件追加到tar归档文件中-t, --list : 列出tar归档文件中包含的文件或目录-u, --update : 将已更新的文件追加到tar归档文件中-x, --extract, --get : 释放tar归档文件中文件及目录-C, --directory&#x3D;DIR : 执行归档动作前变更工作目录到 目标DIR-f, --file&#x3D;ARCHIVE : 指定 (将要创建或已存在的) 归档文件名-j, --bip2 : 对归档文件使用 bzip2 压缩-J, --xz : 对归档文件使用 xz 压缩-p, --preserve-permissions : 保留原文件的访问权限-v, --verbose : 显示命令整个执行过程-z, gzip : 对归档文件使用 gzip 压缩</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-sh" data-language="sh"><code class="language-sh">tar -cvf mytest.tar &#x2F;etc&#x2F; &#x2F;root&#x2F;anaconda-ks.cfg  #创建一个 tar 文件，将 &#x2F;etc&#x2F; 目录和 &#x2F;root&#x2F;anaconda-ks.cfg 文件打包进去tar -tvf mytest.tar  # 列出归档文件中的内容tar -rvf mytest.tar original-ks.cfg# 追加某文件到归档(tar)文件中tar -xvf mytest.tar #释放tar归档至当前所在目录tar -xvf mytest.tar -C testdir02 #释放 tar 文件到指定目录tar -zcpvf myarchive.tar.gz &#x2F;etc&#x2F; &#x2F;opt&#x2F; #注-zcpvf顺序不能变 创建并压缩归档文件tar -zxpvf myarchive.tgz -C &#x2F;tmp&#x2F; #解压 .tar.gz</code></pre><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><ul><li>service iptables status 、firewall-cmd –state或service firewalld status 防火墙状态<pre class="language-sh" data-language="sh"><code class="language-sh"># 查看防火墙状态service iptables statussystemctl status firewalld.service# 停止防火墙service iptables stopsystemctl stop firewalld.service# 启动防火墙service iptables startsystemctl start firewalld.service# 重启防火墙service iptables restart systemctl restart firewalld.service# 永久关闭防火墙chkconfig iptables off  # 永久关闭后重启chkconfig iptables on　# 禁用防火墙systemctl disable firewalld.service</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 安装</title>
      <link href="/2022/08/14/gradle%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/14/gradle%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Gradle-安装前的准备"><a href="#Gradle-安装前的准备" class="headerlink" title="Gradle 安装前的准备"></a>Gradle 安装前的准备</h2><p>Gradle 可以安装在 Linux，macOS，Windows 等主流操作系统，唯一的要求就是操作系统上已经安装了 Java JDK 7 及以上版本。可以通过 java -version 验证是否满足条件，以下是我的例子：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> java -versionjava version <span class="token string">"1.8.0_152"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_152-b16<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.152</span>-b16, mixed mode<span class="token punctuation">)</span></code></pre><h2 id="第一种安装方式"><a href="#第一种安装方式" class="headerlink" title="第一种安装方式"></a>第一种安装方式</h2><h3 id="1-访问官网下载最新版安装包"><a href="#1-访问官网下载最新版安装包" class="headerlink" title="1. 访问官网下载最新版安装包"></a>1. <a href="https://link.ld246.com/forward?goto=https://gradle.org/releases">访问官网</a>下载最新版安装包</h3><p>官方提供以下 2 种压缩包可供下载</p><ul><li>binary-only (如果不需要源码、文档，选择下载这个压缩包就够了)</li><li>complete (包含文档及源码)</li></ul><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><p>以下操作以 gradle 4.9 版本为例</p><h4 id="2-1-Linux-amp-macOS-用户"><a href="#2-1-Linux-amp-macOS-用户" class="headerlink" title="2-1. Linux &amp; macOS 用户"></a>2-1. Linux &amp; macOS 用户</h4><p>将下载的压缩包解压到任意你想要存放的位置，如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> /opt/gradle<span class="token operator">></span> <span class="token function">unzip</span> -d /opt/gradle gradle-4.9-bin.zip<span class="token operator">></span> <span class="token function">ls</span> /opt/gradle/gradle-4.9LICENSE  NOTICE  bin  getting-started.html  init.d  lib  media</code></pre><h4 id="2-2-Windows-用户"><a href="#2-2-Windows-用户" class="headerlink" title="2-2. Windows 用户"></a>2-2. Windows 用户</h4><p>将下载的压缩包解压到任意你想要存放的位置，如：</p><blockquote><p>在 c 盘新建一个 Gradle 目录</p><p>将下载回来的压缩包解压到 c:\Gradle 下</p><p>最终路径格式 c:\Gradle\gradle-4.9</p></blockquote><h3 id="3-配置系统环境变量"><a href="#3-配置系统环境变量" class="headerlink" title="3. 配置系统环境变量"></a>3. 配置系统环境变量</h3><p>为了更方便的使用 gradle 命令，我们需要将 gradle 安装目录下的 bin 文件夹路径加入到 path 环境变量</p><h4 id="3-1-Linux-amp-macOS-用户"><a href="#3-1-Linux-amp-macOS-用户" class="headerlink" title="3-1. Linux &amp; macOS 用户"></a>3-1. Linux &amp; macOS 用户</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/opt/gradle/gradle-4.9/bin</code></pre><h4 id="3-2-Windows-用户"><a href="#3-2-Windows-用户" class="headerlink" title="3-2. Windows 用户"></a>3-2. Windows 用户</h4><blockquote><p>右击 我的电脑 → 属性 → 高级系统配置 → 环境变量 → 系统变量</p><p>找到 Path 变量 → 编辑</p><p>将 C:\Gradle\gradle-4.9\bin 添加进去</p><p>保存，退出</p></blockquote><p>至此，Gradle 已经成功安装到自己的机器，并可以方便的调用 gradle 命令执行各种操作了</p><p>下面👇介绍另外一种更方便、高效的安装方法，只需执行一条命令就能完成 Gradle 的安装</p><h2 id="第二种安装方式"><a href="#第二种安装方式" class="headerlink" title="第二种安装方式"></a>第二种安装方式</h2><p>通过包管理软件快速安装 gradle</p><h3 id="1-macOS-用户"><a href="#1-macOS-用户" class="headerlink" title="1. macOS 用户"></a>1. macOS 用户</h3><h4 id="通过-Homebrew-安装"><a href="#通过-Homebrew-安装" class="headerlink" title="通过 Homebrew 安装"></a>通过 <a href="https://link.ld246.com/forward?goto=http://brew.sh/">Homebrew</a> 安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gradle</code></pre><h3 id="2-Windows-用户"><a href="#2-Windows-用户" class="headerlink" title="2. Windows 用户"></a>2. Windows 用户</h3><h4 id="2-1-通过-Scoop-安装"><a href="#2-1-通过-Scoop-安装" class="headerlink" title="2-1. 通过 Scoop 安装"></a>2-1. 通过 <a href="https://link.ld246.com/forward?goto=http://scoop.sh/">Scoop</a> 安装</h4><p>一款灵感来自 Homebrew 的 Windows 系统包管理软件</p><pre class="language-bash" data-language="bash"><code class="language-bash">scoop <span class="token function">install</span> gradle</code></pre><h4 id="2-2-通过-Chocolatey-安装"><a href="#2-2-通过-Chocolatey-安装" class="headerlink" title="2-2. 通过 Chocolatey 安装"></a>2-2. 通过 <a href="https://link.ld246.com/forward?goto=https://chocolatey.org/">Chocolatey</a> 安装</h4><p>另一款 Windows 系统包管理软件</p><pre class="language-bash" data-language="bash"><code class="language-bash">choco <span class="token function">install</span> gradle</code></pre><h3 id="3-Linux-用户"><a href="#3-Linux-用户" class="headerlink" title="3. Linux 用户"></a>3. Linux 用户</h3><h4 id="3-1-通过-SDKMAN-安装"><a href="#3-1-通过-SDKMAN-安装" class="headerlink" title="3-1. 通过 SDKMAN! 安装"></a>3-1. 通过 <a href="https://link.ld246.com/forward?goto=http://sdkman.io/">SDKMAN!</a> 安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">skd <span class="token function">install</span> gradle</code></pre><h2 id="验证-Gradle-是否安装成功"><a href="#验证-Gradle-是否安装成功" class="headerlink" title="验证 Gradle 是否安装成功"></a>验证 Gradle 是否安装成功</h2><p>打开命令行工具输入以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">gradle -v</code></pre><p>应该看到类似输出，以我在 macOS 系统为例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">------------------------------------------------------------Gradle <span class="token number">4.9</span>------------------------------------------------------------ Build time:   <span class="token number">2018</span>-07-16 08:14:03 UTCRevision:     efcf8c1cf533b03c70f394f270f46a174c738efcGroovy:       <span class="token number">2.4</span>.12Ant:          Apache Ant<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> version <span class="token number">1.9</span>.11 compiled on March <span class="token number">23</span> <span class="token number">2018</span>JVM:          <span class="token number">1.8</span>.0_152 <span class="token punctuation">(</span>Oracle Corporation <span class="token number">25.152</span>-b16<span class="token punctuation">)</span>OS:           Mac OS X <span class="token number">10.13</span>.4 x86_64</code></pre><p>详见 Gradle 官方 <a href="https://link.ld246.com/forward?goto=https://docs.gradle.org/current/userguide/installation.html">安装文档</a></p>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2022/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一直想搭建一个自己的博客网站，自己在网上找了一些框架，最终准备使用hexo搭建一个。</p><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并可通过修改主题，让你的博客丰富多彩。</p><h1 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h1><p>详细可参考 <a href="https://hexo.io/zh-cn/docs">Hexo官方文档</a></p><p><strong>目录结构</strong></p><ul><li>概述</li><li>搭建Hexo<ul><li>安装Git</li><li>安装Node.js</li><li>添加国内镜像源</li><li>安装Hexo</li><li>模板设置</li><li>Front-matter 选项详解</li><li>最全示例</li><li>配置修改</li><li>连接Github与本地</li><li>发布文章</li></ul></li><li>个性化主题<ul><li>更换主题</li><li>新建页面</li><li>配置修改</li><li>代码高亮</li><li>搜索</li><li>修改打赏的二维码图片</li><li>修改页脚</li></ul></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载 <a href="https://git-scm.com/download/win">Git</a>。</p><p>安装选项还是全部默认</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.js</a>，最新版的Node.js可前往<a href="https://nodejs.org/en/download/">Node官网</a></p><p>安装选项全部默认。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，出现版本号，那么就安装成功了。</p><h3 id="设置全局和缓存路径-选做"><a href="#设置全局和缓存路径-选做" class="headerlink" title="设置全局和缓存路径(选做)"></a>设置全局和缓存路径(选做)</h3><p>默认情况下，我们在执行<code>npm install -g XXXX</code>下载全局包时，这个包的默认存放路径位<code>C:\Users\username\AppData\Roaming\npm\node_modules下</code>，可以通过<code>CMD</code>指令<code>npm root -g</code>查看</p><pre class="language-sh" data-language="sh"><code class="language-sh">C:\Users\liaijie\AppData\Roaming\npm\node_modules</code></pre><p>但是有时候我们不想让全局包放在这里，我们可以自定义存放目录,在<code>CMD</code>窗口执行以下两条命令修改默认路径（推荐）：</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm config set prefix &quot;D:\node\node_global&quot;npm config set cache &quot;D:\node\node_cache&quot;</code></pre><p>或者打开<code>c:\node\node_modules\npm\.npmrc</code>文件，修改如下：</p><pre class="language-sh" data-language="sh"><code class="language-sh">prefix &#x3D;D:\node\node_globalcache &#x3D; D:\node\node_cache</code></pre><p>​    以上操作表示，修改全局包下载目录为<code>C:\node\node_global</code>,缓存目录为<code>C:\node\node_cache</code>,并会自动创建<code>node_global</code>目录，而<code>node_cache</code>目录是缓存目录，会在你下载全局包时自动创建。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org</code></pre><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如<code>D:\blog</code>目录下。</p><p>使用定位到该目录下，输入下面的指令安装Hexo。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>可能会有几个报错，无视它。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>   <span class="token comment"># 初始化文件夹</span>$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>  $ <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装必备的组件</span></code></pre><p>之后就可以输入<code>hexo s</code>启动服务，效果如下：</p><p><img src="01.png"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><p>Hexo常用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g  <span class="token comment"># 生成博客网页文件</span>hexo s  <span class="token comment"># 本地预览博客</span>hexo d  <span class="token comment"># 上传网页文件到github</span></code></pre><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>为新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>date<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---</code></pre><p>建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>date<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>type<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>layout<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>---</code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown  <span class="token punctuation">---</span></code></pre><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">_config.yml<span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><p>详细可参考 <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a> 。    </p><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><p>修改配置文件<code>_config.yml</code></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment"># title</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token comment"># 二级标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token comment"># 描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token comment"># 关键字</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token comment"># 作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token comment"># 你的网站地址</span></code></pre><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"myname"</span><span class="token function">git</span> config --global user.email <span class="token string">"email@qq.com"</span></code></pre><p>用户名和邮箱根据你注册<strong>github的信息</strong>自行修改。</p><p>然后生成密钥SSH key：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"email@qq.com"</span> <span class="token comment"># 会把公钥和私钥生成到~/.ssh文件夹下</span></code></pre><p>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随意。</p><p>将公钥id_rsa.pub复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="02.png"></p><p>新建一个username.github.io的项目，然后修改根目录下的<code>_config.yml</code>文件。</p><p>修改最后一行的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:username/username.github.io.git  branch: master</code></pre><p><strong>repository修改为你自己的github项目地址</strong>。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>首先在博客根目录下执行命令<code>npm i hexo-deployer-git</code> 安装一个deploy。</p><p>输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>打开<code>D:\blog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上，这时在github.io仓库就可以看到该文章了。</p><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><h1 id="个性化主题"><a href="#个性化主题" class="headerlink" title="个性化主题"></a>个性化主题</h1><p>本次个性化设置主要针对的是<code>matery</code>主题。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>详细介绍参考<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code>（看文件夹名）</p><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class="language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token number">404</span>date<span class="token operator">:</span> <span class="token number">2022</span><span class="token number">-07</span><span class="token number">-10</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>type<span class="token operator">:</span> <span class="token string">"404"</span>layout<span class="token operator">:</span> <span class="token string">"404"</span>description<span class="token operator">:</span> <span class="token string">"你来到了没有知识的荒原 :("</span>---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h4><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&lt;%- __('myCV') %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &lt;%- page.content %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h2 id="配置修改-1"><a href="#配置修改-1" class="headerlink" title="配置修改"></a>配置修改</h2><p>修改配置文件 <code>/themes/matery/_config.yml</code> 。 </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.</span><span class="token key atrule">indexbtn</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xx<span class="token comment"># 首页 banner 中的第二行个人信息配置，留空即不启用</span><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/xx  <span class="token key atrule">email</span><span class="token punctuation">:</span> xx@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">12345678</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># true、false</span><span class="token key atrule">githubLink</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xx<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token comment"># 目录</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 其他参考官方文档 </span></code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><p>如果配置不生效，执行下<code>hexo clean</code>  后再启动hexo。</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h2 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h2><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片</p><h2 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h2><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。</p><p>修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h3><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sitetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="修改不蒜子初始化计数"><a href="#修改不蒜子初始化计数" class="headerlink" title="修改不蒜子初始化计数"></a>修改不蒜子初始化计数</h3><p>在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 50ms周期检测函数</span>        <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化首次数据</span>        <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加上初始数据 </span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止检测</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后把上面几行有段代码：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %></code></pre><p>修改为：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>        人次,<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;% &#125; %></code></pre><p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p><h2 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h2><p>主题自带了gitalk插件，只需要去github官网配置即可。</p><p>首先打开<a href="https://github.com/settings/applications/new">github</a>申请一个应用，要填四个东西：</p><pre class="language-none"><code class="language-none">Application name &#x2F;&#x2F;应用名称，随便填Homepage URL &#x2F;&#x2F;填自己的博客地址Application description &#x2F;&#x2F;应用描述，随便填Authorization callback URL &#x2F;&#x2F;填自己的博客地址</code></pre><p>然后点击注册，会出现两个字符串<code>Client ID</code>和<code>Client Secret</code>，这个要复制出来。</p><p>然后去主题的配置文件<code>_config.yml</code>下修改<code>gitalk</code>处：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> 你的github用户名  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你的github用户名.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> 粘贴刚刚注册完显示的字符串  <span class="token key atrule">admin</span><span class="token punctuation">:</span> 你的github用户名</code></pre><p>以后写文章的时候，只要在文章页面登陆过github，就会自动创建评论框，<strong>记得每次写完文章后打开博客文章页面一下</strong>。</p><p>gitalk总有跨域的问题，后期看情况解决。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
